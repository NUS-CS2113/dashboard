[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d modsUNI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W17-2/main[image:https://travis-ci.org/CS2103-AY1819S1-W17-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/CrimsonJacket/main[image:https://ci.appveyor.com/api/projects/status/6p90b4gg7ahc31r9?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W17-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W17-2/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/CrimsonJacket/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-W17-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/4944450c9c804c8d9c181ae1cc733c1c[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/CS2103T-modUni/Lobby[image:https://badges.gitter.im/CS2103T-modUni/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni is a desktop timetable management application created by students for students. It incorporates a simple GUI with majority of its user interactions occurring in its in-built CLI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni is targeted at NUS undergraduates(possibly other local universities like NTU \u0026 SMU) in need of a tool to generate a simple module plan for their respective academic semesters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Undergraduates with no clue as to how to plan their timetables in the respective semesters can use our tool to include possible module combinations and with a simple command/click, modsUni would generate a possible timetable for students."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* With literally hundreds of modules and thousands more combinations, students are faced with a dilemma semester after semester. Additional prerequisites and preclusions only exacerbate the already complicated and often frustrating process of planning timetables."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni is the one-stop solution for all students. Incorporating advanced algorithms and enhanced UI/UX design, modsUni can help students manage their modules throughout their candidature effectively, efficiently and swiftly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni includes the following features:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Students can manage their respective accounts"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Students can manage modules their have already taken or ought to take"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Students can export/import current module configurations"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Students can generate a timetable that includes the modules they have specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Administrators can add/update/delete modules accordingly"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni is built upon an https://github.com/se-edu/addressbook-level4[AddressBook-Level4] Application created by the https://github.com/se-edu/[SE-EDU] initiative."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 12,
      "-": 31,
      "etjk": 1
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u0027site-name\u0027: \u0027modsUni\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W17-2/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 2,
      "-": 245
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "modsUni - A desktop timetable management application created by students for students."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Daniel Tan Jia Wang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::crimsonjacket.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[https://github.com/CrimsonJacket[github]] [\u003c\u003cdanieltan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibilities: In charge of Git, Project Management"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Edric Teo Jin Kai"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::etjk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[http://github.com/etjk[github]] [\u003c\u003cedricteo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibilities: In charge of Storage, Deliverables and Deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d He ZhenFeng"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::hzf1174.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[http://github.com/hzf1174[github]] [\u003c\u003czhenfeng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibilities: In charge of UI, Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Lin Deming"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::deming16.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[http://github.com/deming16[github]] [\u003c\u003cdeming#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibilities: In charge of UI, Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Reuben Tan Jun Liang"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::rtjl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[http://github.com/RTJL[github]] [\u003c\u003creubentan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibilities: In charge of Integration, Code Consistency"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "etjk": 24
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W17-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "* *Email us* : You can also reach us at `danieltjw [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "etjk": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d modsUni - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team W17-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "NUS undergraduates, in particular, a freshman who has just started their candidature and have absolutely no idea how to plan their modules."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "A candidature planner for NUS Undergraduates to assist them in their module planning process."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that..."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |my search queries to be case-insensitive |I can type commands faster"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |be able to know the total workload of the modules |I will not overload"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |set a preferred semester to take a module |I can take it with friends"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |remove modules |my schedule will be updated"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |add in modules that I would like to take |it will be added into my schedule"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |set a preferred max of semesters |I can I can graduate earlier"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |add in modules that I’ve taken previously |I can see what modules I can take"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |load my schedule |I do not need to plan it again"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |see what commands are available |I know what i can do"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |save my schedule |I do not need to plan it again"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |search through a list of available modules |I can determine the exact module code"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |check if my module plan is feasible |I know if I need to make any changes"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |search for a module |I can find out details about it"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |developer |be able to view all documentation on methods |I can include additional features in the future"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |be able to see the prerequisite modules of a module |I can see what modules to take"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |an application that is standalone |I do not have to download dependency"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |be able to determine if I have preclusion to a module |i will not end up taking modules i am not suppose to take"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |be able to contact the developer |I can report bugs to improve the software"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |be able to generate a module planner |I can plan for my entire candidature in my respective university"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |user |to customise the look of the software |it is pleasing to the eyes"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |advanced user |to have auto complete commands |I do not need to type so much"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |student |to be able to edit modules |I don\u0027t need to generate a new plan if I need to make any changes"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |student |to search for a professor |I know what mods is he teaching"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |student |to be warned of the timetable clashes |I will not make an unreasonable schedule"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |student |my personal information to be stored securely |I am not subjected to identity theft"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |developer |to be able to integrate my plugins |I can enhance user experience"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |student |to be able to view student reviews on modules |I can better inform myself on what to expect of certain modules"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "|`**` |student |to be able to print the schedule |I can better store it"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user| to be able to store my settings in cloud| I can access them everywhere"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |student |to be able to view exam schedules| I can better prepare for finals"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `modsUni` and the *Actor* is the `NUS Undergraduate`, unless specified otherwise)"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add module"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User starts up application"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "2.  User type in the relevant commands [`add \u003cMOD_CODE\u003e`]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "etjk"
        },
        "content": "* 1a. Load existing module configurations."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete module"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User starts up application"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "2.  User type in the relevant commands [`remove \u003cMOD_CODE\u003e`]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Generate Candidature Plan"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "1. User starts up application"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "2. User add module [UC01] using command line"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "3. User generate plan using relevant command [`generate`]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "etjk"
        },
        "content": "* 3a. Student able to generate plan based on years of candidature using relevant command [`generate \u003cNUM_YEAR\u003eyear`]."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "etjk"
        },
        "content": "* 3b. Student able to generate plan based on specifying the semester in which a module is preferred to be taken using relevant command [`generate \u003cMOD_CODE\u003e\u003cSEMESTER\u003e`]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Search module"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "1. User type in the relevant command [search \u003cKEYWORD\u003e]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "2. modsUni output search results in a list on the screen if any"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: See prerequisites of a module"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "1. User type in the relevant command [`prereq \u003cMODULE CODE\u003e`]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "2. System output the prerequisites for the module"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Load existing configuration"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "1. User starts up application"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "2. User type in the relevant command [`load \u003cCONFIG_FILE\u003e`]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "etjk"
        },
        "content": ".  Should be able to generate a user’s schedule under less than 10 seconds."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "etjk"
        },
        "content": ".  Sensitive information (e.g. passwords) should not be saved in plaintext."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "etjk"
        },
        "content": ".  A user should be able to remove any personal identifiable information **(PII)** from the application."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "etjk"
        },
        "content": ".  An administrator should not be able to log in on behalf of a user."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "etjk"
        },
        "content": "[[cli]] CLI::"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "etjk"
        },
        "content": "CLI is an acronym for Command Line Interface. It is a text-based interface which facilitates interaction between the user and the software."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "etjk"
        },
        "content": "[[module]] Modules::"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "etjk"
        },
        "content": "Modules are classes on a specific set of topic, and assignments are often included to facilitate the learning process."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "etjk"
        },
        "content": "Each module has its own code and module name, when coupled acts as an unique identifier to the module."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "etjk"
        },
        "content": "[[user]] User::"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "etjk"
        },
        "content": "There are two types of use mainly `Student` and `Administrator`. Each of them have different functions implemented based on their role."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "etjk"
        },
        "content": "[[xml]] XML::"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "etjk"
        },
        "content": "XML represent eXtensible Markup Language. It is used to create a common information format which facilitates the sharing of information through different interfaces."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "-": 1004,
      "etjk": 17
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d modsUni - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W17-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team W17-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "modsUni is an application for NUS students who want to quickly generate a plan for the modules to take during their entire university life. +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "Currently, modsUni is an application that makes use of a **Command Line Interface** (CLI) for ease of use and increased productivity. The application also utilises a **Graphical User Interface** (GUI) for displaying of results."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "This way, you are able to use the application easily and effectively without compromising its aesthetics. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `modsUni.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for modsUni."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`CS2103T` : adds the module CS2103T to the module configuration"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **`remove`**`CS2103T` : removes the module CS2103T to the module configuration"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* **`exit`** : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add \u003cMOD_CODE\u003e` is a parameter which can be used as `add CS2103T`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `MOD_CODE [MORE MOD_CODES]` can be used as `add CS2103T CS2101` or as `add CS2103T`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Gives the list of command available for the user to use. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Adding a module: `addon` `[coming in v2.0]`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Adds a module to the student’s module list. Adding is case insensitive. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Format: `addon \u003cMOD_CODE\u003e [MORE MOD_CODE]`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* `addon CS2103T`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etjk"
        },
        "content": "* `addon cS2103t` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etjk"
        },
        "content": "Both the above commands will have the same effect."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* `addon CS2103T CS2101 CS1010` `[coming in v2.0]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Deleting a module: `remove` `[coming in v2.0]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Deletes a module to the student’s module list. Deleting is case insensitive. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remove \u003cMOD_CODE\u003e [MORE MOD_CODE]`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* `remove CS2103T`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etjk"
        },
        "content": "* `remove Cs2103t` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etjk"
        },
        "content": "Both the above commands will have the same effect."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* `remove CS2103T CS2101 CS1010` `[coming in v2.0]`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Searching for a module: `search` `[coming in v2.0]`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Search for all modules in the database that match the given prefix. Searching is case insensitive. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Format: `search \u003cMOD_CODE\u003e`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* `search CS101` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Returns a list of modules that begin with CS101."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `search cs101` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the same result as above."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "The result above will be generated. `[coming in v2.0]`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving module configurations: `save`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Save current module configurations for future usage. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "etjk"
        },
        "content": "Format: `save`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `save` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "etjk"
        },
        "content": "Saves the current module configuration to the file name `userconfig.xml`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Loading module configurations: `load` `[coming in v2.0]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "etjk"
        },
        "content": "Load saved module configurations. The loaded file must be in xml format. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `load [FILE_NAME]` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "etjk"
        },
        "content": "* `load module-configuration.xml` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "etjk"
        },
        "content": "Loads the configuration file `module-configuration.xml` into modsUni."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d Generate module plan : `generate` `[coming in v1.2]`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Generate a module plan based on added modules invoked by the add or load command. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `generate`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d Login to User Account : `login` `[coming in v1.2]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Login to the User Account with the corresponding username. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Format: `login user/[USERNAME] pass/[PASSWORD] userData/[PATH_TO_DATA_FILE]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d Register a Student Account : `register`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Register a Student Account with the input parameters. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Format: `register user/[USERNAME] pass/[PASSWORD] name/[NAME] pic/[PATH_TO_PIC] enroll/[ENROLLMENT_DATE] maj/[MAJOR_CODE] min/[MINOR_CODE]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d Edit Student Account : `editStudent` `[coming in v1.2]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Edits the Student specific information as specified in the input parameters. +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Format: `editStudent [OPTION]/[INPUT]...` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Available Options:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Name : `name/[NAME]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Profile Picture: `pic/[PATH_TO_PIC]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Enrollment Date: `enroll/[ENROLLMENT_DATE]`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Major : `maj/[MAJOR_CODE]`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Minor : `min/[MINOR_CODE]`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Modules Taken : `modules/[MODULE_CODE]`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Encryption: `no-encrypt` `[coming in v2.0]`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Encryption of information is enabled by default. If users wish to store the saved configuration in plaintext, they are required to explicitly disable this feature. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `no-encrypt`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* Run `no-encrypt` followed by `save` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The application will save the configuration file in plaintext."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Set module preference: `set-mod`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Setting a preferred semester to take a module. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `set-mod \u003cMOD_CODE\u003e \u003cSEMESTER\u003e`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* `set-mod CS2103T 3` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Configures CS2103T to be taken in year 2 semester 1."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Set maximum number of semesters: `set-max-sem \u003cNUM_SEMESTERS\u003e`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Setting the maximum number of semesters during candidature. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `set-max-sem \u003cNUM_SEMESTERS\u003e`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* `set-max-sem 6`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Set theme: `set-theme`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Set a different theme based on a configuration file. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "etjk"
        },
        "content": "Format: `set-theme \u003cFILE_NAME\u003e.xml`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "etjk"
        },
        "content": "* `set-theme \u003cFILE_NAME\u003e.xml`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "deming16"
        },
        "content": "\u003d\u003d\u003d Add a new administrator account: `addAdmin` `[coming in v2.0]`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "deming16"
        },
        "content": "Create and add a new adminstrator account. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Format: `addAdmin user\\[USERNAME] pass\\[PASSWORD] n\\[NAME] ptp\\[PATH_TO_PIC] salary\\[SALARY] date\\[EMPLOYMENTDATE]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* `addAdmin user\\master pass\\myPass n\\John Doe ptp\\johnDoe.img salary\\4000 date\\1/1/2018`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "deming16"
        },
        "content": "\u003d\u003d\u003d Remove a existing administrator account: `removeAdmin` `[coming in v2.0]`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "deming16"
        },
        "content": "Remove a currently existing administrator account. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "deming16"
        },
        "content": "Format: `removeAdmin \u003cUSERNAME`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "deming16"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "deming16"
        },
        "content": "* `removeAdmin user\\adminUsername` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "deming16"
        },
        "content": "Removes a administrator account with username \"adminUsername\" if it exists."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "deming16"
        },
        "content": "\u003d\u003d\u003d Add a new module to database: `addModuleDB` `[coming in v2.0]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "deming16"
        },
        "content": "Creates a new module and add it to the module database. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "deming16"
        },
        "content": "Format: `createModuleDB code\\[MODULE_CODE] department\\[DEPARTMENT] title\\[TITLE] credit\\[CREDIT] available\\[SEM1][SEM2][SPECIAL_TERM1][SPECIAL_TERM2] description\\[DESCRIPTION]`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "deming16"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "deming16"
        },
        "content": "* `createModuleDB code\\CS2109 department\\Computing title\\The New Module credit\\4 available\\yynn description\\This course is newly offered by the school of computing. Visit the module website for more details`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "deming16"
        },
        "content": "\u003d\u003d\u003d Remove a existing module from database: `removeModuleDB` `[coming in v2.0]`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "deming16"
        },
        "content": "Removes a existing module from the module database. +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "deming16"
        },
        "content": "Format: `removeModuleDB \u003cMODULE_CODE\u003e`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "deming16"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "deming16"
        },
        "content": "* `removeModuleDB CS2109` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "deming16"
        },
        "content": "Removes a module with module code \"CS2109\" if it exists."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and load your previously saved module configuration file."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* : `add \u003cMOD_CODE\u003e [MORE_MOD_CODES]`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `remove \u003cMOD_CODE\u003e [MORE_MOD_CODES]`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* *Search* : `search \u003cKEYWORD\u003e [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* *Save* : `save [FILE_NAME]`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* *Load* : `load [FILE_NAME]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* *Generate* : `generate`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* *Login* : `login user/[USERNAME] pass/[PASSWORD] userData/[PATH_TO_DATA_FILE]`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* *Register* : `register user/[USERNAME] pass/[PASSWORD] name/[NAME] pic/[PATH_TO_PIC] enroll/[ENROLLMENT_DATE] maj/[MAJOR_CODE] min/[MINOR_CODE]`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* *Edit Student* : `editStudent [OPTION]/[INPUT]...`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* *Encryption* : `no-encrypt`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* *Add Admin* : `addAdmin user\\[USERNAME] pass\\[PASSWORD] n\\[NAME] ptp\\[PATH_TO_PIC] salary\\[SALARY]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "date\\[EMPLOYMENTDATE]`"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 32,
      "hzf1174": 9,
      "-": 168,
      "deming16": 20,
      "etjk": 22
    }
  },
  {
    "path": "docs/team/zhenfeng.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d He Zhenfeng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d PROJECT: ModsUni"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "modsUni is a desktop timetable management application created by students for students. It incorporates a simple GUI with majority of its user interactions occurring in its in-built CLI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hzf1174": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.storage.CredentialStoreStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.ModuleListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.storage.UserStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.storage.XmlCredentialStoreStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.storage.XmlModuleListStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.storage.XmlUserStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 1, 0, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing modsUni \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStoreStorage credentialStoreStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new XmlCredentialStoreStorage(userPrefs.getCredentialStoreFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ModuleListStorage moduleListStorage \u003d new XmlModuleListStorage(userPrefs.getModuleFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etjk"
        },
        "content": "        UserStorage userStorage \u003d new XmlUserStorage(userPrefs.getUserStorageFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        storage \u003d new StorageManager(moduleListStorage, addressBookStorage,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etjk"
        },
        "content": "            userPrefsStorage, credentialStoreStorage, userStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027 and {@code userPrefs}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyModuleList\u003e moduleListOptional;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Optional\u003cReadOnlyCredentialStore\u003e credentialStoreOptional;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyModuleList initialModuleListData;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyCredentialStore initialCredentialStore;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            // initCredentialStore"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStoreOptional \u003d storage.readCredentialStore();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (!credentialStoreOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Credential Store file not found. Will be starting with a sample Credential Store\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            initialCredentialStore \u003d credentialStoreOptional.orElse(new CredentialStore());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            // initModuleList"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            moduleListOptional \u003d storage.readModuleList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!moduleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Module List data file not found. Will be starting with a sample module list \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"data\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initialModuleListData \u003d moduleListOptional.orElseGet(SampleDataUtil::getSampleModuleList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            // initAddressBook"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initialCredentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initialModuleListData \u003d new ModuleList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            initialCredentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initialModuleListData \u003d new ModuleList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new ModelManager(initialModuleListData, initialData, userPrefs,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "etjk"
        },
        "content": "            initialCredentialStore);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.info(\"Starting modsUni \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping modsUni ] \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 23,
      "-": 222,
      "etjk": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String appTitle \u003d \"modsUni\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_MODULE_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/CredentialStoreChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/** Indicates the CredentialStore in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class CredentialStoreChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public final ReadOnlyCredentialStore data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStoreChangedEvent(ReadOnlyCredentialStore data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return \"No. of Credentials: \" + data.getCredentials().size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/SaveUserChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "/** Indicates the User in the model has changed*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class SaveUserChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public final User user;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public final Path filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public SaveUserChangedEvent(User user, Path filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return \"Current user: \" + user.getName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/CorruptedFileException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Signals that the encrypted file may be corrupted"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class CorruptedFileException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public CorruptedFileException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/InvalidPasswordException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Signals that there an error occurred during decryption"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class InvalidPasswordException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public InvalidPasswordException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DataSecurityUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.security.InvalidKeyException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.security.Key;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.crypto.BadPaddingException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.crypto.Cipher;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.crypto.IllegalBlockSizeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.crypto.NoSuchPaddingException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.crypto.spec.SecretKeySpec;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "import com.google.common.hash.Hashing;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.InvalidPasswordException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Encrypts and decrypts data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class DataSecurityUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String ALGORITHM \u003d \"AES\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String CIPHER_INSTANCE \u003d \"AES/ECB/PKCS5Padding\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String INVALID_PASSWORD_MESSAGE \u003d \"Invalid Password\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String CORRUPTED_FILE_MESSAGE \u003d \"The encrypted file may be corrupted. Decryption failed.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final Charset CHARSET \u003d StandardCharsets.UTF_8;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Encrypts the given file using a password and overwrites the original plaintext file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param file The file to be encrypted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param password Used to encrypt file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static void encryptFile(File file, String password) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "        byte[] fileContent \u003d convertFileToByteArray(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "        byte[] encryptedFileContent \u003d encrypt(fileContent, password);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "        writeByteArrayToFile(file, encryptedFileContent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "        logger.info(\"File encrypted\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Decrypts the given file using a password and overwrites the original encrypted file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param file The file to be decrypted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param password Used to decrypt file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static void decryptFile(File file, String password) throws IOException,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "            InvalidPasswordException, CorruptedFileException, NoSuchPaddingException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etjk"
        },
        "content": "        byte[] fileContent \u003d convertFileToByteArray(file);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etjk"
        },
        "content": "        byte[] decryptedFileContent \u003d decrypt(fileContent, password);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etjk"
        },
        "content": "        writeByteArrayToFile(file, decryptedFileContent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etjk"
        },
        "content": "        logger.info(\"File decrypted\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Encrypts the given data using a password"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param data The data to be encrypted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param password Used to encrypt data"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @return byte[] of the encrypted data"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static byte[] encrypt(byte[] data, String password) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etjk"
        },
        "content": "            Key secretKey \u003d generateSecretKey(password);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etjk"
        },
        "content": "            Cipher aesCipher \u003d Cipher.getInstance(CIPHER_INSTANCE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etjk"
        },
        "content": "            aesCipher.init(Cipher.ENCRYPT_MODE, secretKey);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.info(\"Data encrypted\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return aesCipher.doFinal(data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.severe(\"Unable to encrypt data: \" + e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new byte[0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Decrypts the data using a given password"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param data The data to be decrypted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param password Used to decrypt data"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @return byte[] of the decrypted data"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws InvalidPasswordException if an invalid password is supplied"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static byte[] decrypt(byte[] data, String password) throws InvalidPasswordException,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "etjk"
        },
        "content": "            CorruptedFileException, NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "etjk"
        },
        "content": "            Key secretKey \u003d generateSecretKey(password);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "etjk"
        },
        "content": "            Cipher aesCipher \u003d Cipher.getInstance(CIPHER_INSTANCE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "etjk"
        },
        "content": "            aesCipher.init(Cipher.DECRYPT_MODE, secretKey);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.info(\"Data decrypted\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return aesCipher.doFinal(data);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (BadPaddingException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.warning(\"Invalid password\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "etjk"
        },
        "content": "            handleBadPaddingException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (IllegalBlockSizeException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.warning(\"Corrupted file\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "etjk"
        },
        "content": "            handleIllegalBlockSizeException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new byte[0];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Writes byte array to file"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param file The file to be written"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param data The data to be written into file"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IOException if file do not exist"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static void writeByteArrayToFile(File file, byte[] data) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Files.write(file.toPath(), data);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Converts a file to byte array"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param file The file to be converted"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @return file in byte array"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IOException if file do not exist"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static byte[] convertFileToByteArray(File file) throws IOException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return Files.readAllBytes(file.toPath());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Generates a key"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param password The password to generate the key"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @return A secret key"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static Key generateSecretKey(String password) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new SecretKeySpec(getFirst16Bytes(hash(password).getBytes()), ALGORITHM);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Handles BadPaddingException"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws InvalidPasswordException if an invalid password is supplied"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static void handleBadPaddingException() throws InvalidPasswordException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "etjk"
        },
        "content": "        throw new InvalidPasswordException(INVALID_PASSWORD_MESSAGE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Handles IllegalBlockSizeException"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws CorruptedFileException if an encrypted file is corrupted"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static void handleIllegalBlockSizeException() throws CorruptedFileException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "etjk"
        },
        "content": "        throw new CorruptedFileException(CORRUPTED_FILE_MESSAGE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Generates a SHA-1 hash using a string"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param password The string to be hashed"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static String hash(String password) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return Hashing.sha1().hashString(password, CHARSET).toString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Gets the first 16 bytes of a byte array"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param password The string to be hashed"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @return first 16 bytes of a byte array"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static byte[] getFirst16Bytes(byte[] password) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return Arrays.copyOf(password, 16);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 204
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAdminCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Adds a new admin account."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddAdminCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addAdmin\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new admin account. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_PATH_TO_PIC + \"PATH_TO_PIC \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_SALARY + \"SALARY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_EMPLOYMENT_DATE + \"EMPLOYMENTDATE\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Example \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_USERNAME + \"myUsername \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_PASSWORD + \"myPassword \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_PATH_TO_PIC + \"path \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_SALARY + \"3000 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_EMPLOYMENT_DATE + \"30/09/2018\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New admin added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ADMIN \u003d \"This admin username already exists\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USERNAME \u003d \"This username already exists in the database\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_NOT_ADMIN \u003d \"Only an admin user can execute this command\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Admin toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Credential credential;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AddAdminCommand(Admin admin, Credential credential) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(admin);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(credential);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        toAdd \u003d admin;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credential \u003d credential;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (!model.isAdmin()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (model.hasCredential(credential)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_USERNAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.addCredential(credential);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        /*TODO: Prevent Duplicate Admin"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ADMIN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.addAdmin(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        /*TODO: undo redo"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof AddAdminCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAdminCommand) other).toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 86,
      "deming16": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddModuleToDatabaseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_AVAILABLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CREDIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": " * Adds a new module to database."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class AddModuleToDatabaseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addModuleDB\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new module to database. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE_CODE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_DEPARTMENT + \"DEPARTMENT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_CREDIT + \"CREDIT \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_AVAILABLE + \"[Sem1][Sem2][SpecialTerm1][SpecialTerm2] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + \"(for each entry enter \u00271\u0027 if available, \u00270\u0027 if not)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + \"Example \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2109 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_DEPARTMENT + \"SOC \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_TITLE + \"The new module \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_DESCRIPTION + \"This is a new module that will be offered starting from this semester \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_CREDIT + \"4 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "            + PREFIX_MODULE_AVAILABLE + \"1100\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exist in the database\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added to database\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String MESSAGE_NOT_ADMIN \u003d \"Only an admin user can execute this command\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public AddModuleToDatabaseCommand(Module module) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (!model.isAdmin()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "deming16"
        },
        "content": "        model.addModuleToDatabase(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "deming16"
        },
        "content": "                || (other instanceof AddModuleToDatabaseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "deming16"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleToDatabaseCommand) other).toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddOnCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Adds a module to the user\u0027s profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddOnCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addon\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds on one module to your profile. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"MOD_CODE(case insensitive)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"CS2103T \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in your profile: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE \u003d \"This module does not exist in our database\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    private final Module toSearch;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Module toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Creates an AddOnCommand to add the specified {@code module}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AddOnCommand(Module module) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        toSearch \u003d module;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        toAdd \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public Module getSearchedModule() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Optional\u003cModule\u003e optionalModule \u003d model.searchModuleInModuleList(toSearch);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (optionalModule.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            toAdd \u003d optionalModule.get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof AddOnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "                \u0026\u0026 toSearch.equals(((AddOnCommand) other).toSearch));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 61,
      "hzf1174": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 227
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.EnrollmentDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Command to allow Users to login and access user specific data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Registers a new Student Account. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_PASSWORD + \"PASSWORD \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Login Successfully! Welcome \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_LOGIN_FAILURE \u003d \"Incorrect \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"Password/Invalid User Account\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Credential toLogin;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public LoginCommand(Credential credential) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(credential);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        toLogin \u003d credential;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!model.isVerifiedCredential(toLogin)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_LOGIN_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO Load userData from file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(new Student("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            toLogin.getUsername(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Name(\"dummy\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Role.STUDENT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new PathToProfilePic(\"dummy.img\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new EnrollmentDate(\"08/08/2018\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Arrays.asList(\"CS\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Arrays.asList(\"MA\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toLogin.getUsername()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 toLogin.equals(((LoginCommand) other).toLogin));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ENROLLMENT_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MAJOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MINOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Adds a new Credential to the Credential Store."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Registers a new Student Account. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_PATH_TO_PIC + \"PATH \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_ENROLLMENT_DATE + \"DD/MM/YY \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_MAJOR + \"MAJORCODE_1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_MAJOR + \"MAJORCODE_2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_MINOR + \"MINORCODE_1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_MINOR + \"MINORCODE_2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Account created added: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"%1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USERNAME \u003d \"This username already exists in the database\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Credential toRegister;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final User user;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Creates an RegisterCommand to add the specified {@code Credential}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public RegisterCommand(Credential newCredential, User newUser) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireAllNonNull(newCredential, newUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        toRegister \u003d newCredential;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        user \u003d newUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (model.hasCredential(toRegister)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_USERNAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.addCredential(toRegister);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRegister));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            || (other instanceof RegisterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 toRegister.equals(((RegisterCommand) other).toRegister))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 user.equals(((RegisterCommand) other).user);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Deletes a module from the user\u0027s profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \": Removes the module identified by its code.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Parameters: MOD_CODE(case insensitive)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_REMOVE_MODULE_SUCCESS \u003d \"Removed Module: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE \u003d \"This module does not exist in our database\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_EXISTS \u003d \"This module does not exist in your profile\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    private final Module toSearch;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Module toRemove;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public RemoveCommand(Module module) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.toSearch \u003d module;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.toRemove \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public Module getSearchedModule() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        return toRemove;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Optional\u003cModule\u003e optionalModule \u003d model.searchModuleInModuleList(toSearch);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (optionalModule.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            toRemove \u003d optionalModule.get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!model.hasModule(toRemove)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_EXISTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.removeModule(toRemove);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_MODULE_SUCCESS, toRemove));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof RemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "                \u0026\u0026 toSearch.equals(((RemoveCommand) other).toSearch)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 57,
      "hzf1174": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SAVE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Saves the current user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Saves current user to a specific path. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "            + PREFIX_SAVE_PATH + \"FILEPATH\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "            + PREFIX_SAVE_PATH + \"userconfig\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Current user configuration has be saved!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Unable to save. Please ensure that you are registered or logged in.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private final Path savePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public SaveCommand(Path savePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.savePath \u003d savePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "        User currentUser \u003d model.getCurrentUser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (currentUser \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "        model.saveUserFile(currentUser, savePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Finds and lists all modules in the user\u0027s profile whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches all modules whose codes begin with any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS101\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Module keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private List\u003cModule\u003e result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public SearchCommand(Module module) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.keyword \u003d module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e getResult() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        result \u003d model.searchKeyWordInModuleList(keyword);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_MODULE_LISTED_OVERVIEW, result.size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 keyword.equals(((SearchCommand) other).keyword)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAdminCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.AddAdminCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.EmployDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Salary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new AddAdminCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddAdminCommandParser implements Parser\u003cAddAdminCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAdminCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * and returns an AddAdminCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AddAdminCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_USERNAME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                        PREFIX_PASSWORD, PREFIX_PATH_TO_PIC , PREFIX_SALARY, PREFIX_EMPLOYMENT_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_SALARY, PREFIX_EMPLOYMENT_DATE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "                PREFIX_NAME, PREFIX_PATH_TO_PIC)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //Admin Credential"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Password password \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //Admin info"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Role role \u003d Role.ADMIN;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": "        PathToProfilePic pathToProfilePic \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "deming16"
        },
        "content": "                ParserUtil.parsePathToProfilePic(argMultimap.getValue(PREFIX_PATH_TO_PIC).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Salary salary \u003d ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "deming16"
        },
        "content": "        EmployDate employmentDate \u003d ParserUtil.parseEmployDate(argMultimap.getValue(PREFIX_EMPLOYMENT_DATE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin admin \u003d new Admin(username, name, role, pathToProfilePic, salary,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            employmentDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential credential \u003d new Credential("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            username,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            password,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            password.getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new AddAdminCommand(admin, credential);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 61,
      "deming16": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddModuleToDatabaseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_AVAILABLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CREDIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.commands.AddModuleToDatabaseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": " * The parser for AddModuleToDatabaseCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class AddModuleToDatabaseCommandParser implements Parser\u003cAddModuleToDatabaseCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleToDatabaseCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * and returns an AddModuleToDatabaseCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public AddModuleToDatabaseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_MODULE_DEPARTMENT, PREFIX_MODULE_TITLE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "                        PREFIX_MODULE_DESCRIPTION, PREFIX_MODULE_CREDIT, PREFIX_MODULE_AVAILABLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_MODULE_DEPARTMENT, PREFIX_MODULE_TITLE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "                PREFIX_MODULE_DESCRIPTION, PREFIX_MODULE_CREDIT, PREFIX_MODULE_AVAILABLE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "                    AddModuleToDatabaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String code \u003d argMultimap.getValue(PREFIX_MODULE_CODE).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String department \u003d argMultimap.getValue(PREFIX_MODULE_DEPARTMENT).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String title \u003d argMultimap.getValue(PREFIX_MODULE_TITLE).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_MODULE_DESCRIPTION).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": "        int credit \u003d Integer.parseInt(argMultimap.getValue(PREFIX_MODULE_CREDIT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": "        boolean[] sems \u003d getAvailableSems(argMultimap.getValue(PREFIX_MODULE_AVAILABLE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Module module \u003d new Module(code, department, title, description, credit,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "                sems[0], sems[1], sems[2], sems[3]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return new AddModuleToDatabaseCommand(module);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Converts the given {@code String} of available semester into its respective booleans."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private boolean[] getAvailableSems(String sem) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "deming16"
        },
        "content": "        boolean[] sems \u003d new boolean[4];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "deming16"
        },
        "content": "        for (int i \u003d 0; i \u003c sems.length; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "deming16"
        },
        "content": "            if (sem.charAt(i) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "deming16"
        },
        "content": "                sems[i] \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "deming16"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "deming16"
        },
        "content": "                sems[i] \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "deming16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return sems;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddOnCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.AddOnCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new AddOnCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddOnCommandParser implements Parser\u003cAddOnCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddOnCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * and returns an AddOnCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AddOnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String inputModuleCode \u003d args.toUpperCase().trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module module \u003d new Module(inputModuleCode, \"\", \"\", \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                0, true, true, true, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new AddOnCommand(module);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.AddAdminCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.commands.AddModuleToDatabaseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.AddOnCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.GenerateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case AddOnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new AddOnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etjk"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return new SaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case GenerateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new GenerateCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case RegisterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new RegisterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case AddAdminCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new AddAdminCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "deming16"
        },
        "content": "        case AddModuleToDatabaseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "deming16"
        },
        "content": "            return new AddModuleToDatabaseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 27,
      "-": 93,
      "deming16": 4,
      "etjk": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_EMPLOYMENT_DATE \u003d new Prefix(\"employ/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"user/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pass/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_PATH_TO_PIC \u003d new Prefix(\"pic/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"salary/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_ENROLLMENT_DATE \u003d new Prefix("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \"enroll/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_MAJOR \u003d new Prefix(\"maj/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_MINOR \u003d new Prefix(\"min/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"code/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final Prefix PREFIX_MODULE_DEPARTMENT \u003d new Prefix(\"department/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final Prefix PREFIX_MODULE_TITLE \u003d new Prefix(\"title/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final Prefix PREFIX_MODULE_DESCRIPTION \u003d new Prefix(\"description/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CREDIT \u003d new Prefix(\"credit/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final Prefix PREFIX_MODULE_AVAILABLE \u003d new Prefix(\"available/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final Prefix PREFIX_SAVE_PATH \u003d new Prefix(\"sp/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 9,
      "-": 14,
      "deming16": 6,
      "etjk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new LoginCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * LoginCommand and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public LoginCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_USERNAME,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential toVerify \u003d new Credential("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new LoginCommand(toVerify);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.security.MessageDigest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.EmployDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Salary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.EnrollmentDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Parses a {@code String salary} into an {@code Salary}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "deming16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * @throws ParseException if the given {@code salary} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static Salary parseSalary(String salary) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(salary);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String trimmedSalary \u003d salary.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (!Salary.isValidSalary(trimmedSalary)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new ParseException(Salary.MESSAGE_SALARY_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return new Salary(trimmedSalary);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Parses a {@code String employDate} into an {@code EmployDate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "deming16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * @throws ParseException if the given {@code employDate} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static EmployDate parseEmployDate(String employDate) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(employDate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String trimmedEmployedDate \u003d employDate.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (!EmployDate.isValidEmployDate(trimmedEmployedDate)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new ParseException(EmployDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return new EmployDate(trimmedEmployedDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Parses a {@code String username} into an {@code Username}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "deming16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * @throws ParseException if the given {@code username} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String trimmedUsername \u003d username.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (!Username.isValidUsername(trimmedUsername)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new ParseException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return new Username(trimmedUsername);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses a {@code String password} into an {@code Password}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the given {@code username} is invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static Password parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!Password.isValidPassword(trimmedPassword)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            //TODO replace with EncryptionUtil"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            MessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            md.update(trimmedPassword.getBytes(\"UTF-8\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new Password(Password.toHexString(md.digest()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException(String.format(Password.MESSAGE_PASSWORD_CONSTRAINTS));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Parses a {@code String path} into an {@code PathToProfilePic}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "deming16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * @throws ParseException if the given {@code path} is invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static PathToProfilePic parsePathToProfilePic(String path) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String trimmedPath \u003d path.trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "deming16"
        },
        "content": "        if (!PathToProfilePic.isValidPath(trimmedPath)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new ParseException(PathToProfilePic.MESSAGE_PATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return new PathToProfilePic(trimmedPath);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses a {@code String enrollmentDate} into a {@code EnrollmentDate}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the given {@code enrollmentDate} is invalid."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static EnrollmentDate parseEnrollmentDate(String enrollmentDate) throws ParseException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(enrollmentDate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String trimmedDate \u003d enrollmentDate.trim();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!EnrollmentDate.isValidEmployDate(trimmedDate)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException(EnrollmentDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new EnrollmentDate(trimmedDate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Parses a {@code String path} into a {@code Path}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static Path parsePath(String path) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return Paths.get(path.trim());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 42,
      "-": 123,
      "deming16": 64,
      "etjk": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ENROLLMENT_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MAJOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MINOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.EnrollmentDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new RegisterCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommandParser implements Parser\u003cRegisterCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * RegisterCommand and returns an RegisterCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public RegisterCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_USERNAME,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                PREFIX_PASSWORD, PREFIX_NAME, PREFIX_PATH_TO_PIC,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                PREFIX_STUDENT_ENROLLMENT_DATE, PREFIX_STUDENT_MAJOR, PREFIX_STUDENT_MINOR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            PREFIX_NAME, PREFIX_PATH_TO_PIC, PREFIX_STUDENT_ENROLLMENT_DATE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            PREFIX_STUDENT_MAJOR, PREFIX_STUDENT_MINOR)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        PathToProfilePic pathToPic \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parsePathToProfilePic(argMultimap.getValue(PREFIX_PATH_TO_PIC).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        EnrollmentDate enrollmentDate \u003d ParserUtil.parseEnrollmentDate("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            argMultimap.getValue(PREFIX_STUDENT_ENROLLMENT_DATE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        List\u003cString\u003e majors \u003d argMultimap.getAllValues(PREFIX_STUDENT_MAJOR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        List\u003cString\u003e minors \u003d argMultimap.getAllValues(PREFIX_STUDENT_MINOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User newUser \u003d new Student(username, name, Role.STUDENT, pathToPic,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            enrollmentDate, majors, minors);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO key to be replaced"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential credential \u003d new Credential("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            username,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            password,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            password.getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new RegisterCommand(credential, newUser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new RemoveCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * and returns an RemoveCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public RemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module module \u003d new Module(args.toUpperCase().trim(), \"\", \"\", \"\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                0, true, true, true, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new RemoveCommand(module);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SaveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SAVE_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Parses input arguments and creates a new SaveCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class SaveCommandParser implements Parser\u003cSaveCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SaveCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * and returns an SaveCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public SaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SAVE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SAVE_PATH)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Path savePath \u003d ParserUtil.parsePath(argMultimap.getValue(PREFIX_SAVE_PATH).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new SaveCommand(savePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * and returns an SearchCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module module \u003d new Module(trimmedArgs.toUpperCase(), \"\", \"\", \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                0, true, true, true, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new SearchCommand(module);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other wadys to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the ModuleList */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyModuleList getModuleList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds the given admin."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code admin} must not already exist in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void addAdmin(Admin admin);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Adds the given module to the database."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "deming16"
        },
        "content": "    void addModuleToDatabase(Module module);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Check if the user is a admin.."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    boolean isAdmin();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void removeModule(Module module);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds the given credential."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code credential} must not already exist in the credential store."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void addCredential(Credential credential);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if credential with the same username already exists in"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * the credential store."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    boolean hasCredential(Credential credential);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the CredentialStore"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    ReadOnlyCredentialStore getCredentialStore();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if credential is verified within the CredentialStore"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    boolean isVerifiedCredential(Credential credential);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the given user as the currentUser."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void setCurrentUser(User user);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the currentUser."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    User getCurrentUser();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Saves the current user."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "etjk"
        },
        "content": "    void saveUserFile(User user, Path savePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the optional of the module in the storage."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Optional\u003cModule\u003e searchModuleInModuleList(Module module);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the a list of modules whose codes begin with the keyword."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    List\u003cModule\u003e searchKeyWordInModuleList(Module keyword);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 93,
      "-": 78,
      "deming16": 6,
      "etjk": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.model.CredentialStoreChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.commons.events.model.ModuleListChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.events.model.SaveUserChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static User currentUser \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final ReadOnlyModuleList moduleList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final CredentialStore credentialStore;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredModule;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyModuleList moduleList, ReadOnlyAddressBook addressBook, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "                        ReadOnlyCredentialStore credentialStore) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(moduleList, addressBook, userPrefs, credentialStore);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with modulelist: \" + moduleList + \" address book: \" + addressBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credentialStore \u003d (CredentialStore) credentialStore;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.filteredModule \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this(new ModuleList(), new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ModuleList moduleList \u003d (ModuleList) getModuleList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return moduleList.getModuleInformation(module);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ModuleList moduleList \u003d (ModuleList) getModuleList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return moduleList.searchKeyword(keyword);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Student student \u003d (Student) getCurrentUser();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return student.hasModulesTaken(module);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void removeModule(Module module) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Student student \u003d (Student) getCurrentUser();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        student.removeModulesTaken(module);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Student student \u003d (Student) getCurrentUser();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        student.addModulesTaken(module);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Admin Account Management \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(admin);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO: Save Admin to user config"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Raise an event indicating that credential store has change"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private void indicateModuleListChanged() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "deming16"
        },
        "content": "        raise(new ModuleListChangedEvent(moduleList));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void addModuleToDatabase(Module module) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(module); ("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "deming16"
        },
        "content": "                (ModuleList) moduleList).addModule(module);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "deming16"
        },
        "content": "        indicateModuleListChanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isAdmin() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return currentUser.getRole() \u003d\u003d Role.ADMIN;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredModule);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        filteredModule.setPredicate(predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save current User to file \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveUserFile(User user, Path savePath) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "etjk"
        },
        "content": "        raise(new SaveUserChangedEvent(user, savePath));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Credential Store Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Raise an event indicating that credential store has change"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private void indicateCredentialStoreChanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        raise(new CredentialStoreChangedEvent(credentialStore));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore.addCredential(credential);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        indicateCredentialStoreChanged();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore.hasCredential(credential);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isVerifiedCredential(Credential toVerify) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore.isVerifiedCredential(toVerify);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Account Management Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        currentUser \u003d user;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public User getCurrentUser() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return currentUser;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "etjk"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "etjk"
        },
        "content": "                \u0026\u0026 credentialStore.equals(other.credentialStore);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 111,
      "-": 151,
      "deming16": 15,
      "etjk": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data relating to modules"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModuleList implements ReadOnlyModuleList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModuleList(ReadOnlyModuleList toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyModuleList newData) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a module to the module list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module must not already exist in the module list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the module list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * module list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code ModuleList}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cModule\u003e getModuleInformation(Module target) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return modules.search(target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e searchKeyword(Module keyword) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return modules.searchKeyword(keyword);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 modules.equals(((ModuleList) other).modules));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 9,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path moduleFilePath \u003d Paths.get(\"data\", \"moduleList.xml.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Path credentialStoreFilePath \u003d Paths.get(\"data\" , \"credentialstore.xml\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private Path userStorageFilePath \u003d Paths.get(\"data\", \"userdata.xml\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Path getCredentialStoreFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStoreFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setCredentialStoreFilePath(Path credentialStoreFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credentialStoreFilePath \u003d credentialStoreFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Path getUserStorageFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return userStorageFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getModuleFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModuleFilePath(Path moduleFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.moduleFilePath \u003d moduleFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(moduleFilePath, o.moduleFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal module list data file location : \" + moduleFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        sb.append(\"\\nLocal Credential Store File Location : \" + credentialStoreFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 10,
      "-": 80,
      "etjk": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/credential/Credential.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.credential;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a Credential in the credential store."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Guarantees: details are present and not null, no duplicates in credential"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * store."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class Credential {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // Identity Field"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // Data Field"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final String key; // TODO Awaiting Encryption function"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Credential(Username username, Password password, String key) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireAllNonNull(username, password, key);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Modified Constructor specifically used for Login Procedure"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Credential(Username username, Password password) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireAllNonNull(username, password);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d password.getValue();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isSameCredential(Credential otherCredential) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (otherCredential \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherCredential !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getPassword().equals(getPassword())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getKey().equals(getKey());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof Credential)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential otherCredential \u003d (Credential) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherCredential.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getPassword().equals(getPassword())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getKey().equals(getKey());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Objects.hash(username, password, key);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        builder.append(\"Username: \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(getUsername().getUsername())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(\" Password: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(getPassword().getValue())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(\" Key: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(getKey());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/credential/CredentialStore.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.credential;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Wraps all CredentialStore data"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class CredentialStore implements ReadOnlyCredentialStore {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final HashMap\u003cString, Credential\u003e credentialStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final HashMap\u003cString, String\u003e keyMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStore() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        keyMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStore(ReadOnlyCredentialStore toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Replaces the contents of the credential store with {@code toBeCopied}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void resetData(ReadOnlyCredentialStore toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(toBeCopied);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        setCredentials(toBeCopied.getCredentials());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setCredentials(List\u003cCredential\u003e credentials) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Credential c : credentials) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStore.put(c.getUsername().toString(), c);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            keyMap.put(c.getUsername().toString(), c.getKey());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if a credential with the same username as {@code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * credential} exists in the credential store."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(credential);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore.containsKey(credential.getUsername().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds a credential to the credential store."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * The person must not already exist in the credential store."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param toAdd"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addCredential(Credential toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore.put(toAdd.getUsername().toString(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        keyMap.put(toAdd.getUsername().toString(), toAdd.getKey());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Removes a credential from the credential store."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * The person must not already exist in the credential store."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void removeCredential(Credential toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore.remove(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if the {@code Username} \u0026 {@code Password} in credential"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * matches in the CredentialStore."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isVerifiedCredential(Credential toVerify) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(toVerify);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!hasCredential(toVerify)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore.get("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            toVerify.getUsername().toString()).getPassword().equals(toVerify.getPassword());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cCredential\u003e getCredentials() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        List\u003cCredential\u003e credentials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Map.Entry\u003cString, Credential\u003e entry : credentialStore.entrySet()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Credential account \u003d new Credential("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new Username(entry.getKey()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                entry.getValue().getPassword(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                keyMap.get(entry.getKey()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentials.add(account);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentials;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(obj instanceof CredentialStore)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore other \u003d (CredentialStore) obj;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore.equals(other.credentialStore)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 keyMap.equals(other.keyMap);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/credential/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.credential;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a User\u0027s Password."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d \"Password \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"should be of the format alphanumeric \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"1. Password should contain alphanumeric characters and include \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"these special characters\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final String PASSWORD_VALIDATION_REGEX \u003d \"^(?\u003d.*\\\\d)(?\u003d.*[a-z])\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"(?\u003d.*[A-Z])(?\u003d.*[a-zA-Z]).{8,}$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructs an {@code Password}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param password A valid password string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        value \u003d password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return test.matches(PASSWORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Converts byte[] into a hexadecimal string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param bytes"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @return hexadecimal string of hash"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static String toHexString(byte[] bytes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        StringBuilder hexString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (byte b : bytes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            String hex \u003d Integer.toHexString(0xFF \u0026 b);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (hex.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                hexString.append(\"0\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            hexString.append(hex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return hexString.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the hash value of the password"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @return hash"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both passwords have the same hash value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof Password)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Password otherPassword \u003d (Password) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherPassword.getValue().equals(getValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Objects.hash(value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return getValue();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/credential/ReadOnlyCredentialStore.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.credential;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Unmodifiable view of a credential store"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public interface ReadOnlyCredentialStore {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns an list of credentials."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This list will not contain any duplicate credentials."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    List\u003cCredential\u003e getCredentials();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/credential/Username.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.credential;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": " * Represents a User\u0027s username."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": " *  * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "            \"Usernames should only contain alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * @param username A valid username."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Returns true if a given string is a valid username."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return test.matches(USERNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 username.equals(((Username) other).username)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return username.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 7,
      "deming16": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Class to encapsulate all data fields relating to a Module."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    // Information fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int credit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isAvailableInSem1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isAvailableInSem2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isAvailableInSpecialTerm1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isAvailableInSpecialTerm2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Module(String code, String department, String title, String description, int credit,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  boolean isAvailableInSem1, boolean isAvailableInSem2, boolean isAvailableInSpecialTerm1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  boolean isAvailableInSpecialTerm2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(code, department, title, description, credit, isAvailableInSem1,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                isAvailableInSem2, isAvailableInSpecialTerm1, isAvailableInSpecialTerm2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.credit \u003d credit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAvailableInSem1 \u003d isAvailableInSem1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAvailableInSem2 \u003d isAvailableInSem2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAvailableInSpecialTerm1 \u003d isAvailableInSpecialTerm1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAvailableInSpecialTerm2 \u003d isAvailableInSpecialTerm2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "     * Constructor for only having code information"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public Module(String code) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        requireAllNonNull(code);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.department \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.title \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.description \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.credit \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.isAvailableInSem1 \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.isAvailableInSem2 \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.isAvailableInSpecialTerm1 \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        this.isAvailableInSpecialTerm2 \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getCredit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return credit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAvailableInSem1() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAvailableInSem1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAvailableInSem2() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAvailableInSem2;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAvailableInSpecialTerm1() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAvailableInSpecialTerm1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAvailableInSpecialTerm2() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAvailableInSpecialTerm2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both modules of the same code."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getCode().equals(getCode());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if this module\u0027s code is the prefix of the other module\u0027s code."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isPrefixModule(Module otherModule) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherModule.getCode().startsWith(getCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherModule.getCode().equals(getCode())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getDepartment().equals(getDepartment())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getCredit() \u003d\u003d getCredit()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.isAvailableInSem1 \u003d\u003d isAvailableInSem1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.isAvailableInSem2 \u003d\u003d isAvailableInSem2"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.isAvailableInSpecialTerm1 \u003d\u003d isAvailableInSpecialTerm1"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.isAvailableInSpecialTerm2 \u003d\u003d isAvailableInSpecialTerm2;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(code, department, title, description, credit, isAvailableInSem1,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                isAvailableInSem2, isAvailableInSpecialTerm1, isAvailableInSpecialTerm2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getCode())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Department: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDepartment())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Title: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Credit: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getCredit())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Is Available in Sem 1: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(isAvailableInSem1)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Is Available in Sem 2: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(isAvailableInSem1)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Is Available in Special Term 1: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(isAvailableInSpecialTerm1)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Is Available in Special Term 2: \")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(isAvailableInSpecialTerm2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 11,
      "hzf1174": 16,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * updating of modules uses Module#isSameModule(Module) for equality so as to ensure that the person being"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueModuleList. However, the removal of a person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * uses Module#equals(Object) so as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * @see Module#isPrefixModule(Module)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the Optional of the Module."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cModule\u003e search(Module toSearch) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(toSearch);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Module module : internalList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (module.getCode().equals(toSearch.getCode())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                return Optional.of(module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the List of Modules start with the keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e searchKeyword(Module keyword) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Object[] objectsArray \u003d internalList.stream().filter(keyword::isPrefixModule).toArray();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module[] modulesArray \u003d Arrays.copyOf(objectsArray, objectsArray.length, Module[].class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Arrays.asList(modulesArray);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 26,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "deming16": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Admin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Contains all the data of a Admin user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class Admin extends User {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private Salary salary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private EmployDate employmentDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructor method for Admin class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param salary The salary the admin receives monthly."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param employmentDate The date the Admin was employed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public Admin(Username username, Name name, Role role,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "                 PathToProfilePic pathToProfilePic,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "                 Salary salary, EmployDate employmentDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        super(username, name, role, pathToProfilePic);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.employmentDate \u003d employmentDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public Salary getSalary() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return salary;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public EmployDate getEmploymentDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return employmentDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updatePassword (String newPassword) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateName (String newName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateProfilePic (String newPath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both admins of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This defines a weaker notion of equality between two admins."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isSameAdmin(Admin otherAdmin) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (otherAdmin \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherAdmin !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherAdmin.getName().equals(getName())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "deming16"
        },
        "content": "                \u0026\u0026 otherAdmin.getEmploymentDate().equals(getEmploymentDate())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "deming16"
        },
        "content": "                \u0026\u0026 otherAdmin.getPathToProfilePic().equals(getPathToProfilePic())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "deming16"
        },
        "content": "                \u0026\u0026 otherAdmin.getSalary() \u003d\u003d getSalary();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both admins have the same identity and data fields."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This defines a stronger notion of equality between two admins."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof Admin)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin otherPerson \u003d (Admin) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherPerson.getSalary() \u003d\u003d getSalary()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherPerson.getEmploymentDate().equals(getEmploymentDate())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherPerson.getPathToProfilePic().equals(getPathToProfilePic())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherPerson.getRole().equals(getRole());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Objects.hash(name, role, pathToProfilePic, salary, employmentDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(name)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(\" Salary: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(getSalary())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(\" employmentDate: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(getEmploymentDate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 99,
      "deming16": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/EmployDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": " * Represents a Admin\u0027s employment date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class EmployDate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "            \"Employment date should be in this format: DD/MM/YYYY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{2}/\\\\d{2}/\\\\d{4}$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public final String employDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public EmployDate(String employDate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(employDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "        checkArgument(isValidEmployDate(employDate), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "        this.employDate \u003d employDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static boolean isValidEmployDate(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return employDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "                || (other instanceof EmployDate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "                \u0026\u0026 employDate.equals(((EmployDate) other).employDate)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return employDate.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a Users\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "deming16": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/PathToProfilePic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": " * Represents a User\u0027s path to profile picture."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPath(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class PathToProfilePic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String MESSAGE_PATH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "            \"Path names should end with a .img\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String PATH_VALIDATION_REGEX \u003d \"^(\\\\w)+(\\\\.img)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public final String path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Constructs a {@code pathToProfilePic}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * @param path A valid path name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public PathToProfilePic(String path) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "        checkArgument(isValidPath(path), MESSAGE_PATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * Returns true if a given string is a valid path name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static boolean isValidPath(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return test.matches(PATH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": "                || (other instanceof PathToProfilePic // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": "                \u0026\u0026 path.equals(((PathToProfilePic) other).path)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return path.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "deming16": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Role.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * The various roles of a User account."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public enum Role {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    ADMIN, STUDENT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Salary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": " * The salary of the employed administrator."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class Salary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String MESSAGE_SALARY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "            \"Salary should only contain numeric characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String SALARY_VALIDATION_REGEX \u003d \"\\\\p{Digit}++\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public final String salary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public Salary(String salary) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "        requireNonNull(salary);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "        checkArgument(isValidSalary(salary), MESSAGE_SALARY_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static boolean isValidSalary(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return test.matches(SALARY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return salary;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "                || (other instanceof Salary // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "                \u0026\u0026 salary.equals(((Salary) other).salary)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return salary.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * General details of a User account."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public abstract class User {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "    protected Username username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected Role role;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "    protected PathToProfilePic pathToProfilePic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructor method of User"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param name             The name of the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param role             The role of the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param pathToProfilePic The path to the image to be used as profile picture."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public User(Username username, Name name, Role role,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "                PathToProfilePic pathToProfilePic) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.pathToProfilePic \u003d pathToProfilePic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public abstract void updateName(String newName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public abstract void updateProfilePic(String newPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //public abstract void deleteUser(User userToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public PathToProfilePic getPathToProfilePic() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return pathToProfilePic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public abstract void updatePassword (String newPassword);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 43,
      "deming16": 10,
      "etjk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/student/EnrollmentDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a Student\u0027s enrollment date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class EnrollmentDate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \"Enrollment date should be in this format: DD/MM/YYYY\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{2}/\\\\d{2}/\\\\d{4}$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public final String enrollmentDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public EnrollmentDate(String enrollmentDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(enrollmentDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        checkArgument(isValidEmployDate(enrollmentDate),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.enrollmentDate \u003d enrollmentDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static boolean isValidEmployDate(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return enrollmentDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            || (other instanceof EnrollmentDate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 enrollmentDate.equals(((EnrollmentDate) other).enrollmentDate)); //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return enrollmentDate.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/student/Student.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a Student User."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class Student extends User {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected EnrollmentDate enrollmentDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected List\u003cString\u003e major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected List\u003cString\u003e minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected List\u003cModule\u003e modulesTaken;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructor method of User"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param username         The username of the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param name             The name of the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param role             The role of the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param pathToProfilePic The path to the image to be used as profile picture."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Student(Username username, Name name, Role role,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                   PathToProfilePic pathToProfilePic, EnrollmentDate enrollmentDate,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                   List\u003cString\u003e major, List\u003cString\u003e minor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        super(username, name, role, pathToProfilePic);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.enrollmentDate \u003d enrollmentDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.modulesTaken \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Constructor method of User"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param username         The username of the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param name             The name of the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param role             The role of the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param pathToProfilePic The path to the image to be used as profile picture."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param modulesTaken     The list of modules taken."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Student(Username username, Name name, Role role,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "                   PathToProfilePic pathToProfilePic, EnrollmentDate enrollmentDate,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": "                   List\u003cString\u003e major, List\u003cString\u003e minor, List\u003cModule\u003e modulesTaken) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "        super(username, name, role, pathToProfilePic);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.enrollmentDate \u003d enrollmentDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.modulesTaken \u003d modulesTaken;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateEnrollmentDate(EnrollmentDate enrollmentDate) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.enrollmentDate \u003d enrollmentDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateMajors(List\u003cString\u003e newMajors) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.major \u003d newMajors;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateMinors(List\u003cString\u003e newMinors) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.minor \u003d newMinors;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both student\u0027s profile contains the module and false otherwise."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean hasModulesTaken(Module module) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Module existModule: modulesTaken) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (existModule.equals(module)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void removeModulesTaken(Module module) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        modulesTaken.remove(module);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addModulesTaken(Module module) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        modulesTaken.add(module);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e getModulesTaken() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return modulesTaken;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public EnrollmentDate getEnrollmentDate() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return enrollmentDate;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cString\u003e getMinor() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updatePassword(String newPassword) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateName(String newName) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateProfilePic(String newPath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherStudent.getUsername().equals(getUsername());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Objects.hash(username);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        builder.append(\"Student Username: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(getUsername().getUsername());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 132,
      "etjk": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Module[]{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            new Module(\"ACC1002\", \"Accounting\", \"Financial Accounting\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \"The course provides an introduction to financial accounting. It examines \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"accounting from an external user\u0027s perspective: an external user being an \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"investor or a creditor. Such users would need to understand financial \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"accounting in order to make investing or lending decisions. However, to \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"attain a good understanding, it is also necessary to be familiar with how \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"the information is derived. Therefore, students would learn how to prepare \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"the reports or statements resulting from financial accounting and how to use \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"them for decision-making.\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                4, true, true, false, false),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            new Module(\"CS1010\", \"Computer Science\", \"Programming Methodology\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \"This module introduces the fundamental concepts of problem solving by \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"computing and programming using an imperative programming language. It is the \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"first and foremost introductory course to computing. It is also the first part\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" of a three-part series on introductory programming and problem solving by \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"computing, which also includes CS1020 and CS2010. Topics covered include \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"problem solving by computing, writing pseudo-codes, basic problem formulation \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"and problem solving, program development, coding, testing and debugging, \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"fundamental programming constructs (variables, types, expressions, \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"assignments, functions, control structures, etc.), fundamental data \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"structures: arrays, strings and structures, simple file processing, and basic \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"recursion. This module is appropriate for SoC students.\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                4, true, true, false, false)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyModuleList getSampleModuleList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ModuleList sampleModuleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleModuleList.addModule(sampleModule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleModuleList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CredentialStoreStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a storage for {@link CredentialStore}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public interface CredentialStoreStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Path getCredentialStoreFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns CredentialStore data as a {@link CredentialStore}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore() throws DataConversionException,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @see #getCredentialStoreFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Saves the given {@link CredentialStore} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param credentialStore cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void saveCredentialStore(ReadOnlyCredentialStore credentialStore) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @see #saveCredentialStore(ReadOnlyCredentialStore)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void saveCredentialStore(ReadOnlyCredentialStore credentialStore,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                             Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModuleStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Module}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public interface ModuleStorage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.model.CredentialStoreChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.ModuleListChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.events.model.SaveUserChangedEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public interface Storage extends ModuleListStorage, AddressBookStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "    UserPrefsStorage, CredentialStoreStorage, UserStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyModuleList\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Module List to the hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleModuleListChangedEvent(ModuleListChangedEvent abce);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Credential Store to the hard disks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file it it is missing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void handleCredentialStoreChangedEvent(CredentialStoreChangedEvent csce);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Export the current user to the hard disk."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etjk"
        },
        "content": "    void handleSaveUserChangedEvent(SaveUserChangedEvent suce);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 3,
      "-": 58,
      "etjk": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.model.CredentialStoreChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.model.ModuleListChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.events.model.SaveUserChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModuleListStorage moduleListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CredentialStoreStorage credentialStoreStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private UserStorage userStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(ModuleListStorage moduleListStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                          AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                          CredentialStoreStorage credentialStoreStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "                          UserStorage userStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.moduleListStorage \u003d moduleListStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credentialStoreStorage \u003d credentialStoreStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.userStorage \u003d userStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getModuleFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleListStorage.getModuleFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyModuleList\u003e readModuleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return readModuleList(moduleListStorage.getModuleFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyModuleList\u003e readModuleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleListStorage.readModuleList(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveModuleList(ReadOnlyModuleList moduleList) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        saveModuleList(moduleList, moduleListStorage.getModuleFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveModuleList(ReadOnlyModuleList moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        moduleListStorage.saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleModuleListChangedEvent(ModuleListChangedEvent event) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"ModuleList data changed, saving to file\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            saveModuleList(event.data);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CredentialStore methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Path getCredentialStoreFilePath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStoreStorage.getCredentialStoreFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStoreStorage.readCredentialStore();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore(Path filePath)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStoreStorage.readCredentialStore();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore(ReadOnlyCredentialStore credentialStore) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStoreStorage.saveCredentialStore(credentialStore,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStoreStorage.getCredentialStoreFilePath());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore(ReadOnlyCredentialStore credentialStore,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                    Path filePath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStoreStorage.saveCredentialStore(credentialStore, filePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void handleCredentialStoreChangedEvent(CredentialStoreChangedEvent event) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Credential \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Store changed. Saving to file\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            saveCredentialStore(event.data);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save User methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Path getUserSavedFilePath() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return userStorage.getUserSavedFilePath();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Optional\u003cUser\u003e readUser() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return userStorage.readUser();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Optional\u003cUser\u003e readUser(Path filePath)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "etjk"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return userStorage.readUser();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveUser(User user) throws IOException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "etjk"
        },
        "content": "        userStorage.saveUser(user, userStorage.getUserSavedFilePath());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveUser(User user, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "etjk"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "etjk"
        },
        "content": "        userStorage.saveUser(user, filePath);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void handleSaveUserChangedEvent(SaveUserChangedEvent cuce) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "etjk"
        },
        "content": "        logger.fine(\"Attempting to write \" + cuce.user.getName() + \" to data file: \" + cuce.filePath);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "etjk"
        },
        "content": "            userStorage.saveUser(cuce.user, cuce.filePath);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "etjk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 51,
      "-": 135,
      "etjk": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Represents a storage for {@link seedu.address.model.user}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "public interface UserStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "    Path getUserSavedFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Returns User data as a {@link User}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "    Optional\u003cUser\u003e readUser() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @see #getUserSavedFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    Optional\u003cUser\u003e readUser(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Saves the given {@link User} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param user cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "    void saveUser(User user) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @see #saveUser(User)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "    void saveUser(User user, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCredential.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * JAXB-friendly version of the Credential."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlAdaptedCredential {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Credential\u0027s \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"%s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructs an XmlAdaptedCredential."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlAdaptedCredential() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructs an {@code XmlAdaptedCredential} with the given details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlAdaptedCredential(String username, String password, String key) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCredential"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlAdaptedCredential(Credential source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d source.getUsername().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        password \u003d source.getPassword().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        key \u003d source.getKey();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Credential toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (username \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Username\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!Username.isValidUsername(username)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Password\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (key \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Key\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new Credential("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Username(username),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Password(password),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            key);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof XmlAdaptedCredential)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlAdaptedCredential otherCredential \u003d (XmlAdaptedCredential) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Objects.equals(username, otherCredential.username)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 Objects.equals(password, otherCredential.password)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 Objects.equals(key, otherCredential.key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.EmployDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.Salary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.student.EnrollmentDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": " * An User that is serializable to XML format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class XmlAdaptedUser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User\u0027s \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "            + \"%s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // Must have for all users"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String pathToProfilePic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // Attributes for Admin"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String salary;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String employmentDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // Attributes for Student"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String enrollmentDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private String minor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private List\u003cXmlAdaptedModule\u003e modulesTaken \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Creates an empty XmlAdaptedUser."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlAdaptedUser() {}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Constructs an {@code XmlAdaptedUser} with the given user details."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlAdaptedUser(Username username, Name name, Role role, PathToProfilePic pathToProfilePic,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etjk"
        },
        "content": "                          Salary salary, EmployDate employmentDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.username \u003d username.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.name \u003d name.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.role \u003d role.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.pathToProfilePic \u003d pathToProfilePic.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.salary \u003d salary.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.employmentDate \u003d employmentDate.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Constructs an {@code XmlAdaptedUser} with the given user details."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlAdaptedUser(Username username, Name name, Role role, PathToProfilePic pathToProfilePic,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etjk"
        },
        "content": "                          EnrollmentDate enrollmentDate, List\u003cString\u003e major, List\u003cString\u003e minor,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etjk"
        },
        "content": "                          List\u003cModule\u003e modulesTaken) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.username \u003d username.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.name \u003d name.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.role \u003d role.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.pathToProfilePic \u003d pathToProfilePic.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.enrollmentDate \u003d enrollmentDate.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.major \u003d major.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.minor \u003d minor.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.modulesTaken.addAll(modulesTaken.stream().map(XmlAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Converts a given User into this class for JAXB use."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param user future changes to this will not affect the created XmlAdaptedUser"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlAdaptedUser(User user) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.username \u003d user.getUsername().toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.name \u003d user.getName().toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.role \u003d user.getRole().toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.pathToProfilePic \u003d user.getPathToProfilePic().toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (user.getRole() \u003d\u003d Role.ADMIN) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "etjk"
        },
        "content": "            Admin admin \u003d (Admin) user;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "etjk"
        },
        "content": "            this.salary \u003d admin.getSalary().toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "etjk"
        },
        "content": "            this.employmentDate \u003d admin.getEmploymentDate().toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (user.getRole() \u003d\u003d Role.STUDENT) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "etjk"
        },
        "content": "            Student student \u003d (Student) user;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "etjk"
        },
        "content": "            this.enrollmentDate \u003d student.getEnrollmentDate().toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "etjk"
        },
        "content": "            this.major \u003d student.getMajor().toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "etjk"
        },
        "content": "            this.minor \u003d student.getMinor().toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "etjk"
        },
        "content": "            this.modulesTaken.addAll(student.getModulesTaken().stream().map(XmlAdaptedModule::new)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "etjk"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Converts this User into the model\u0027s {@code User} object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public User toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "etjk"
        },
        "content": "        User user \u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "etjk"
        },
        "content": "        checkMandatoryFields();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (\"ADMIN\".equals(role)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "etjk"
        },
        "content": "            checkAdminFields();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "etjk"
        },
        "content": "            user \u003d new Admin(new Username(username), new Name(name), Role.ADMIN,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "etjk"
        },
        "content": "                    new PathToProfilePic(pathToProfilePic), new Salary(salary),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "etjk"
        },
        "content": "                    new EmployDate(employmentDate));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (\"STUDENT\".equals(role)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "etjk"
        },
        "content": "            checkStudentFields();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "etjk"
        },
        "content": "            List\u003cString\u003e majorConverted \u003d Arrays.asList(major.substring(1, major.length() - 1).split(\", \"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "etjk"
        },
        "content": "            List\u003cString\u003e minorConverted \u003d Arrays.asList(minor.substring(1, minor.length() - 1).split(\", \"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "etjk"
        },
        "content": "            List\u003cModule\u003e modulesConverted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "etjk"
        },
        "content": "            modulesConverted.addAll(modulesTaken.stream().map(XmlAdaptedModule::toModelType)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "etjk"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "etjk"
        },
        "content": "            user \u003d new Student(new Username(username), new Name(name), Role.STUDENT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "etjk"
        },
        "content": "                    new PathToProfilePic(pathToProfilePic), new EnrollmentDate(enrollmentDate),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "etjk"
        },
        "content": "                    majorConverted, minorConverted, modulesConverted);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Checks mandatory fields of user"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private void checkMandatoryFields() throws IllegalValueException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Username"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (username \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Username\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!Username.isValidUsername(username)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Name"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Role"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"role\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Path to profilepic"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (pathToProfilePic \u003d\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"pathToProfilePic\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!PathToProfilePic.isValidPath(pathToProfilePic)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(PathToProfilePic.MESSAGE_PATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Checks mandatory fields of admin"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private void checkAdminFields() throws IllegalValueException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Salary"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (salary \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"salary\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!Salary.isValidSalary(salary)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(Salary.MESSAGE_SALARY_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // employment date"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (employmentDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"employment\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!EmployDate.isValidEmployDate(employmentDate)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(EmployDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Checks mandatory fields of student"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private void checkStudentFields() throws IllegalValueException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (enrollmentDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"enrollment\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!EnrollmentDate.isValidEmployDate(enrollmentDate)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(EnrollmentDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (major \u003d\u003d null) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"major\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (minor \u003d\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"minor\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (modulesTaken \u003d\u003d null) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"modules taken\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 236
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException, FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlCredentialStoreStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A class to access CredentialStore data stored as an xml file on the hard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlCredentialStoreStorage implements CredentialStoreStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlCredentialStoreStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlCredentialStoreStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Path getCredentialStoreFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore() throws DataConversionException,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return readCredentialStore(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Similar to {@link #readCredentialStore()}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore(Path filePath)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            logger.info(\"CredentialStore file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlSerializableCredentialStore xmlCredentialStore \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            XmlFileStorage.loadCredentialStoreDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return Optional.of(xmlCredentialStore.toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore(ReadOnlyCredentialStore credentialStore) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        saveCredentialStore(credentialStore, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore(ReadOnlyCredentialStore credentialStore,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                    Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(credentialStore);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new XmlSerializableCredentialStore(credentialStore));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Stores data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given modulelist data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableModuleList moduleList)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, moduleList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Saves the given credential store data to the specified file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableCredentialStore credentialStore)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            XmlUtil.saveDataToFile(file, credentialStore);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Saves the given user data to the specified file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableUser user)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": "            XmlUtil.saveDataToFile(file, user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns module list in the file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableModuleList loadModuleListFromSaveFile(Path file) throws"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etjk"
        },
        "content": "            DataConversionException, FileNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableModuleList.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns CredentialStore in the file or an empty CredentialStore"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static XmlSerializableCredentialStore loadCredentialStoreDataFromSaveFile(Path file)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etjk"
        },
        "content": "        throws DataConversionException, FileNotFoundException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableCredentialStore.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Returns User in the file or an empty User"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static XmlSerializableUser loadUserDataFromSaveFile(Path file)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throws DataConversionException, FileNotFoundException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableUser.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 17,
      "-": 74,
      "etjk": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlModuleStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A class to access Modules data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlModuleStorage implements ModuleStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlModuleStorage(Path filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableCredentialStore.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * An Immutable CredentialStore that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "@XmlRootElement(name \u003d \"credentialstore\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlSerializableCredentialStore {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CREDENTIAL \u003d \"Credential Store \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"contains duplicate user(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private List\u003cXmlAdaptedCredential\u003e credentials;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Creates an empty XmlSerializableCredentialStore."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlSerializableCredentialStore() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlSerializableCredentialStore(ReadOnlyCredentialStore src) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentials.addAll(src.getCredentials()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .map(XmlAdaptedCredential::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Converts this XmlCredentialStore into the model\u0027s {@code CredentialStore}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *                               {@code XmlAdaptedUserCredentials}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStore toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore credentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (XmlAdaptedCredential a : credentials) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Credential credential \u003d a.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (credentialStore.hasCredential(credential)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CREDENTIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStore.addCredential(credential);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof XmlSerializableCredentialStore)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentials.equals(((XmlSerializableCredentialStore) other).credentials);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": " * An Immutable User that is serializable to XML format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "@XmlRootElement(name \u003d \"user\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class XmlSerializableUser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private XmlAdaptedUser user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Creates an empty XmlSerializableUser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlSerializableUser() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlSerializableUser(User user) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.user \u003d new XmlAdaptedUser(user);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Converts this XmlSerializableUser into the model\u0027s {@code User}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *                               {@code XmlAdaptedUser}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public User toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return this.user.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlUserStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": " * A class to access User data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class XmlUserStorage implements UserStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlUserStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlUserStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Path getUserSavedFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Optional\u003cUser\u003e readUser() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return readUser(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Similar to {@link #readUser()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Optional\u003cUser\u003e readUser(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throws DataConversionException, FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.info(\"User saved file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "        XmlSerializableUser xmlUser \u003d XmlFileStorage.loadUserDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return Optional.of(xmlUser.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveUser(User user) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "        saveUser(user, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Similar to {@link #saveUser(User)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveUser(User user, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etjk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etjk"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableUser(user));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 80
    }
  },
  {
    "path": "src/test/data/XmlCredentialStoreStorageTest/NotXmlFormatCredentialStore.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "not xml format!"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1
    }
  },
  {
    "path": "src/test/data/XmlCredentialStoreStorageTest/invalidAndValidCredentialCredentialStore.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003ccredentialstore\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003ccredential\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cusername\u003eUSERNAME1\u003c/username\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cpassword\u003e8501b3c044ffb3a2d57714bd79bcdbed831eb39d72cb0fe6c3c0a79a16a1208b\u003c/password\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003ckey\u003e8501b3c044ffb3a2d57714bd79bcdbed831eb39d72cb0fe6c3c0a79a16a1208b\u003c/key\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003c/credential\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003ccredentials\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cusername\u003eUSERNAME!@#$\u003c/username\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cpassword\u003e6012438cf7a432ede847d79de6c0dfe204703007f6c24a73813704fa23f2e7ec\u003c/password\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003ckey\u003e6012438cf7a432ede847d79de6c0dfe204703007f6c24a73813704fa23f2e7ec\u003c/key\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003c/credentials\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c/credentialstore\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 12
    }
  },
  {
    "path": "src/test/data/XmlCredentialStoreStorageTest/invalidCredentialCredentialStore.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003ccredentialstore\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003ccredentials\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cusername\u003eUSERNAME!@#!@#\u003c/username\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cpassword\u003e6012438cf7a432ede847d79de6c0dfe204703007f6c24a73813704fa23f2e7ec\u003c/password\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003ckey\u003e6012438cf7a432ede847d79de6c0dfe204703007f6c24a73813704fa23f2e7ec\u003c/key\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003c/credentials\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c/credentialstore\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableCredentialStoreTest/duplicateCredentialStore.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003ccredentialstore\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003ccredentials\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cusername\u003eUSERNAME1\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cpassword\u003e8501b3c044ffb3a2d57714bd79bcdbed831eb39d72cb0fe6c3c0a79a16a1208b\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003ckey\u003e8501b3c044ffb3a2d57714bd79bcdbed831eb39d72cb0fe6c3c0a79a16a1208b\u003c/key\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003c/credentials\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003ccredentials\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cusername\u003eUSERNAME1\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cpassword\u003e8501b3c044ffb3a2d57714bd79bcdbed831eb39d72cb0fe6c3c0a79a16a1208b\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003ckey\u003e8501b3c044ffb3a2d57714bd79bcdbed831eb39d72cb0fe6c3c0a79a16a1208b\u003c/key\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003c/credentials\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c/credentialstore\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 13
    }
  },
  {
    "path": "src/test/data/XmlSerializableCredentialStoreTest/invalidCredentialStore.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003ccredentialstore\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003ccredentials\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cusername\u003eUSER!@#$NAME\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cpassword\u003e6012438cf7a432ede847d79de6c0dfe204703007f6c24a73813704fa23f2e7ec\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003ckey\u003e6012438cf7a432ede847d79de6c0dfe204703007f6c24a73813704fa23f2e7ec\u003c/key\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003c/credentials\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c/credentialstore\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 8
    }
  },
  {
    "path": "src/test/data/XmlSerializableCredentialStoreTest/typicalCredentialStore.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003ccredentialstore\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003ccredentials\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cusername\u003emax33\u003c/username\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cpassword\u003e5ddd2cc3ae3a14b4d717e9a0eaa8b44f6d9d10d0d5edd8183d569622e29ce680\u003c/password\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003ckey\u003e5ddd2cc3ae3a14b4d717e9a0eaa8b44f6d9d10d0d5edd8183d569622e29ce680\u003c/key\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003c/credentials\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003ccredentials\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cusername\u003evettel5\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003cpassword\u003e6284cd40cd25dc42e03dca6bd45c2cfe5463d82920ac231f29034f4424a3349c\u003c/password\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u003ckey\u003e6284cd40cd25dc42e03dca6bd45c2cfe5463d82920ac231f29034f4424a3349c\u003c/key\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    \u003c/credentials\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c/credentialstore\u003e"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_MODULELIST_TESTING \u003d TestUtil.getFilePathInSandboxFolder"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            (\"sampleModuleListData.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveModuleListFileLocation \u003d SAVE_LOCATION_FOR_MODULELIST_TESTING;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setModuleFilePath(saveModuleListFileLocation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model copy \u003d new ModelManager("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getModuleList(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getAddressBook(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "etjk"
        },
        "content": "            model.getCredentialStore());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 4,
      "-": 123,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : modsUni\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DataSecurityUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.security.InvalidKeyException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.crypto.NoSuchPaddingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.xml.bind.DatatypeConverter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "import com.google.common.base.Charsets;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.InvalidPasswordException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class DataSecurityUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String PASSWORD \u003d \"p@ssW0Rd\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String WRONG_PASSWORD \u003d \"1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final byte[] TEST_DATA_ENCRYPTION \u003d \"TEST DATA\".getBytes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String EXPECTED_ENCRYPTION \u003d \"D91B9E39621EACE5877DCD6158393F0F\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final byte[] TEST_DATA_DECRYPTION \u003d convertStringToByteArray(\"D91B9E39621EACE5877DCD6158393F0F\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String EXPECTED_DECRYPTION \u003d \"TEST DATA\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String TEST_FILE_PATH \u003d \"src/test/data/sandbox/\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String TEST_FILE_PREFIX \u003d \"test_encryption_file\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final String TEST_FILE_EXTENSION \u003d \".xml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final Integer BYTES_TO_REMOVE \u003d 5;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // Encryption test case"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testEncryptingBytes() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "        byte[] encryptedData \u003d DataSecurityUtil.encrypt(TEST_DATA_ENCRYPTION, PASSWORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "        String encryptedDataString \u003d convertByteArrayToHexString(encryptedData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertEquals(EXPECTED_ENCRYPTION, encryptedDataString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testEncryptingNullBytesValidPassword() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encrypt(null, PASSWORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testEncryptingValidBytesAndNullPassword() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encrypt(TEST_DATA_ENCRYPTION, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testEncryptingNullBytesAndNullPassword() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encrypt(null, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // Decryption test case"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testDecryptingBytes() throws CorruptedFileException, InvalidPasswordException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etjk"
        },
        "content": "        byte[] decryptedData \u003d DataSecurityUtil.decrypt(TEST_DATA_DECRYPTION, PASSWORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etjk"
        },
        "content": "        String decryptedDataString \u003d new String(decryptedData, Charsets.UTF_8);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertEquals(EXPECTED_DECRYPTION, decryptedDataString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testDecryptingNullBytesValidPassword() throws CorruptedFileException,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etjk"
        },
        "content": "            InvalidPasswordException, NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.decrypt(null, PASSWORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testDecryptingValidBytesAndNullPassword() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encrypt(TEST_DATA_DECRYPTION, null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testDecryptingNullBytesAndNullPassword() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encrypt(null, null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d InvalidPasswordException.class)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testDecryptingBytesWrongPassword() throws CorruptedFileException, InvalidPasswordException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.decrypt(TEST_DATA_DECRYPTION, WRONG_PASSWORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // File encryption test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileEncrypting() throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Create and write TEST_DATA_ENCRYPTION to file"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "etjk"
        },
        "content": "        File file \u003d File.createTempFile(TEST_FILE_PREFIX, TEST_FILE_EXTENSION, new File(TEST_FILE_PATH));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Files.write(file.toPath(), TEST_DATA_ENCRYPTION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Encrypt file"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encryptFile(file, PASSWORD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Get content from file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "etjk"
        },
        "content": "        byte[] fileContent \u003d Files.readAllBytes(file.toPath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertNotEquals(Arrays.toString(TEST_DATA_ENCRYPTION), Arrays.toString(fileContent));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "etjk"
        },
        "content": "        file.deleteOnExit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileEncryptingNullFileValidPassword() throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encryptFile(null, PASSWORD);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileEncryptingValidFileNullPassword() throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "etjk"
        },
        "content": "        File file \u003d File.createTempFile(TEST_FILE_PREFIX, TEST_FILE_EXTENSION, new File(TEST_FILE_PATH));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Files.write(file.toPath(), TEST_DATA_ENCRYPTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "etjk"
        },
        "content": "            DataSecurityUtil.encryptFile(file, null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "etjk"
        },
        "content": "            file.deleteOnExit();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileEncryptingNullFileNullPassword() throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encryptFile(null, null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // File decryption test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileDecrypting() throws IOException, CorruptedFileException, InvalidPasswordException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Create and write TEST_DATA_ENCRYPTION to file"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "etjk"
        },
        "content": "        File file \u003d File.createTempFile(TEST_FILE_PREFIX, TEST_FILE_EXTENSION, new File(TEST_FILE_PATH));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Files.write(file.toPath(), TEST_DATA_ENCRYPTION);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Encrypt file"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.encryptFile(file, PASSWORD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Decrypt file"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.decryptFile(file, PASSWORD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Get content from file"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "etjk"
        },
        "content": "        byte[] fileContent \u003d Files.readAllBytes(file.toPath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertEquals(Arrays.toString(TEST_DATA_ENCRYPTION), Arrays.toString(fileContent));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "etjk"
        },
        "content": "        file.deleteOnExit();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileDecryptingNullFileValidPassword() throws IOException,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "etjk"
        },
        "content": "            CorruptedFileException, InvalidPasswordException, NoSuchPaddingException,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.decryptFile(null, PASSWORD);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileDecryptingValidFileNullPassword() throws IOException,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "etjk"
        },
        "content": "            CorruptedFileException, InvalidPasswordException, NoSuchPaddingException,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "etjk"
        },
        "content": "        File file \u003d File.createTempFile(TEST_FILE_PREFIX, TEST_FILE_EXTENSION, new File(TEST_FILE_PATH));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Files.write(file.toPath(), TEST_DATA_ENCRYPTION);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "etjk"
        },
        "content": "            DataSecurityUtil.decryptFile(file, null);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "etjk"
        },
        "content": "            file.deleteOnExit();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileDecryptingNullFileNullPassword() throws IOException,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "etjk"
        },
        "content": "            CorruptedFileException, InvalidPasswordException, NoSuchPaddingException,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "etjk"
        },
        "content": "        DataSecurityUtil.decryptFile(null, null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d InvalidPasswordException.class)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileDecryptingWrongPassword() throws IOException,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "etjk"
        },
        "content": "            CorruptedFileException, InvalidPasswordException, NoSuchPaddingException,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Create and write TEST_DATA_ENCRYPTION to file"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "etjk"
        },
        "content": "        File file \u003d File.createTempFile(TEST_FILE_PREFIX, TEST_FILE_EXTENSION, new File(TEST_FILE_PATH));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Files.write(file.toPath(), TEST_DATA_ENCRYPTION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Encrypt file"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "etjk"
        },
        "content": "            DataSecurityUtil.encryptFile(file, PASSWORD);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Decrypt file"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "etjk"
        },
        "content": "            DataSecurityUtil.decryptFile(file, WRONG_PASSWORD);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Clean up"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "etjk"
        },
        "content": "            file.deleteOnExit();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test(expected \u003d CorruptedFileException.class)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void testFileDecryptingCorruptedFile() throws IOException,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "etjk"
        },
        "content": "            CorruptedFileException, InvalidPasswordException, NoSuchPaddingException,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "etjk"
        },
        "content": "            NoSuchAlgorithmException, InvalidKeyException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // Create and write TEST_DATA_ENCRYPTION to file"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "etjk"
        },
        "content": "        File file \u003d File.createTempFile(TEST_FILE_PREFIX, TEST_FILE_EXTENSION, new File(TEST_FILE_PATH));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Files.write(file.toPath(), TEST_DATA_ENCRYPTION);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Encrypt file"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "etjk"
        },
        "content": "            DataSecurityUtil.encryptFile(file, PASSWORD);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Corrupt data"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "etjk"
        },
        "content": "            byte[] cleanFileContent \u003d Files.readAllBytes(file.toPath());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "etjk"
        },
        "content": "            byte[] corruptedFileContent \u003d Arrays.copyOfRange(cleanFileContent, 0,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "etjk"
        },
        "content": "                    cleanFileContent.length - BYTES_TO_REMOVE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Write corrupted data to file"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "etjk"
        },
        "content": "            Files.write(file.toPath(), corruptedFileContent);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Decrypt file"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "etjk"
        },
        "content": "            DataSecurityUtil.decryptFile(file, PASSWORD);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Clean up"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "etjk"
        },
        "content": "            file.deleteOnExit();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static String convertByteArrayToHexString(byte[] data) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return DatatypeConverter.printHexBinary(data);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static byte[] convertStringToByteArray(String s) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return DatatypeConverter.parseHexBinary(s);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 249
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 124,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAdminCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.AdminBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddAdminCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_newAdmin_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin validAdmin \u003d new AdminBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential validCredential \u003d new Credential("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Username(\"u\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Password(\"#Qwerty123\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \"k\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getModuleList(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getAddressBook(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel.addAdmin(validAdmin);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel.addCredential(validCredential);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(new AdminBuilder().build());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new AddAdminCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                validAdmin,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new Credential("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                    new Username(\"u\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                    new Password(\"#Qwerty123\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                    \"k\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            String.format(AddAdminCommand.MESSAGE_SUCCESS, validAdmin), expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 62,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAdminCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.AdminBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddAdminCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullCredential_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "        new AddAdminCommand(new AdminBuilder().build(), null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullAdmin_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new AddAdminCommand(null,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new Credential("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                    new Username(\"username\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                    new Password(\"#Qwerty123\"), \"key\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_bothNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new AddAdminCommand(null, null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void notAdmin_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddAdminCommand addAdminCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": "            new AddAdminCommand(new AdminBuilder().build(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Credential("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new Username(\"u\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new Password(\"#Qwerty123\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \"k\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expectMessage(AddAdminCommand.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "deming16"
        },
        "content": "        User fakeAdmin \u003d new AdminBuilder().withRole(Role.STUDENT).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(fakeAdmin);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        addAdminCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin alice \u003d new AdminBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin bob \u003d new AdminBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential credential \u003d new Credential("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Username(\"u\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Password(\"#Qwerty123\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \"k\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddAdminCommand addAliceCommand \u003d new AddAdminCommand(alice, credential);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddAdminCommand addBobCommand \u003d new AddAdminCommand(bob, credential);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddAdminCommand addAliceCommandCopy \u003d new AddAdminCommand(alice, credential);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 94,
      "deming16": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModuleList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getAddressBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 8,
      "-": 48,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addModuleToDatabase(Module module) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isVerifiedCredential(Credential credential) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public void saveUserFile(User user, Path savePath) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 76,
      "-": 209,
      "deming16": 5,
      "etjk": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleToDatabaseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.testutil.AdminBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class AddModuleToDatabaseCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": "        new AddModuleToDatabaseCommand(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void notAdmin_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "deming16"
        },
        "content": "        AddModuleToDatabaseCommand addModuleToDatabaseCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": "                new AddModuleToDatabaseCommand(new ModuleBuilder().build());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "deming16"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "deming16"
        },
        "content": "        thrown.expectMessage(AddAdminCommand.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "deming16"
        },
        "content": "        User fakeAdmin \u003d new AdminBuilder().withRole(Role.STUDENT).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "deming16"
        },
        "content": "        model.setCurrentUser(fakeAdmin);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "deming16"
        },
        "content": "        addModuleToDatabaseCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "deming16"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "deming16"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleToDatabaseCommand(validModule).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertEquals(String.format(AddModuleToDatabaseCommand.MESSAGE_SUCCESS), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "deming16"
        },
        "content": "        AddModuleToDatabaseCommand addModuleToDatabaseCommand \u003d new AddModuleToDatabaseCommand(validModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "deming16"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "deming16"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "deming16"
        },
        "content": "        thrown.expectMessage(AddModuleToDatabaseCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "deming16"
        },
        "content": "        addModuleToDatabaseCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Module module1 \u003d new ModuleBuilder().withCode(\"CS1000\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Module module2 \u003d new ModuleBuilder().withCode(\"CS2000\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "deming16"
        },
        "content": "        AddModuleToDatabaseCommand addModule1Command \u003d new AddModuleToDatabaseCommand(module1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "deming16"
        },
        "content": "        AddModuleToDatabaseCommand addModule2Command \u003d new AddModuleToDatabaseCommand(module2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertTrue(addModule1Command.equals(addModule1Command));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "deming16"
        },
        "content": "        AddModuleToDatabaseCommand addModule1CommandCopy \u003d new AddModuleToDatabaseCommand(module1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertTrue(addModule1Command.equals(addModule1CommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(addModule1Command.equals(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(addModule1Command.equals(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(addModule1Command.equals(addModule2Command));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addModuleToDatabase(Module module) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean isVerifiedCredential(Credential credential) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public void saveUserFile(User user, Path savePath) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "deming16"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "deming16"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "deming16"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "deming16"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "deming16"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "deming16"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "deming16"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "deming16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "deming16"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "deming16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "deming16"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "deming16"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "deming16"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addModuleToDatabase(Module module) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "deming16"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "deming16"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "deming16"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "deming16"
        },
        "content": "            return new ModuleList();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "deming16"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 319,
      "etjk": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddOnCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddOnCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new AddOnCommand(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddOnCommandTest.ModelStubAcceptingModuleAdded modelStub \u003d new AddOnCommandTest.ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module validModuleBeforeSearch \u003d new Module(\"ACC1002X\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        AddOnCommand addOncommand \u003d new AddOnCommand(validModuleBeforeSearch);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        CommandResult commandResult \u003d addOncommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module validModuleAfterSearch \u003d addOncommand.getSearchedModule();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertNotEquals(validModuleBeforeSearch, validModuleAfterSearch);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertEquals(String.format(AddOnCommand.MESSAGE_SUCCESS, validModuleAfterSearch), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertEquals(Arrays.asList(validModuleAfterSearch), modelStub.student.getModulesTaken());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module validModule \u003d new Module(\"ACC1002X\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddOnCommand addOnCommand \u003d new AddOnCommand(validModule);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddOnCommandTest.ModelStub modelStub \u003d new AddOnCommandTest.ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expectMessage(AddOnCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        addOnCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public void execute_nonexistentModule_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module nonexistentModule \u003d new Module(\"CS1010\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        AddOnCommand addOnCommand \u003d new AddOnCommand(nonexistentModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        AddOnCommandTest.ModelStub modelStub \u003d new AddOnCommandTest.ModelStubWithModule(nonexistentModule);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        thrown.expectMessage(AddOnCommand.MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        addOnCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module cs1010 \u003d new ModuleBuilder().withCode(\"CS1010\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module acc1002x \u003d new ModuleBuilder().withCode(\"ACC1002X\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        AddOnCommand addCs1010Command \u003d new AddOnCommand(cs1010);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        AddOnCommand addAcc1002XCommand \u003d new AddOnCommand(acc1002x);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(addCs1010Command.equals(addCs1010Command));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        AddOnCommand addCs1010CommandCopy \u003d new AddOnCommand(cs1010);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(addCs1010Command.equals(addCs1010CommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(addCs1010Command.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(addCs1010Command.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(addCs1010Command.equals(addAcc1002XCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addModuleToDatabase(Module module) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isVerifiedCredential(Credential credential) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public void saveUserFile(User user, Path savePath) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStubWithModule extends AddOnCommandTest.ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        private final ModuleList moduleList \u003d TypicalModules.getTypicalModuleList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return moduleList.getModuleInformation(module);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends AddOnCommandTest.ModelStub {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final ModuleList moduleList \u003d TypicalModules.getTypicalModuleList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return student.hasModulesTaken(module);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            student.addModulesTaken(module);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return moduleList.getModuleInformation(module);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 261,
      "hzf1174": 49,
      "deming16": 5,
      "etjk": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ClearCommand(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ClearCommand(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 21,
      "-": 34,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_AVAILABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CREDIT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_DEPARTMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_DESCRIPTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_TITLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ENROLLMENT_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MAJOR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MINOR;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String VALID_USERNAME \u003d \"validusername\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String VALID_PASSWORD \u003d \"#Qwerty123\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String LOGIN_USERNAME_DESC \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_USERNAME + VALID_USERNAME;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String LOGIN_PASSWORD_DESC \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_PASSWORD + VALID_PASSWORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String INVALID_USERNAME_DESC \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_USERNAME + \"!3123asd\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String INVALID_PASSWORD_DESC \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_PASSWORD + \"qwerty123\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String VALID_PATH_TO_PIC \u003d \"validPath.img\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String VALID_ENROLLMENT \u003d \"08/08/2017\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String VALID_MAJOR \u003d \"CS\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String VALID_MINOR \u003d \"MA\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String REGISTER_PATH_TO_PIC_DESC \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_PATH_TO_PIC + VALID_PATH_TO_PIC;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String REGISTER_ENROLLMENT_DESC \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_STUDENT_ENROLLMENT_DATE + VALID_ENROLLMENT;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String REGISTER_MAJOR_DESC \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_STUDENT_MAJOR + VALID_MAJOR;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String REGISTER_MINOR_DESC \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_STUDENT_MINOR + VALID_MINOR;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String INVALID_PIC_DESC \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_PATH_TO_PIC + \"invalidPath\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String INVALID_ENROLLMENT_DESC \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \" \" + PREFIX_STUDENT_ENROLLMENT_DATE + \"11/11/11\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_SALARY_AMY \u003d \"5000\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_EMPLOY_DATE_AMY \u003d \"09/09/2018\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_PATH_AMY \u003d \"amy.img\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_USERNAME_AMY \u003d \"amyusername\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_PASSWORD_AMY \u003d VALID_PASSWORD;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String SALARY_DESC_AMY \u003d \" \" + PREFIX_SALARY + VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String EMPLOY_DATE_DESC_AMY \u003d \" \" + PREFIX_EMPLOYMENT_DATE + VALID_EMPLOY_DATE_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String PATH_DESC_AMY \u003d \" \" + PREFIX_PATH_TO_PIC + VALID_PATH_AMY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String USERNAME_DESC_AMY \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String PASSWORD_DESC_AMY \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String INVALID_EMPLOY_DATE_DESC \u003d \" \" + PREFIX_EMPLOYMENT_DATE + \"123455\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String INVALID_PATH_DESC \u003d \" \" + PREFIX_PATH_TO_PIC + \"invalid.invalid\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String INVALID_SALARY_DESC \u003d \" \" + PREFIX_SALARY + \"oneHundered\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_CODE_CS2109 \u003d \"CS2109\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_CREDIT_CS2109 \u003d \"4\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2109 \u003d \"description cs2109\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_DEPARTMENT_CS2109 \u003d \"department\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_TITLE_CS2109 \u003d \"the cs2109 module\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String VALID_AVAILABLE_CS2109 \u003d \"1111\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String CODE_DESC_CS2109 \u003d \" \" + PREFIX_MODULE_CODE + VALID_CODE_CS2109;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String CREDIT_DESC_CS2109 \u003d \" \" + PREFIX_MODULE_CREDIT + VALID_CREDIT_CS2109;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2109 \u003d \" \" + PREFIX_MODULE_DESCRIPTION + VALID_DESCRIPTION_CS2109;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String DEPARTMENT_DESC_CS2109 \u003d \" \" + PREFIX_MODULE_DEPARTMENT + VALID_DEPARTMENT_CS2109;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String TITLE_DESC_CS2109 \u003d \" \" + PREFIX_MODULE_TITLE + VALID_TITLE_CS2109;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String AVAILABLE_DESC_CS2109 \u003d \" \" + PREFIX_MODULE_AVAILABLE + VALID_AVAILABLE_CS2109;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CODE_CS1010 \u003d \"CS1010\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CODE_ACC1002 \u003d \"ACC1002\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CODE_ACC1002X \u003d \"ACC1002X\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 34,
      "-": 145,
      "deming16": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModuleList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "        getTypicalAddressBook(), new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 2,
      "-": 177,
      "etjk": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalModuleList(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalAddressBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new UserPrefs(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "        new CredentialStore());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 5,
      "-": 246,
      "etjk": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalModuleList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalAddressBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new UserPrefs(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "        new CredentialStore());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(), new"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "            UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 5,
      "-": 85,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GenerateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for GenerateCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class GenerateCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getModuleList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new CredentialStore());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new GenerateCommand(), model, commandHistory, GenerateCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 9,
      "-": 32,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "                                new CredentialStore());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "                                        new CredentialStore());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 42,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.getTypicalCredentialStore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.EnrollmentDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.CredentialBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * RegisterCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class LoginCommandIntegrationTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ModuleList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new AddressBook(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "            getTypicalCredentialStore());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(new StudentBuilder().build());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_loginSuccess() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential toVerify \u003d CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ModuleList(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new AddressBook(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etjk"
        },
        "content": "            getTypicalCredentialStore());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User loginUser \u003d new Student("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            toVerify.getUsername(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Name(\"dummy\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Role.STUDENT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new PathToProfilePic(\"dummy.img\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new EnrollmentDate(\"08/08/2018\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Arrays.asList(\"CS\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Arrays.asList(\"MA\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel.setCurrentUser(loginUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess(new LoginCommand(toVerify), model,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            String.format(LoginCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                toVerify.getUsername().toString()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_loginFailure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential toVerify \u003d new CredentialBuilder(CREDENTIAL_STUDENT_SEB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withPassword(\"incorrectPassword\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandFailure(new LoginCommand(toVerify),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LoginCommand.MESSAGE_LOGIN_FAILURE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 85,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructorNullCredentialThrowsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new LoginCommand(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential maxCredential \u003d CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential sebCredential \u003d CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        LoginCommand loginMaxCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new LoginCommand(maxCredential);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        LoginCommand loginSebCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new LoginCommand(sebCredential);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(loginMaxCommand.equals(loginMaxCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        LoginCommand loginMaxCommandCopy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new LoginCommand(maxCredential);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(loginMaxCommand.equals(loginMaxCommandCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(loginMaxCommand.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(loginMaxCommand.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(loginMaxCommand.equals(loginSebCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 50,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.getTypicalCredentialStore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * RegisterCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommandIntegrationTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ModuleList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new AddressBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "            getTypicalCredentialStore());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(new StudentBuilder().build());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void executeNewCredentialSuccess() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential validCredential \u003d new Credential("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Username(\"u\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Password(\"#Qwerty123\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \"k\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User dummyUser \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ModuleList(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new AddressBook(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "            getTypicalCredentialStore());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel.addCredential(validCredential);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess(new RegisterCommand(validCredential, dummyUser), model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            String.format(RegisterCommand.MESSAGE_SUCCESS, validCredential), expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void executeDuplicateCredentialThrowsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandFailure(new RegisterCommand(CREDENTIAL_STUDENT_MAX, model.getCurrentUser()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            RegisterCommand.MESSAGE_DUPLICATE_USERNAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 69,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalUsers.STUDENT_MAX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalUsers.STUDENT_SEB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.CredentialBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructorNullCredentialThrowsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new RegisterCommand(null, STUDENT_MAX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructorNullUserThrowsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new RegisterCommand(new CredentialBuilder().build(), null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential maxCredential \u003d CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential sebCredential \u003d CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User maxUser \u003d STUDENT_MAX;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User sebUser \u003d STUDENT_SEB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RegisterCommand registerMaxCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new RegisterCommand(maxCredential, maxUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RegisterCommand registerSebCommand \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new RegisterCommand(sebCredential, sebUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(registerMaxCommand.equals(registerMaxCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RegisterCommand registerMaxCommandCopy \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new RegisterCommand(maxCredential, maxUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(registerMaxCommand.equals(registerMaxCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(registerMaxCommand.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(registerMaxCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(registerMaxCommand.equals(registerSebCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ACC1002;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RemoveCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new RemoveCommand(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleAcceptedByModel_removeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module validModuleBeforeSearch \u003d new Module(\"ACC1002\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(validModuleBeforeSearch);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        RemoveCommandTest.ModelStubForTest modelStub \u003d new RemoveCommandTest.ModelStubForTest(ACC1002);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        CommandResult commandResult \u003d removeCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module validModuleAfterSearch \u003d removeCommand.getSearchedModule();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertNotEquals(validModuleBeforeSearch, validModuleAfterSearch);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertEquals(String.format(RemoveCommand.MESSAGE_REMOVE_MODULE_SUCCESS, validModuleAfterSearch),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(modelStub.student.hasModulesTaken(validModuleAfterSearch));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleNotFound_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module validModule \u003d ACC1002;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(validModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RemoveCommandTest.ModelStub modelStub \u003d new RemoveCommandTest.ModelStubForTest();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expectMessage(RemoveCommand.MESSAGE_MODULE_NOT_EXISTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        removeCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public void execute_nonexistentModule_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module nonexistentModule \u003d CS1010;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(nonexistentModule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        RemoveCommandTest.ModelStub modelStub \u003d new RemoveCommandTest.ModelStubForTest(nonexistentModule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        thrown.expectMessage(RemoveCommand.MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        removeCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module cs1010 \u003d new ModuleBuilder().withCode(\"CS1010\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module acc1002x \u003d new ModuleBuilder().withCode(\"ACC1002X\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        RemoveCommand removeCs1010Command \u003d new RemoveCommand(cs1010);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        RemoveCommand removeAcc1002XCommand \u003d new RemoveCommand(acc1002x);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(removeCs1010Command.equals(removeCs1010Command));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        RemoveCommand removeCs1010CommandCopy \u003d new RemoveCommand(cs1010);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(removeCs1010Command.equals(removeCs1010CommandCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(removeCs1010Command.equals(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(removeCs1010Command.equals(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(removeCs1010Command.equals(removeAcc1002XCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addModuleToDatabase(Module module) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isVerifiedCredential(Credential credential) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public void saveUserFile(User user, Path savePath) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A Model stub that always accept the person being removed."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStubForTest extends RemoveCommandTest.ModelStub {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final ModuleList moduleList \u003d TypicalModules.getTypicalModuleList();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ModelStubForTest(Module module) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            student.addModulesTaken(module);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ModelStubForTest() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return student.hasModulesTaken(module);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            student.removeModulesTaken(module);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return moduleList.getModuleInformation(module);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 247,
      "hzf1174": 48,
      "deming16": 5,
      "etjk": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new SearchCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleSearched_successful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module validModule \u003d new Module(\"ACC\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        SearchCommandTest.ModelStubForTest modelStub \u003d new SearchCommandTest.ModelStubForTest();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CommandResult commandResult \u003d new SearchCommand(validModule).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_MODULE_LISTED_OVERVIEW, 2), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleNotFound() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module validModule \u003d new Module(\"GEH\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        SearchCommandTest.ModelStubForTest modelStub \u003d new SearchCommandTest.ModelStubForTest();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CommandResult commandResult \u003d new SearchCommand(validModule).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_MODULE_LISTED_OVERVIEW, 0), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module cs1010 \u003d new ModuleBuilder().withCode(\"CS1010\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module acc1002x \u003d new ModuleBuilder().withCode(\"ACC1002X\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        SearchCommand searchCs1010Command \u003d new SearchCommand(cs1010);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        SearchCommand searchAcc1002XCommand \u003d new SearchCommand(acc1002x);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(searchCs1010Command.equals(searchCs1010Command));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        SearchCommand searchCs1010CommandCopy \u003d new SearchCommand(cs1010);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(searchCs1010Command.equals(searchCs1010CommandCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(searchCs1010Command.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(searchCs1010Command.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(searchCs1010Command.equals(searchAcc1002XCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "deming16"
        },
        "content": "        public void addModuleToDatabase(Module module) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "deming16"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "deming16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "deming16"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isVerifiedCredential(Credential credential) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public void saveUserFile(User user, Path savePath) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A Model stub that always accept the person being removed."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStubForTest extends SearchCommandTest.ModelStub {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final ModuleList moduleList \u003d TypicalModules.getTypicalModuleList();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return moduleList.searchKeyword(keyword);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 221,
      "hzf1174": 28,
      "deming16": 5,
      "etjk": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 119,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "            new UserPrefs(), new CredentialStore());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 46,
      "etjk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddAdminCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMPLOY_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMPLOY_DATE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PATH_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PATH_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMPLOY_DATE_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.testutil.TypicalAdmins.AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.commands.AddAdminCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.EmployDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Salary;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.testutil.AdminBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class AddAdminCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private AddAdminCommandParser parser \u003d new AddAdminCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Admin expectedAdmin \u003d new AdminBuilder(AMY).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAdminCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, VALID_USERNAME_AMY + PASSWORD_DESC_AMY + NAME_DESC_AMY + PATH_DESC_AMY"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing password prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + VALID_PASSWORD_AMY + NAME_DESC_AMY + PATH_DESC_AMY"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + PASSWORD_DESC_AMY + VALID_NAME_AMY + PATH_DESC_AMY"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing path prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + PASSWORD_DESC_AMY + NAME_DESC_AMY + VALID_PATH_AMY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing salary prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + PASSWORD_DESC_AMY + NAME_DESC_AMY + PATH_DESC_AMY"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + VALID_SALARY_AMY + EMPLOY_DATE_DESC_AMY, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing employ date prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + PASSWORD_DESC_AMY + NAME_DESC_AMY + PATH_DESC_AMY"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + SALARY_DESC_AMY + VALID_EMPLOY_DATE_AMY, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, INVALID_USERNAME_DESC + PASSWORD_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + NAME_DESC_AMY + PATH_DESC_AMY + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "deming16"
        },
        "content": "                Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + PASSWORD_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "deming16"
        },
        "content": "                        + INVALID_NAME_DESC + PATH_DESC_AMY + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "deming16"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + PASSWORD_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "deming16"
        },
        "content": "                        + NAME_DESC_AMY + INVALID_PATH_DESC + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "deming16"
        },
        "content": "                PathToProfilePic.MESSAGE_PATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // invalid salary"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + PASSWORD_DESC_AMY"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "deming16"
        },
        "content": "                        + NAME_DESC_AMY + PATH_DESC_AMY + INVALID_SALARY_DESC + EMPLOY_DATE_DESC_AMY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "deming16"
        },
        "content": "                Salary.MESSAGE_SALARY_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // invalid employ date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_AMY + PASSWORD_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "deming16"
        },
        "content": "                        + NAME_DESC_AMY + PATH_DESC_AMY + SALARY_DESC_AMY + INVALID_EMPLOY_DATE_DESC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "deming16"
        },
        "content": "                EmployDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, INVALID_USERNAME_DESC + PASSWORD_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "deming16"
        },
        "content": "                        + INVALID_NAME_DESC + PATH_DESC_AMY + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "deming16"
        },
        "content": "                Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + USERNAME_DESC_AMY + PASSWORD_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "deming16"
        },
        "content": "                        + NAME_DESC_AMY + PATH_DESC_AMY + SALARY_DESC_AMY + EMPLOY_DATE_DESC_AMY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "deming16"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddModuleToDatabaseCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AVAILABLE_DESC_CS2109;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CS2109;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CREDIT_DESC_CS2109;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_CS2109;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CS2109;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_CS2109;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AVAILABLE_CS2109;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CS2109;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CREDIT_CS2109;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_CS2109;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2109;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_CS2109;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.logic.commands.AddModuleToDatabaseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class AddModuleToDatabaseCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private AddModuleToDatabaseCommandParser parser \u003d new AddModuleToDatabaseCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "                AddModuleToDatabaseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing code prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, VALID_CODE_CS2109 + CREDIT_DESC_CS2109 + TITLE_DESC_CS2109"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + DESCRIPTION_DESC_CS2109 + DEPARTMENT_DESC_CS2109 + AVAILABLE_DESC_CS2109, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing credit prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS2109 + VALID_CREDIT_CS2109 + TITLE_DESC_CS2109"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + DESCRIPTION_DESC_CS2109 + DEPARTMENT_DESC_CS2109 + AVAILABLE_DESC_CS2109, expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS2109 + CREDIT_DESC_CS2109 + VALID_TITLE_CS2109"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + DESCRIPTION_DESC_CS2109 + DEPARTMENT_DESC_CS2109 + AVAILABLE_DESC_CS2109, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS2109 + CREDIT_DESC_CS2109 + TITLE_DESC_CS2109"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + VALID_DESCRIPTION_CS2109 + DEPARTMENT_DESC_CS2109 + AVAILABLE_DESC_CS2109, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing department prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS2109 + CREDIT_DESC_CS2109 + TITLE_DESC_CS2109"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + DESCRIPTION_DESC_CS2109 + VALID_DEPARTMENT_CS2109 + AVAILABLE_DESC_CS2109, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // missing available prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertParseFailure(parser, CODE_DESC_CS2109 + CREDIT_DESC_CS2109 + TITLE_DESC_CS2109"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "deming16"
        },
        "content": "                + DESCRIPTION_DESC_CS2109 + DEPARTMENT_DESC_CS2109 + VALID_AVAILABLE_CS2109, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 210
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOGIN_PASSWORD_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOGIN_USERNAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class LoginCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private LoginCommandParser parser \u003d new LoginCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String userInput \u003d LOGIN_USERNAME_DESC + LOGIN_PASSWORD_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential toVerify \u003d new Credential("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parseUsername(VALID_USERNAME),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parsePassword(VALID_PASSWORD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        LoginCommand expectedCommand \u003d new LoginCommand(toVerify);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LoginCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_USERNAME + LOGIN_PASSWORD_DESC,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing password prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC + VALID_PASSWORD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_USERNAME + VALID_PASSWORD,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            INVALID_USERNAME_DESC + LOGIN_PASSWORD_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // invalid password"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC + INVALID_PASSWORD_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.EmployDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Salary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final String INVALID_SALARY \u003d \"OneHundred\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final String INVALID_EMPLOY_DATE \u003d \"123456\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final String INVALID_USERNAME \u003d \"with space\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final String INVALID_PATH \u003d \"invalid.invalid\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final String VALID_SALARY \u003d \"3000\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final String VALID_EMPLOY_DATE \u003d \"01/01/2018\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final String VALID_USERNAME \u003d \"username\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private static final String VALID_PATH \u003d \"valid.img\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseSalary_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSalary(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseSalary_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSalary(INVALID_SALARY));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseSalary_validValue_returnsSalary() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Salary expectedSalary \u003d new Salary(VALID_SALARY);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertEquals(expectedSalary, ParserUtil.parseSalary(VALID_SALARY));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseEmployDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmployDate(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseEmployDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmployDate(INVALID_EMPLOY_DATE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseEmployDate_validValue_returnsEmployDate() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "deming16"
        },
        "content": "        EmployDate expectedEmployDate \u003d new EmployDate(VALID_EMPLOY_DATE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertEquals(expectedEmployDate, ParserUtil.parseEmployDate(VALID_EMPLOY_DATE));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseUsername_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsername(null));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseUsername_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseUsername(INVALID_USERNAME));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parseUsername_validValue_returnsUsername() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Username expectedUsername \u003d new Username(VALID_USERNAME);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertEquals(expectedUsername, ParserUtil.parseUsername(VALID_USERNAME));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parsePathToProfilePic_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSalary(null));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parsePathToProfilePic_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePathToProfilePic(INVALID_PATH));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void parsePathToProfilePic_validValue_returnsPathToProfilePic() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "deming16"
        },
        "content": "        PathToProfilePic expectedPath \u003d new PathToProfilePic(VALID_PATH);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertEquals(expectedPath, ParserUtil.parsePathToProfilePic(VALID_PATH));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 4,
      "-": 203,
      "deming16": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RegisterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENROLLMENT_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PIC_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOGIN_PASSWORD_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOGIN_USERNAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REGISTER_ENROLLMENT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REGISTER_MAJOR_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REGISTER_MINOR_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REGISTER_PATH_TO_PIC_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENROLLMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MINOR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_TO_PIC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.EnrollmentDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private RegisterCommandParser parser \u003d new RegisterCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String userInput \u003d LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + NAME_DESC_AMY"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + REGISTER_MINOR_DESC;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential toVerify \u003d new Credential("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parseUsername(VALID_USERNAME),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parsePassword(VALID_PASSWORD));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User newUser \u003d new Student("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parseUsername(VALID_USERNAME),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parseName(VALID_NAME_AMY),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Role.STUDENT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parsePathToProfilePic(VALID_PATH_TO_PIC),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ParserUtil.parseEnrollmentDate(VALID_ENROLLMENT),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Arrays.asList(VALID_MAJOR),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Arrays.asList(VALID_MINOR));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RegisterCommand expectedCommand \u003d new RegisterCommand(toVerify, newUser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            RegisterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_USERNAME"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing password prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_PASSWORD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_NAME_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing pic prefix"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_PATH_TO_PIC"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing enrollment date prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_ENROLLMENT"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing major prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_MAJOR"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // missing minor prefix"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_MINOR,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_USERNAME"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_PASSWORD"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_NAME_AMY"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_PATH_TO_PIC"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_ENROLLMENT"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_MAJOR"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + VALID_MINOR,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedMessage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            INVALID_USERNAME_DESC"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // invalid password"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + INVALID_PASSWORD_DESC"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // invalid pic"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + INVALID_PIC_DESC"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            PathToProfilePic.MESSAGE_PATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // invalid enrollment date"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            LOGIN_USERNAME_DESC"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + LOGIN_PASSWORD_DESC"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + NAME_DESC_AMY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_PATH_TO_PIC_DESC"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + INVALID_ENROLLMENT_DESC"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MAJOR_DESC"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                + REGISTER_MINOR_DESC,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            EnrollmentDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO invalid major \u0026 minor"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 227
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Test scope: similar to {@code RemoveCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * @see RemoveCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.CredentialStoreBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.ModuleListBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModuleList moduleList \u003d new ModuleListBuilder().withModule(CS1010).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore credentialStore \u003d new CredentialStoreBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withCredentials(CREDENTIAL_STUDENT_MAX)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withCredentials(CREDENTIAL_STUDENT_SEB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore differentCredentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        modelManager \u003d new ModelManager(moduleList, addressBook, userPrefs,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "            credentialStore);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(moduleList,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": "            addressBook, userPrefs, credentialStore);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(moduleList, differentAddressBook, userPrefs,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etjk"
        },
        "content": "                                                        differentCredentialStore)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // ModelManager test \u003d new ModelManager(moduleList, addressBook, userPrefs,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // credentialStore, configStore);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // assertFalse(modelManager.equals(new ModelManager(moduleList, addressBook, userPrefs,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //                                                  credentialStore, configStore)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(moduleList,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "etjk"
        },
        "content": "            addressBook, differentUserPrefs, credentialStore)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 17,
      "-": 79,
      "etjk": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_ACC1002;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ACC1002;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CS1010.isSameModule(CS1010));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CS1010.isSameModule(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Module editedCs1010 \u003d new ModuleBuilder(CS1010).withCode(VALID_CODE_ACC1002).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CS1010.isSameModule(editedCs1010));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public void isPrefixModule() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module cs1010Prefix \u003d new Module(\"CS\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(CS1010.isPrefixModule((CS1010)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(CS1010.isPrefixModule((null)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // this is the prefix of other module -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(cs1010Prefix.isPrefixModule(CS1010));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // other module is the prefix of this -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(CS1010.isPrefixModule(cs1010Prefix));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        // is not the prefix -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(cs1010Prefix.isPrefixModule(ACC1002));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Module cs1010Copy \u003d new ModuleBuilder(CS1010).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CS1010.equals(cs1010Copy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CS1010.equals(CS1010));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e retturns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CS1010.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CS1010.equals(ACC1002));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Module editedCs1010 \u003d new ModuleBuilder(CS1010).withCode(VALID_CODE_ACC1002).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CS1010.equals(editedCs1010));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hzf1174": 32,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ACC1002;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ACC1002X;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullModule_thrownsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS1010));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS1010));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModule(null, CS1010);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModule(CS1010, CS1010);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModule_editedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModule(CS1010, CS1010);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModule_editedModuleHasNonUniqueCode_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(ACC1002);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModule(CS1010, ACC1002);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.remove(null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.remove(CS1010);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.remove(CS1010);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModules((UniqueModuleList) null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueModuleList.add(ACC1002);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModules((List\u003cModule\u003e) null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.add(CS1010);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(ACC1002);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueModuleList.add(ACC1002);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(CS1010, CS1010);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.setModules(listWithDuplicateModules);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueModuleList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public void search() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        UniqueModuleList list \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module toSearch \u003d new Module(\"CS1010\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module toSearchNotExist \u003d new Module(\"CS2103T\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        list.add(CS1010);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Optional\u003cModule\u003e optional \u003d list.search(toSearch);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(optional.isPresent());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertEquals(optional.get(), CS1010);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Optional\u003cModule\u003e optionalNotExist \u003d list.search(toSearchNotExist);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertFalse(optionalNotExist.isPresent());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    public void searchKeyword() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        UniqueModuleList list \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module keyword \u003d new Module(\"ACC\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        Module keywordNotExist \u003d new Module(\"GEH\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        list.add(ACC1002);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        list.add(CS1010);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        list.add(ACC1002X);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        List\u003cModule\u003e modules \u003d list.searchKeyword(keyword);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertEquals(modules.size(), 2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertTrue(modules.contains(ACC1002));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        List\u003cModule\u003e emptyModules \u003d list.searchKeyword(keywordNotExist);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "        assertEquals(emptyModules.size(), 0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hzf1174": 47,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "deming16": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/AdminTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMPLOY_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.testutil.TypicalAdmins.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.testutil.TypicalAdmins.BRAD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.testutil.AdminBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class AdminTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void isSameAdmin() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertTrue(ALICE.isSameAdmin(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.isSameAdmin(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different salary and employ date -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Admin editedAlice \u003d new AdminBuilder(ALICE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "                .withSalary(VALID_SALARY_AMY)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "                .withEmployedDate(VALID_EMPLOY_DATE_AMY)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.isSameAdmin(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "        editedAlice \u003d new AdminBuilder(ALICE).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.isSameAdmin(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Admin aliceCopy \u003d new AdminBuilder(ALICE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.equals(BRAD));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Admin editedAlice \u003d new AdminBuilder(ALICE).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different salary -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "deming16"
        },
        "content": "        editedAlice \u003d new AdminBuilder(ALICE).withSalary(VALID_SALARY_AMY).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // different employ date -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "deming16"
        },
        "content": "        editedAlice \u003d new AdminBuilder(ALICE).withEmployedDate(VALID_EMPLOY_DATE_AMY).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/EmployDateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class EmployDateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EmployDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void constructor_invalidEmployDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String invalidEmployDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EmployDate(invalidEmployDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void isValidEmployDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // null employ date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EmployDate.isValidEmployDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // invalid employ date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(EmployDate.isValidEmployDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(EmployDate.isValidEmployDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(EmployDate.isValidEmployDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(EmployDate.isValidEmployDate(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(EmployDate.isValidEmployDate(\"12082014\")); //no slashes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertTrue(EmployDate.isValidEmployDate(\"01/01/2018\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/PathToProfilePicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class PathToProfilePicTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PathToProfilePic(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void constructor_invalidPathToProfilePic_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String invalidPathToProfilePic \u003d \"invalid.pdf\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PathToProfilePic(invalidPathToProfilePic));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void isValidPathToProfilePic() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // null path"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e PathToProfilePic.isValidPath(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(PathToProfilePic.isValidPath(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(PathToProfilePic.isValidPath(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(PathToProfilePic.isValidPath(\"abcABC\")); // no extension"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(PathToProfilePic.isValidPath(\"invalid.pdf\")); // invalid extension"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // valid salary"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertTrue(PathToProfilePic.isValidPath(\"valid.img\")); // digits only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/SalaryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "deming16"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "deming16"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "deming16"
        },
        "content": "public class SalaryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Salary(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void constructor_invalidSalary_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "        String invalidSalary \u003d \"OneHundred\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Salary(invalidSalary));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public void isValidSalary() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // null salary"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Salary.isValidSalary(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // invalid salary"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(Salary.isValidSalary(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"^abcABC\")); // only non-digit characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"3000A\")); // contains non-digit characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "        // valid salary"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"12345\")); // digits only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "deming16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "deming16": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.ModuleListChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlModuleListStorage moduleListStorage \u003d new XmlModuleListStorage(getTempFilePath(\"modulelist\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlCredentialStoreStorage credentialStoreStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new XmlCredentialStoreStorage(getTempFilePath(\"cd\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "        XmlUserStorage configStoreStorage \u003d new XmlUserStorage(getTempFilePath(\"c\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            moduleListStorage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            addressBookStorage,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            userPrefsStorage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStoreStorage,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            configStoreStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlModuleListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlCredentialStoreStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new XmlUserStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void moduleListReadSave() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlModuleListStorage} class."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlModuleListStorageTest}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ModuleList original \u003d getTypicalModuleList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveModuleList(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyModuleList retrieved \u003d storageManager.readModuleList().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new ModuleList(retrieved));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getModuleListFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getModuleFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleModuleListChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Storage storage \u003d new StorageManager("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlModuleListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlCredentialStoreStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "etjk"
        },
        "content": "                new XmlUserStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleModuleListChangedEvent(new ModuleListChangedEvent(new ModuleList()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class for ModuleList to throw an exception when the save method is called"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlModuleListStorageExceptionThrowingStub extends XmlModuleListStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlModuleListStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveModuleList(ReadOnlyModuleList moduleList, Path filePath) throws"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 16,
      "-": 149,
      "etjk": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedCredentialTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.storage.XmlAdaptedCredential.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlAdaptedCredentialTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final String INVALID_USERNAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final String INVALID_PASSWORD \u003d \"qwerty123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final String VALID_USERNAME \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CREDENTIAL_STUDENT_SEB.getUsername().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final String VALID_PASSWORD \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CREDENTIAL_STUDENT_SEB.getPassword().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final String VALID_KEY \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CREDENTIAL_STUDENT_SEB.getKey();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlAdaptedCredential credential \u003d new XmlAdaptedCredential(CREDENTIAL_STUDENT_SEB);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(CREDENTIAL_STUDENT_SEB, credential.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_invalidUsername_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlAdaptedCredential person \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlAdaptedCredential(INVALID_USERNAME, VALID_PASSWORD, VALID_KEY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String expectedMessage \u003d Username.MESSAGE_USERNAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_nullUsername_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlAdaptedCredential credential \u003d new XmlAdaptedCredential("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_PASSWORD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_KEY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Username.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credential::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_nullPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlAdaptedCredential credential \u003d new XmlAdaptedCredential(VALID_USERNAME, null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_KEY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Password.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credential::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_invalidKey_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlAdaptedCredential credential \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlAdaptedCredential(VALID_USERNAME, VALID_PASSWORD, VALID_KEY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credential::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_nullKey_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlAdaptedCredential credential \u003d new XmlAdaptedCredential("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_USERNAME,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            VALID_PASSWORD,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credential::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlCredentialStoreStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.getTypicalCredentialStore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlCredentialStoreStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \"XmlCredentialStoreStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void readCredentialStore_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        readCredentialStore(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new XmlCredentialStoreStorage("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Paths.get(filePath)).readCredentialStore(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(readCredentialStore(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        readCredentialStore(\"NotXmlFormatCredentialStore.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void readCredentialStore_invalidCredentialStore_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        readCredentialStore(\"invalidCredentialCredentialStore.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void readCredentialStore_invalidAndValidCredentialStore_throwDataConversionException() throws"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        readCredentialStore(\"invalidAndValidCredentialCredentialStore.xml\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void readAndSaveCredentialStore_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempCredentialStore.xml\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore original \u003d getTypicalCredentialStore();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlCredentialStoreStorage xmlCredentialStoreStorage \u003d new XmlCredentialStoreStorage(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        xmlCredentialStoreStorage.saveCredentialStore(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ReadOnlyCredentialStore readBack \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            xmlCredentialStoreStorage.readCredentialStore(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(original, new CredentialStore(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        original.addCredential(CREDENTIAL_STUDENT_SEB);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        original.removeCredential(CREDENTIAL_STUDENT_SEB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        xmlCredentialStoreStorage.saveCredentialStore(original, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        readBack \u003d xmlCredentialStoreStorage.readCredentialStore(filePath).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(original, new CredentialStore(readBack));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        original.addCredential(CREDENTIAL_STUDENT_SEB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        xmlCredentialStoreStorage.saveCredentialStore(original); //file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        readBack \u003d xmlCredentialStoreStorage.readCredentialStore().get(); //file path not"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(original, new CredentialStore(readBack));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore_nullCredentialStore_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        saveCredentialStore(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private void saveCredentialStore(ReadOnlyCredentialStore credentialStore,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                String filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new XmlCredentialStoreStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .saveCredentialStore(credentialStore, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        saveCredentialStore(new CredentialStore(), null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableCredentialStoreTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.TypicalCredentials;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlSerializableCredentialStoreTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \"data\", \"XmlSerializableCredentialStoreTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Path TYPICAL_CREDENTIALS_FILE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"typicalCredentialStore.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Path INVALID_CREDENTIALS_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \"invalidCredentialStore.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Path DUPLICATE_CREDENTIALS_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        TEST_DATA_FOLDER.resolve(\"duplicateCredentialStore.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_typicalCredentialsFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlSerializableCredentialStore dataFromFile \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            XmlUtil.getDataFromFile(TYPICAL_CREDENTIALS_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                XmlSerializableCredentialStore.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore credentialStoreFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore typicalCredentialStore \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            TypicalCredentials.getTypicalCredentialStore();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(credentialStoreFromFile, typicalCredentialStore);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_invalidCredentialsFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlSerializableCredentialStore dataFromFile \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            XmlUtil.getDataFromFile(INVALID_CREDENTIALS_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                XmlSerializableCredentialStore.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void toModelType_duplicateCredentials_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlSerializableCredentialStore dataFromFile \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            XmlUtil.getDataFromFile(DUPLICATE_CREDENTIALS_FILE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                XmlSerializableCredentialStore.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expectMessage(XmlSerializableCredentialStore.MESSAGE_DUPLICATE_CREDENTIAL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AdminBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.EmployDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Salary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Builds a Admin user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AdminBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"Admin123\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Role DEFAULT_ROLE \u003d Role.ADMIN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String DEFAULT_PIC \u003d \"test.img\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String DEFAULT_SALARY \u003d \"3000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final String DEFAULT_EMPLOYEDDATE \u003d \"01/01/2018\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private PathToProfilePic pic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private Salary salary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "    private EmployDate employedDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        role \u003d DEFAULT_ROLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "        pic \u003d new PathToProfilePic(DEFAULT_PIC);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "        salary \u003d new Salary(DEFAULT_SALARY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "deming16"
        },
        "content": "        employedDate \u003d new EmployDate(DEFAULT_EMPLOYEDDATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Initializes the AdminBuilder with the data of {@code adminToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder(Admin adminToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d adminToCopy.getUsername();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        name \u003d adminToCopy.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        role \u003d adminToCopy.getRole();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        pic \u003d adminToCopy.getPathToProfilePic();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        salary \u003d adminToCopy.getSalary();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        employedDate \u003d adminToCopy.getEmploymentDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code name} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "deming16"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code Role} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withRole(Role role) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code pic} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withPic(String path) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "deming16"
        },
        "content": "        this.pic \u003d new PathToProfilePic(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code salary} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public AdminBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "deming16"
        },
        "content": "        this.salary \u003d new Salary(salary);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code employedDate} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withEmployedDate(String date) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "deming16"
        },
        "content": "        this.employedDate \u003d new EmployDate(date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Admin build() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new Admin(username, name, role, pic, salary, employedDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 76,
      "deming16": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CredentialBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Password;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class to help with building Credential objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class CredentialBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"lewis\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \"b2cdcf65d531908eadb4fb2c1aef4f723dffc71437a6e991f9799d596930e0d2\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_KEY \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \"b2cdcf65d531908eadb4fb2c1aef4f723dffc71437a6e991f9799d596930e0d2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        password \u003d new Password(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        key \u003d DEFAULT_KEY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Initializes the CredentialBuilder with the data of {@code"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * credentialToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder(Credential credentialToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d credentialToCopy.getUsername();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d credentialToCopy.getPassword();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d credentialToCopy.getKey();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code username} of the {@code Credential} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder withUsername(String withUsername) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d new Username(withUsername);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code password} of the {@code Credential} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder withPassword(String withPassword) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d new Password(withPassword);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code key} of the {@code Credential} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder withKey(String withKey) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d withKey;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Credential build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new Credential(this.username, this.password, this.key);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CredentialStoreBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class to help with building CredentialStore objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * {@code CredentialStore cs \u003d new CredentialStoreBuilder()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * .withCredential(newCredential).build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class CredentialStoreBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CredentialStore credentialStore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStoreBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStoreBuilder(CredentialStore credentialStore) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credentialStore \u003d credentialStore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds a new {@code Credential} to the {@code CredentialStore} that we are"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStoreBuilder withCredentials(Credential cred) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore.addCredential(cred);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStore build() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Username;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.PathToProfilePic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.EnrollmentDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Max Verstappen\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"max33\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_PROFILE_PIC_FILEPATH \u003d \"redbull.img\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Role DEFAULT_ROLE \u003d Role.STUDENT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_ENROLLMENT_DATE \u003d \"15/03/2015\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_MAJOR \u003d Arrays.asList(\"CS\", \"DA\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_MINOR \u003d Arrays.asList(\"MA\", \"BA\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private PathToProfilePic profilePicFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private EnrollmentDate enrollmentDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private List\u003cString\u003e major;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private List\u003cString\u003e minor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        role \u003d DEFAULT_ROLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        profilePicFilePath \u003d new PathToProfilePic(DEFAULT_PROFILE_PIC_FILEPATH);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        enrollmentDate \u003d new EnrollmentDate(DEFAULT_ENROLLMENT_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        major \u003d DEFAULT_MAJOR;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        minor \u003d DEFAULT_MINOR;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder(Student student) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        name \u003d student.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d student.getUsername();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        role \u003d student.getRole();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        profilePicFilePath \u003d student.getPathToProfilePic();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        enrollmentDate \u003d student.getEnrollmentDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        major \u003d student.getMajor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        minor \u003d student.getMinor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code username} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d new Username(username);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code profilePicFilePath} of the {@code Student} that we are"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withProfilePicFilePath(String pathToPic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.profilePicFilePath \u003d new PathToProfilePic(pathToPic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code enrollmentDate} of the {@code Student} that we are"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withEnrollmentDate(String enrollmentDate) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.enrollmentDate \u003d new EnrollmentDate(enrollmentDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code majors} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withMajor(List\u003cString\u003e inputMajor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.major \u003d inputMajor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code minors} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withMinor(List\u003cString\u003e inputMinor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.minor \u003d inputMinor;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Builds the actual Student with its respective attributes."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new Student(username, name, role, profilePicFilePath,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            enrollmentDate, major, minor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAdmins.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMPLOY_DATE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "deming16"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A list of typical admin."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class TypicalAdmins {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Admin ALICE \u003d new AdminBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withRole(Role.ADMIN).withPic(\"alice.img\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withSalary(\"3000\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withEmployedDate(\"01/01/2000\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Admin BRAD \u003d new AdminBuilder().withName(\"Brad Bread\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withRole(Role.ADMIN).withPic(\"brad.img\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withSalary(\"3500\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withEmployedDate(\"01/01/2006\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Admin MORGAN \u003d new AdminBuilder().withName(\"Morgan More\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withRole(Role.ADMIN).withPic(\"morgan.img\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withSalary(\"4000\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withEmployedDate(\"01/04/2010\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "deming16"
        },
        "content": "    public static final Admin AMY \u003d new AdminBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withRole(Role.ADMIN)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withPic(VALID_PATH_AMY)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withSalary(VALID_SALARY_AMY)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "deming16"
        },
        "content": "            .withEmployedDate(VALID_EMPLOY_DATE_AMY).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 16,
      "deming16": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCredentials.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class containing a list of {@code Credential} objects to be used"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class TypicalCredentials {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Credential CREDENTIAL_STUDENT_MAX \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new CredentialBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withUsername(\"max33\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withPassword(\"5ddd2cc3ae3a14b4d717e9a0eaa8b44f6d9d10d0d5edd8183d569622e29ce680\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withKey(\"5ddd2cc3ae3a14b4d717e9a0eaa8b44f6d9d10d0d5edd8183d569622e29ce680\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Credential CREDENTIAL_STUDENT_SEB \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new CredentialBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withUsername(\"vettel5\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withPassword(\"6284cd40cd25dc42e03dca6bd45c2cfe5463d82920ac231f29034f4424a3349c\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withKey(\"6284cd40cd25dc42e03dca6bd45c2cfe5463d82920ac231f29034f4424a3349c\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private TypicalCredentials() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns a {@code CredentialStore} with all the typical credentials."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static CredentialStore getTypicalCredentialStore() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore cs \u003d new CredentialStore();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Credential credential : getTypicalCredentials()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            cs.addCredential(credential);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return cs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static List\u003cCredential\u003e getTypicalCredentials() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CREDENTIAL_STUDENT_MAX, CREDENTIAL_STUDENT_SEB));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalUsers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class containing a list of {@code User} objects to be used in"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class TypicalUsers {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Student STUDENT_MAX \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Student STUDENT_SEB \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withName(\"Sebestian Vettel\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withUsername(\"vettel5\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withProfilePicFilePath(\"ferrari.img\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withEnrollmentDate(\"17/06/2007\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withMajor(Arrays.asList(\"CS\", \"BA\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withMinor(Arrays.asList(\"IS\", \"MA\")).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // private static final User ADMIN_TOTO \u003d new AdminBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private TypicalUsers() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns a {@code List\u003cUser\u003e} with all the typical users."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cUser\u003e getTypicalUsers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(STUDENT_MAX, STUDENT_SEB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 5,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withTags().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 247
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 298
    }
  }
]
