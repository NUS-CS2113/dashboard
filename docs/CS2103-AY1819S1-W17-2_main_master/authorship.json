[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d modsUNI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W17-2/main[image:https://travis-ci.org/CS2103-AY1819S1-W17-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/CrimsonJacket/main[image:https://ci.appveyor.com/api/projects/status/6p90b4gg7ahc31r9?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W17-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W17-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/CrimsonJacket/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-W17-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/4944450c9c804c8d9c181ae1cc733c1c[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/CS2103T-modUni/Lobby[image:https://badges.gitter.im/CS2103T-modUni/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni is a desktop timetable management application created by students for students. It incorporates a simple GUI with majority of its user interactions occuring in its in-built CLI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni is targeted at local SG university undergraduates (like NUS, NTU, SMU) in need of a tool to generate a simple module plan for their respective academic semesters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Undergraduates with no clue as to how to plan their timetables in the respective semesters can use our tool to include possible module combinations and with a simple command/click, modsUni would generate a possible timetable for students."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* With literally hundreds of modules and thousands more combinations, students are faced with a dilemma semester after semester. Additional prerequisites and preclusions only exacerbate the already complicated and often frustrating process of planning timetables."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni is the one-stop solution for all students. Incorporating advanced algorithms and enhanced UI/UX design, modsUni can help students manage their modules throughout their candidature effectively, efficiently and swiftly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni includes the following features:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Students can manage their respective accounts"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Students can manage modules their have already taken or ought to take"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Students can export/import current module configurations"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Students can generate a timetable that includes the modules they have specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "** Administrators can add/update/delete modules accordingly"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* modsUni is built upon an https://github.com/se-edu/addressbook-level4[AddressBook-Level4] Application created by the https://github.com/se-edu/[SE-EDU] initiative."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 12,
      "-": 32
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u0027site-name\u0027: \u0027modsUni\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W17-2/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 2,
      "-": 245
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "modsUni - A desktop timetable management application created by students for students."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Daniel Tan Jia Wang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::crimsonjacket.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[https://github.com/CrimsonJacket[github]] [\u003c\u003cdanieltan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibility: In charge of project management and ensures that the team is moving in the right direction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Edric Teo Jin Kai"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::etjk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[http://github.com/etjk[github]] [\u003c\u003cedricteo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibility: In charge of project documentation and ensures that all documentations are in place and updated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d He ZhenFeng"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::hzf1174.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[http://github.com/hzf1174[github]] [\u003c\u003czhenfeng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibility: In charge of project testing and ensures that application pass test cases locally and remotely."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Lin Deming"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::deming16.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[http://github.com/deming16[github]] [\u003c\u003cdeming#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibility: In charge of integration and ensures that the different features are well integrated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Reuben Tan Jun Liang"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "image::rtjl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "{empty}[http://github.com/RTJL[github]] [\u003c\u003creubentan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "Responsibility: In charge of project code quality and ensures that the codebase is seamless."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "etjk": 24
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W17-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "* *Email us* : You can also reach us at `danieltjw [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "etjk": 2
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d modsUni - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W17-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team W17-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "ModUNI is an application for NUS students who want to quickly generate a plan for the modules to take during their entire university life. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `modsUni.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for modsUni."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`CS2103T` : adds the module CS2103T to the module configuration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`remove`**`CS2103T` : removes the module CS2103T to the module configuration"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`exit`** : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add \u003cMOD_CODE\u003e` is a parameter which can be used as `add CS2103T`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `MOD_CODE [MORE MOD_CODES]` can be used as `add CS2103T CS2101` or as `add CS2103T`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Gives the list of command available for the user to use. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d\u003d Adding a module: `addon` `[W.I.P]`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Adds a module to the student’s module list. Adding is case insensitive.+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Format: `addon \u003cMOD_CODE\u003e [MORE MOD_CODE]`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* `addon CS2103T`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* `addon cS2103t`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* `addon CS2103T CS2101 CS1010` `[coming in v2.0]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d\u003d Deleting a module: `remove` `[W.I.P]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Deletes a module to the student’s module list. Deleting is case insensitive.+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remove \u003cMOD_CODE\u003e [MORE MOD_CODE]`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* `remove CS2103T`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* `remove Cs2103t`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* `remove CS2103T CS2101 CS1010` `[coming in v2.0]`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d\u003d Searching for a module: `search` `[W.I.P]`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Search for all modules in the database that match the given prefix. Searching is case insensitive. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "Format: `search \u003cMOD_CODE\u003e`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `search CS101` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Returns a list of modules that begin with CS101."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* `search cs101` +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the same result as above."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "The result above will be generated. `[coming in v2.0]`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving module configurations: `save`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Save current module configurations for future usage. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "etjk"
        },
        "content": "Format: `save`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* `save` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "etjk"
        },
        "content": "Saves the current module configuration to the file name `userconfig.xml`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Loading module configurations: `load` `[coming in v2.0]`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "etjk"
        },
        "content": "Load saved module configurations. The loaded file must be in xml format. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `load [FILE_NAME]` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `load module-configuration.json` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Loads the configuration file `module-configuration.json` into modsUni."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Generate module plan : `generate`[coming in v1.2]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Generate a module plan based on added modules invoked by the add or load command. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `generate`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d Login to User Account : `login` `[coming in v2.0]`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Login to the User Account with the corresponding username. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Format: `login user/[USERNAME] pass/[PASSWORD] userData/[PATH_TO_DATA_FILE]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d Register a Student Account : `register`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Register a Student Account with the input parameters. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Format: `register user/[USERNAME] pass/[PASSWORD] name/[NAME] pic/[PATH_TO_PIC] enroll/[ENROLLMENT_DATE] maj/[MAJOR_CODE] min/[MINOR_CODE]`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d Edit Student Account : `editStudent` `[coming in v2.0]`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Edits the Student specific information as specified in the input parameters. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Format: `editStudent [OPTION]/[INPUT]...` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Available Options:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Name : `name/[NAME]`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Profile Picture: `pic/[PATH_TO_PIC]`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Enrollment Date: `enroll/[ENROLLMENT_DATE]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Major : `maj/[MAJOR_CODE]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Minor : `min/[MINOR_CODE]`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* Edit Modules Taken : `modules/[MODULE_CODE]`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "etjk"
        },
        "content": "\u003d\u003d\u003d Encryption: `no-encrypt` `[coming in v2.0]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Encryption of information is enabled by default. If users wish to store the saved configuration in plaintext, they are required to explicitly disable this feature. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `no-encrypt`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* Run `no-encrypt` followed by `save` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The application will save the configuration file in plaintext."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Set module preference: `set-mod`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Setting a preferred semester to take a module. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `set-mod \u003cMOD_CODE\u003e \u003cSEMESTER\u003e`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `set-mod CS2103T 3` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Configures CS2103T to be taken in year 2 semester 1."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Set maximum number of semesters: `set-max-sem \u003cNUM_SEMESTERS\u003e`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Setting the maximum number of semesters during candidature. +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `set-max-sem \u003cNUM_SEMESTERS\u003e`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `set-max-sem 6`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Set theme: `set-theme`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Set a different theme based on a configuration file. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `set-theme \u003cFILE_NAME\u003e`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* `set-theme \u003cFIILE_NAME\u003e`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "deming16"
        },
        "content": "\u003d\u003d\u003d Add a new administrator account: `addAdmin` `[coming in v2.0]`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "deming16"
        },
        "content": "Create and add a new adminstrator account. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "Format: `addAdmin user\\[USERNAME] pass\\[PASSWORD] n\\[NAME] ptp\\[PATH_TO_PIC] salary\\[SALARY] date\\[EMPLOYMENTDATE]`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* `addAdmin user\\master pass\\myPass n\\John Doe ptp\\johnDoe.img salary\\4000 date\\1/1/2018`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "deming16"
        },
        "content": "\u003d\u003d\u003d Remove a existing administrator account: `removeAdmin` `[coming in v2.0]`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "deming16"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "deming16"
        },
        "content": "Remove a currently existing administrator account. +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "deming16"
        },
        "content": "Format: `removeAdmin \u003cUSERNAME`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "deming16"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "deming16"
        },
        "content": "* `removeAdmin user\\adminUsername` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "deming16"
        },
        "content": "Removes a administrator account with username \"adminUsername\" if it exists."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "deming16"
        },
        "content": "\u003d\u003d\u003d Add a new module to database: `addModuleDB` `[coming in v2.0]`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "deming16"
        },
        "content": "Creates a new module and add it to the module database. +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "deming16"
        },
        "content": "Format: `createModuleDB code\\[MODULE_CODE] department\\[DEPARTMENT] title\\[TITLE] credit\\[CREDIT] available\\[SEM1][SEM2][SPECIAL_TERM1][SPECIAL_TERM2] description\\[DESCRIPTION]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "deming16"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "deming16"
        },
        "content": "* `createModuleDB code\\CS2109 department\\Computing title\\The New Module credit\\4 available\\yynn description\\This course is newly offered by the school of computing. Visit the module website for more details`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "deming16"
        },
        "content": "\u003d\u003d\u003d Remove a existing module from database: `removeModuleDB` `[coming in v2.0]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "deming16"
        },
        "content": "Removes a existing module from the module database. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "deming16"
        },
        "content": "Format: `removeModuleDB \u003cMODULE_CODE\u003e`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "deming16"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "deming16"
        },
        "content": "* `removeModuleDB CS2109` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "deming16"
        },
        "content": "Removes a module with module code \"CS2109\" if it exists."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and load your previously saved module configuration file."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* : `add \u003cMOD_CODE\u003e [MORE_MOD_CODES]`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `remove \u003cMOD_CODE\u003e [MORE_MOD_CODES]`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* *Search* : `search \u003cKEYWORD\u003e [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* *Save* : `save [FILE_NAME]`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* *Load* : `load [FILE_NAME]`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* *Generate* : `generate`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* *Login* : `login user/[USERNAME] pass/[PASSWORD] userData/[PATH_TO_DATA_FILE]`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* *Register* : `register user/[USERNAME] pass/[PASSWORD] name/[NAME] pic/[PATH_TO_PIC] enroll/[ENROLLMENT_DATE] maj/[MAJOR_CODE] min/[MINOR_CODE]`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* *Edit Student* : `editStudent [OPTION]/[INPUT]...`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* *Encryption* : `no-encrypt`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "* *Add Admin* : `addAdmin user\\[USERNAME] pass\\[PASSWORD] n\\[NAME] ptp\\[PATH_TO_PIC] salary\\[SALARY]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "date\\[EMPLOYMENTDATE]`"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 31,
      "hzf1174": 14,
      "-": 169,
      "deming16": 20,
      "etjk": 6
    }
  },
  {
    "path": "docs/team/zhenfeng.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d He Zhenfeng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d PROJECT: ModsUni"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "modsUni is a desktop timetable management application created by students for students. It incorporates a simple GUI with majority of its user interactions occurring in its in-built CLI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* *Major enhancement*:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hzf1174"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hzf1174"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hzf1174": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.storage.ConfigStoreStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.storage.CredentialStoreStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.ModuleListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.storage.XmlConfigStoreStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.storage.XmlCredentialStoreStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.storage.XmlModuleListStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStoreStorage credentialStoreStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new XmlCredentialStoreStorage(userPrefs.getCredentialStoreFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ModuleListStorage moduleListStorage \u003d new XmlModuleListStorage(userPrefs.getModuleFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ConfigStoreStorage configStoreStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new XmlConfigStoreStorage(userPrefs.getUserConfigFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        storage \u003d new StorageManager(moduleListStorage, addressBookStorage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            userPrefsStorage, credentialStoreStorage, configStoreStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyModuleList\u003e moduleListOptional;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Optional\u003cReadOnlyCredentialStore\u003e credentialStoreOptional;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Optional\u003cConfigStore\u003e configStoreOptional;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyModuleList initialModuleListData;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyCredentialStore initialCredentialStore;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ConfigStore initialConfigStore;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // initCredentialStore"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStoreOptional \u003d storage.readCredentialStore();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (!credentialStoreOptional.isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Credential Store file not found. Will be starting with a sample Credential Store\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initialCredentialStore \u003d credentialStoreOptional.orElse(new CredentialStore());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            // initModuleList"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            moduleListOptional \u003d storage.readModuleList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!moduleListOptional.isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Module List data file not found. Will be starting with a sample module list \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"data\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initialModuleListData \u003d moduleListOptional.orElseGet(SampleDataUtil::getSampleModuleList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            // initAddressBook"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            // initConfigStore"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "etjk"
        },
        "content": "            configStoreOptional \u003d storage.readConfigStore();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "etjk"
        },
        "content": "            if (!configStoreOptional.isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "etjk"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "etjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            initialConfigStore \u003d configStoreOptional.orElse(new ConfigStore());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            initialCredentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            initialModuleListData \u003d new ModuleList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            initialConfigStore \u003d new ConfigStore();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initialCredentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initialModuleListData \u003d new ModuleList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            initialConfigStore \u003d new ConfigStore();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new ModelManager(initialModuleListData, initialData, userPrefs,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            initialCredentialStore, initialConfigStore);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 25,
      "-": 229,
      "etjk": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String appTitle \u003d \"modsUni\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_MODULE_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ConfigStoreChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "/** Indicates the ConfigStore in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class ConfigStoreChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public final ConfigStore data;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public ConfigStoreChangedEvent(ConfigStore data) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return \"Byte size of config data: \" + data.getConfigData().length;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/CredentialStoreChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/** Indicates the CredentialStore in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class CredentialStoreChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public final ReadOnlyCredentialStore data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStoreChangedEvent(ReadOnlyCredentialStore data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return \"No. of Credentials: \" + data.getCredentials().size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAdminCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Adds a new admin account."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddAdminCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addAdmin\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new admin account. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_PATH_TO_PIC + \"PATH_TO_PIC \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_SALARY + \"SALARY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_EMPLOYMENT_DATE + \"EMPLOYMENTDATE\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Example \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_USERNAME + \"myUsername \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_PASSWORD + \"myPassword \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_PATH_TO_PIC + \"path \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_SALARY + \"3000 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + PREFIX_EMPLOYMENT_DATE + \"30/9/2018\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New admin added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ADMIN \u003d \"This admin username already exists\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USERNAME \u003d \"This username already exists in the database\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_NOT_ADMIN \u003d \"Only an admin user can execute this command\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Admin toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Credential credential;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AddAdminCommand(Admin admin, Credential credential) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(admin);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(credential);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        toAdd \u003d admin;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credential \u003d credential;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (model.hasCredential(credential)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_USERNAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.addCredential(credential);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        /*TODO: Prevent Duplicate Admin"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ADMIN);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!model.isAdmin()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.addAdmin(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        /*TODO: undo redo"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof AddAdminCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAdminCommand) other).toAdd));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddOnCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Adds a module to the user\u0027s profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddOnCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addon\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds on one module to your profile. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"MOD_CODE(case insensitive)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"CS2103T \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in your profile: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE \u003d \"This module does not exist in our database\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Module toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Creates an AddOnCommand to add the specified {@code module}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AddOnCommand(Module module) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Optional\u003cModule\u003e optionalModule \u003d model.searchModuleInModuleList(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (optionalModule.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            toAdd \u003d optionalModule.get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof AddOnCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddOnCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ENROLLMENT_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MAJOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MINOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Adds a new Credential to the Credential Store."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Registers a new Student Account. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_PATH_TO_PIC + \"PATH \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_ENROLLMENT_DATE + \"DD/MM/YY \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_MAJOR + \"MAJORCODE_1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_MAJOR + \"MAJORCODE_2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_MINOR + \"MINORCODE_1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + PREFIX_STUDENT_MINOR + \"MINORCODE_2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Account created added: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"%1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USERNAME \u003d \"This username already exists in the database\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Credential toRegister;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final User user;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Creates an RegisterCommand to add the specified {@code Credential}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public RegisterCommand(Credential newCredential, User newUser) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireAllNonNull(newCredential, newUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        toRegister \u003d newCredential;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        user \u003d newUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (model.hasCredential(toRegister)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_USERNAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.addCredential(toRegister);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(user);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRegister));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            || (other instanceof RegisterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 toRegister.equals(((RegisterCommand) other).toRegister))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 user.equals(((RegisterCommand) other).user);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemoveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Deletes a module from the user\u0027s profile."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \": Removes the module identified by its code.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Parameters: MOD_CODE(case insensitive)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_REMOVE_MODULE_SUCCESS \u003d \"Removed Module: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE \u003d \"This module does not exist in our database\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_EXISTS \u003d \"This module does not exist in your profile\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Module toRemove;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public RemoveCommand(Module module) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.toRemove \u003d module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Optional\u003cModule\u003e optionalModule \u003d model.searchModuleInModuleList(toRemove);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (optionalModule.isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            toRemove \u003d optionalModule.get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_EXISTS_IN_DATABASE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!model.hasModule(toRemove)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_EXISTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.removeModule(toRemove);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_MODULE_SUCCESS, toRemove));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof RemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 toRemove.equals(((RemoveCommand) other).toRemove)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Saves the module configuration."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Current module configuration has be saved!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private final Config toSaveConfig;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public SaveCommand(Config newConfig) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(newConfig);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "        toSaveConfig \u003d newConfig;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "        model.saveConfigFile(toSaveConfig);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Finds and lists all modules in the user\u0027s profile whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches all modules whose codes begin with any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS101\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Module keyword;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private List\u003cModule\u003e result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public SearchCommand(Module module) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.keyword \u003d module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e getResult() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        result \u003d model.searchKeyWordInModuleList(keyword);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_MODULE_LISTED_OVERVIEW, result.size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 keyword.equals(((SearchCommand) other).keyword)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAdminCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMPLOYMENT_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.AddAdminCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new AddAdminCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddAdminCommandParser implements Parser\u003cAddAdminCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAdminCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * and returns an AddAdminCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AddAdminCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_USERNAME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                        PREFIX_PASSWORD, PREFIX_PATH_TO_PIC , PREFIX_SALARY, PREFIX_EMPLOYMENT_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_SALARY, PREFIX_EMPLOYMENT_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAdminCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //Admin Credential"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String username \u003d argMultimap.getValue(PREFIX_USERNAME).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //Admin info"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Role role \u003d Role.ADMIN;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String pathToProfilePic \u003d argMultimap.getValue(PREFIX_PATH_TO_PIC).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        int salary \u003d Integer.parseInt(argMultimap.getValue(PREFIX_SALARY).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String employmentDate \u003d argMultimap.getValue(PREFIX_PATH_TO_PIC).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin admin \u003d new Admin(username, name, role, pathToProfilePic, salary,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            employmentDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO key to be replaced"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential credential \u003d new Credential(username, password, password);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new AddAdminCommand(admin, credential);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddOnCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.AddOnCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new AddOnCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddOnCommandParser implements Parser\u003cAddOnCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddOnCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * and returns an AddOnCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AddOnCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String inputModuleCode \u003d args.toUpperCase().trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module module \u003d new Module(inputModuleCode, \"\", \"\", \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                0, true, true, true, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new AddOnCommand(module);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.AddAdminCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.AddOnCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.GenerateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case AddOnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new AddOnCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etjk"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etjk"
        },
        "content": "            // Prepare for next version"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etjk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etjk"
        },
        "content": "                return new SaveCommand(new Config(\"hello\".getBytes(\"UTF-8\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etjk"
        },
        "content": "            } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "etjk"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "etjk"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "etjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new RemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case GenerateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new GenerateCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case RegisterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new RegisterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        case AddAdminCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return new AddAdminCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 23,
      "-": 93,
      "etjk": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_EMPLOYMENT_DATE \u003d new Prefix(\"employ/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"user/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pass/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_PATH_TO_PIC \u003d new Prefix(\"pic/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"salary/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_ENROLLMENT_DATE \u003d new Prefix("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        \"enroll/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_MAJOR \u003d new Prefix(\"maj/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_MINOR \u003d new Prefix(\"min/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 9,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH_TO_PIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_ENROLLMENT_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MAJOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_MINOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RegisterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new RegisterCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommandParser implements Parser\u003cRegisterCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * RegisterCommand and returns an RegisterCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public RegisterCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ArgumentTokenizer.tokenize(userInput, PREFIX_USERNAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                PREFIX_PASSWORD, PREFIX_NAME, PREFIX_PATH_TO_PIC,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                PREFIX_STUDENT_ENROLLMENT_DATE, PREFIX_STUDENT_MAJOR, PREFIX_STUDENT_MINOR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            PREFIX_NAME, PREFIX_PATH_TO_PIC)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String username \u003d argMultimap.getValue(PREFIX_USERNAME).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String pathToPic \u003d argMultimap.getValue(PREFIX_PATH_TO_PIC).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String enrollmentDate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            argMultimap.getValue(PREFIX_STUDENT_ENROLLMENT_DATE).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        List\u003cString\u003e majors \u003d argMultimap.getAllValues(PREFIX_STUDENT_MAJOR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        List\u003cString\u003e minors \u003d argMultimap.getAllValues(PREFIX_STUDENT_MINOR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User newUser \u003d new Student(username, name, Role.STUDENT, pathToPic,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            enrollmentDate, majors, minors);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO key to be replaced"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential credential \u003d new Credential(username, password, password);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new RegisterCommand(credential, newUser);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemoveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.RemoveCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new RemoveCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RemoveCommandParser implements Parser\u003cRemoveCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * and returns an RemoveCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public RemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module module \u003d new Module(args.toUpperCase().trim(), \"\", \"\", \"\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                0, true, true, true, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new RemoveCommand(module);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * and returns an SearchCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module module \u003d new Module(trimmedArgs.toUpperCase(), \"\", \"\", \"\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                0, true, true, true, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new SearchCommand(module);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other wadys to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Config data"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private final byte[] configData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Config (byte[] data) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.configData \u003d data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public byte[] getConfigData() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return configData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ConfigStore.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Wraps all Configuration data"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class ConfigStore {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private byte[] configData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void addConfigData (Config config) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "        configData \u003d config.getConfigData();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public byte[] getConfigData() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return configData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the ModuleList */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyModuleList getModuleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds the given admin."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code admin} must not already exist in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void addAdmin(Admin admin);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Check if the user is a admin.."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    boolean isAdmin();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void removeModule(Module module);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds the given credential."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * {@code credential} must not already exist in the credential store."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void addCredential(Credential credential);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if credential with the same username already exists in"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * the credential store."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    boolean hasCredential(Credential credential);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the CredentialStore"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    ReadOnlyCredentialStore getCredentialStore();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the given user as the currentUser."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param user"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void setCurrentUser(User user);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the currentUser."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    User getCurrentUser();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Saves the current configuration."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "etjk"
        },
        "content": "    void saveConfigFile(Config c);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the optional of the module in the storage."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Optional\u003cModule\u003e searchModuleInModuleList(Module module);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the a list of modules whose codes begin with the keyword."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    List\u003cModule\u003e searchKeyWordInModuleList(Module keyword);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 88,
      "-": 78,
      "etjk": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.events.model.ConfigStoreChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.model.CredentialStoreChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static User currentUser \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final ReadOnlyModuleList moduleList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final CredentialStore credentialStore;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private final ConfigStore configStore;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredModule;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyModuleList moduleList, ReadOnlyAddressBook addressBook, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                        ReadOnlyCredentialStore credentialStore,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                        ConfigStore configStore) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(moduleList, addressBook, userPrefs, credentialStore);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with modulelist: \" + moduleList + \" address book: \" + addressBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credentialStore \u003d (CredentialStore) credentialStore;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.configStore \u003d configStore;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.filteredModule \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this(new ModuleList(), new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ModuleList moduleList \u003d (ModuleList) getModuleList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return moduleList.getModuleInformation(module);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ModuleList moduleList \u003d (ModuleList) getModuleList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return moduleList.searchKeyword(keyword);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Student student \u003d (Student) getCurrentUser();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return student.hasModule(module);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void removeModule(Module module) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Student student \u003d (Student) getCurrentUser();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        student.removeModule(module);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Student student \u003d (Student) getCurrentUser();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        student.addModule(module);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Admin Account Management \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(admin);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO: Save Admin to user config"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isAdmin() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return currentUser.getRole() \u003d\u003d Role.ADMIN;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredModule);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        filteredModule.setPredicate(predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Save Config file \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveConfigFile(Config c) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "etjk"
        },
        "content": "        configStore.addConfigData(c);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "etjk"
        },
        "content": "        triggerFileSaveConfig();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /** Raises an event to trigger the save */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private void triggerFileSaveConfig() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "etjk"
        },
        "content": "        raise(new ConfigStoreChangedEvent(configStore));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 credentialStore.equals(other.credentialStore);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Credential Store Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Raise an event indicating that credential store has change"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private void indicateCredentialStoreChanged() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        raise(new CredentialStoreChangedEvent(credentialStore));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore.addCredential(credential);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        indicateCredentialStoreChanged();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore.hasCredential(credential);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Account Management Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        currentUser \u003d user;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public User getCurrentUser() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return currentUser;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 112,
      "-": 153,
      "etjk": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data relating to modules"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModuleList implements ReadOnlyModuleList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModuleList(ReadOnlyModuleList toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyModuleList newData) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a module to the module list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module must not already exist in the module list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the module list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * module list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code ModuleList}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cModule\u003e getModuleInformation(Module target) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return modules.search(target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e searchKeyword(Module keyword) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return modules.searchKeyword(keyword);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 modules.equals(((ModuleList) other).modules));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 9,
      "-": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path moduleFilePath \u003d Paths.get(\"data\", \"moduleList.xml.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Path credentialStoreFilePath \u003d Paths.get(\"data\" , \"credentialstore.xml\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private Path userConfigFilePath \u003d Paths.get(\"data\" , \"userconfig.xml\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Path getCredentialStoreFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStoreFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setCredentialStoreFilePath(Path credentialStoreFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credentialStoreFilePath \u003d credentialStoreFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Path getUserConfigFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return userConfigFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void setUserConfigFilePath(Path userConfigFilePath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.userConfigFilePath \u003d userConfigFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getModuleFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModuleFilePath(Path moduleFilePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.moduleFilePath \u003d moduleFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(moduleFilePath, o.moduleFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal module list data file location : \" + moduleFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        sb.append(\"\\nLocal Credential Store File Location : \" + credentialStoreFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 10,
      "-": 80,
      "etjk": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/credential/Credential.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.credential;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a Credential in the credential store."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Guarantees: details are present and not null, no duplicates in credential"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * store."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class Credential {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // Identity Field"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // Data Field"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final String key; // TODO Awaiting Encryption function"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Credential(String username, String password, String key) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireAllNonNull(username, password, key);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isSameCredential(Credential otherCredential) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (otherCredential \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherCredential !\u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getPassword().equals(getPassword())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getKey().equals(getKey());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof Credential)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential otherCredential \u003d (Credential) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherCredential.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getPassword().equals(getPassword())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherCredential.getKey().equals(getKey());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Objects.hash(username, password, key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        builder.append(\"Username: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(getUsername())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(\" Password: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(getPassword())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(\" Key: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .append(getKey());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/credential/CredentialStore.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.credential;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Wraps all CredentialStore data"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class CredentialStore implements ReadOnlyCredentialStore {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final HashMap\u003cString, String\u003e credentialStore \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final HashMap\u003cString, String\u003e keyMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if a credential with the same parameters as {@code"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * credential} exists in the credential store."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param credential"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 124020da086a70cd48dacd11050d497e5dc039f1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(credential);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore.containsKey(credential.getUsername());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds a credential to the credential store."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * The person must not already exist in the credential store."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param credential"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 124020da086a70cd48dacd11050d497e5dc039f1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore.put(credential.getUsername(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credential.getPassword());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        keyMap.put(credential.getUsername(), credential.getKey());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cCredential\u003e getCredentials() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        List\u003cCredential\u003e credentials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Map.Entry\u003cString, String\u003e entry : credentialStore.entrySet()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Credential account \u003d new Credential(entry.getKey(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                entry.getValue(), keyMap.get(entry.getKey()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentials.add(account);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentials;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(obj instanceof CredentialStore)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore other \u003d (CredentialStore) obj;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore.equals(other.credentialStore)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 keyMap.equals(other.keyMap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/credential/ReadOnlyCredentialStore.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.credential;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Unmodifiable view of a credential store"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 124020da086a70cd48dacd11050d497e5dc039f1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public interface ReadOnlyCredentialStore {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns an list of credentials."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This list will not contain any duplicate credentials."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    List\u003cCredential\u003e getCredentials();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Class to encapsulate all data fields relating to a Module."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    // Information fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int credit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isAvailableInSem1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isAvailableInSem2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isAvailableInSpecialTerm1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isAvailableInSpecialTerm2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Module(String code, String department, String title, String description, int credit,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  boolean isAvailableInSem1, boolean isAvailableInSem2, boolean isAvailableInSpecialTerm1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  boolean isAvailableInSpecialTerm2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(code, department, title, description, credit, isAvailableInSem1,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                isAvailableInSem2, isAvailableInSpecialTerm1, isAvailableInSpecialTerm2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.credit \u003d credit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAvailableInSem1 \u003d isAvailableInSem1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAvailableInSem2 \u003d isAvailableInSem2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAvailableInSpecialTerm1 \u003d isAvailableInSpecialTerm1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAvailableInSpecialTerm2 \u003d isAvailableInSpecialTerm2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getCredit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return credit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAvailableInSem1() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAvailableInSem1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAvailableInSem2() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAvailableInSem2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAvailableInSpecialTerm1() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAvailableInSpecialTerm1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAvailableInSpecialTerm2() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAvailableInSpecialTerm2;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both modules of the same code."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getCode().equals(getCode());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if this module\u0027s code is the prefix of the other module\u0027s code."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isPrefixModule(Module otherModule) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 otherModule.getCode().startsWith(getCode());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherModule.getCode().equals(getCode())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getDepartment().equals(getDepartment())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.getCredit() \u003d\u003d getCredit()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.isAvailableInSem1 \u003d\u003d isAvailableInSem1"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.isAvailableInSem2 \u003d\u003d isAvailableInSem2"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.isAvailableInSpecialTerm1 \u003d\u003d isAvailableInSpecialTerm1"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherModule.isAvailableInSpecialTerm2 \u003d\u003d isAvailableInSpecialTerm2;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(code, department, title, description, credit, isAvailableInSem1,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                isAvailableInSem2, isAvailableInSpecialTerm1, isAvailableInSpecialTerm2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getCode())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Department: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDepartment())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Title: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Credit: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getCredit())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Is Available in Sem 1: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(isAvailableInSem1)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Is Available in Sem 2: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(isAvailableInSem1)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Is Available in Special Term 1: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(isAvailableInSpecialTerm1)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Is Available in Special Term 2: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(isAvailableInSpecialTerm2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 11,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * updating of modules uses Module#isSameModule(Module) for equality so as to ensure that the person being"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueModuleList. However, the removal of a person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * uses Module#equals(Object) so as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * @see Module#isPrefixModule(Module)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the Optional of the Module."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cModule\u003e search(Module toSearch) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(toSearch);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Module module : internalList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (module.getCode().equals(toSearch.getCode())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                return Optional.of(module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the List of Modules start with the keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e searchKeyword(Module keyword) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(keyword);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Object[] objectsArray \u003d internalList.stream().filter(keyword::isPrefixModule).toArray();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module[] modulesArray \u003d Arrays.copyOf(objectsArray, objectsArray.length, Module[].class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Arrays.asList(modulesArray);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 26,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Admin.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Contains all the data of a Admin user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class Admin extends User {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private int salary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String employmentDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructor method for Admin class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param salary The salary the admin receives monthly."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param employmentDate The date the Admin was employed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Admin(String username, String name, Role role,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                 String pathToProfilePic,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                 int salary, String employmentDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        super(username, name, role, pathToProfilePic);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.employmentDate \u003d employmentDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public int getSalary() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return salary;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getEmploymentDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return employmentDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updatePassword (String newPassword) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateName (String newName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateProfilePic (String newPath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void deleteUser(User userToDelete) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both admins of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This defines a weaker notion of equality between two admins."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean isSameAdmin(Admin otherAdmin) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (otherAdmin \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherAdmin !\u003d null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherAdmin.getName().equals(getName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 (otherAdmin.getEmploymentDate().equals(getEmploymentDate())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || otherAdmin.getPathToProfilePic().equals(getPathToProfilePic())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                || otherAdmin.getSalary() \u003d\u003d getSalary());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both admins have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This defines a stronger notion of equality between two admins."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof Admin)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin otherPerson \u003d (Admin) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherPerson.getSalary() \u003d\u003d getSalary()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherPerson.getEmploymentDate().equals(getEmploymentDate())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherPerson.getPathToProfilePic().equals(getPathToProfilePic())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \u0026\u0026 otherPerson.getRole().equals(getRole());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Objects.hash(name, role, pathToProfilePic, salary, employmentDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(name)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(\" Salary: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(getSalary())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(\" employmentDate: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                .append(getEmploymentDate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Role.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * The role of a user account."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public enum Role {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    ADMIN, STUDENT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Student.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a Student User."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class Student extends User {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected String enrollmentDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected List\u003cString\u003e major;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected List\u003cString\u003e minor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected List\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructor method of User"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param username         The username of the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param name             The name of the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param role             The role of the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param pathToProfilePic The path to the image to be used as profile picture."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Student(String username, String name, Role role,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                   String pathToProfilePic, String enrollmentDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                   List\u003cString\u003e major, List\u003cString\u003e minor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        super(username, name, role, pathToProfilePic);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.enrollmentDate \u003d enrollmentDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updatePassword(String newPassword) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateName(String newName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateProfilePic(String newPath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void deleteUser(User userToDelete) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateEnrollmentDate(String enrollmentDate) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.enrollmentDate \u003d enrollmentDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateMajors(List\u003cString\u003e newMajors) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.major \u003d newMajors;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void updateMinors(List\u003cString\u003e newMinors) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.minor \u003d newMinors;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns true if both student\u0027s profile contains the module and false otherwise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Module existModule: modules) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (existModule.equals(module)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void removeModule(Module module) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        modules.remove(module);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cModule\u003e getModules() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * General details of a User account."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public abstract class User {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected String username;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected Role role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    protected String pathToProfilePic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructor method of User"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param name             The name of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param role             The role of the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param pathToProfilePic The path to the image to be used as profile picture."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public User(String username, String name, Role role,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                String pathToProfilePic) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.pathToProfilePic \u003d pathToProfilePic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public abstract void updateName(String newName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public abstract void updateProfilePic(String newPath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public abstract void deleteUser(User userToDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this.username;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public String getPathToProfilePic() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return pathToProfilePic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public abstract void updatePassword (String newPassword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ConfigStoreStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ConfigStore}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "public interface ConfigStoreStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "    Path getConfigStoreStorageFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Returns ConfigStore data as a {@link ConfigStore}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "    *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "    Optional\u003cConfigStore\u003e readConfigStore() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @see #getConfigStoreStorageFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    Optional\u003cConfigStore\u003e readConfigStore(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Saves the given {@link ConfigStore} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @param configStore cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "    void saveConfigStore(ConfigStore configStore) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @see #saveConfigStore(ConfigStore)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "    void saveConfigStore(ConfigStore configStore, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CredentialStoreStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a storage for {@link CredentialStore}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public interface CredentialStoreStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Path getCredentialStoreFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns CredentialStore data as a {@link CredentialStore}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore() throws DataConversionException,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @see #getCredentialStoreFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore(Path filePath)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Saves the given {@link CredentialStore} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param credentialStore cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void saveCredentialStore(ReadOnlyCredentialStore credentialStore) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @see #saveCredentialStore(ReadOnlyCredentialStore)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void saveCredentialStore(ReadOnlyCredentialStore credentialStore,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                             Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModuleStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Module}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public interface ModuleStorage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.events.model.ConfigStoreChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.model.CredentialStoreChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.ModuleListChangedEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public interface Storage extends ModuleListStorage, AddressBookStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    UserPrefsStorage, CredentialStoreStorage, ConfigStoreStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyModuleList\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Module List to the hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleModuleListChangedEvent(ModuleListChangedEvent abce);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Credential Store to the hard disks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file it it is missing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void handleCredentialStoreChangedEvent(CredentialStoreChangedEvent csce);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Saves the current module configuration data to the hard disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "    void handleConfigStoreChangedEvent(ConfigStoreChangedEvent csce);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 4,
      "-": 58,
      "etjk": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.events.model.ConfigStoreChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.model.CredentialStoreChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.events.model.ModuleListChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModuleListStorage moduleListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CredentialStoreStorage credentialStoreStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private ConfigStoreStorage configStoreStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(ModuleListStorage moduleListStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                          AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                          CredentialStoreStorage credentialStoreStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "                          ConfigStoreStorage configStoreStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.moduleListStorage \u003d moduleListStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credentialStoreStorage \u003d credentialStoreStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.configStoreStorage \u003d configStoreStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getModuleFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleListStorage.getModuleFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyModuleList\u003e readModuleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return readModuleList(moduleListStorage.getModuleFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyModuleList\u003e readModuleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleListStorage.readModuleList(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveModuleList(ReadOnlyModuleList moduleList) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        saveModuleList(moduleList, moduleListStorage.getModuleFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveModuleList(ReadOnlyModuleList moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        moduleListStorage.saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleModuleListChangedEvent(ModuleListChangedEvent event) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"ModuleList data changed, saving to file\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            saveModuleList(event.data);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CredentialStore methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Path getCredentialStoreFilePath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStoreStorage.getCredentialStoreFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStoreStorage.readCredentialStore();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore(Path filePath)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStoreStorage.readCredentialStore();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore(ReadOnlyCredentialStore credentialStore) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStoreStorage.saveCredentialStore(credentialStore,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStoreStorage.getCredentialStoreFilePath());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore(ReadOnlyCredentialStore credentialStore,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                    Path filePath) throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStoreStorage.saveCredentialStore(credentialStore, filePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void handleCredentialStoreChangedEvent(CredentialStoreChangedEvent event) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Credential \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            + \"Store changed. Saving to file\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            saveCredentialStore(event.data);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "etjk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Configuration File methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Path getConfigStoreStorageFilePath() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return configStoreStorage.getConfigStoreStorageFilePath();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Optional\u003cConfigStore\u003e readConfigStore() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return configStoreStorage.readConfigStore();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Optional\u003cConfigStore\u003e readConfigStore(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "etjk"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return configStoreStorage.readConfigStore();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveConfigStore(ConfigStore configStore) throws IOException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "etjk"
        },
        "content": "        configStoreStorage.saveConfigStore(configStore, configStoreStorage.getConfigStoreStorageFilePath());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveConfigStore(ConfigStore configStore, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "etjk"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "etjk"
        },
        "content": "        configStoreStorage.saveConfigStore(configStore, filePath);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void handleConfigStoreChangedEvent(ConfigStoreChangedEvent event) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "etjk"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "etjk"
        },
        "content": "            saveConfigStore(event.data);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "etjk"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 51,
      "-": 135,
      "etjk": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedConfig.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": " * JAXB-friendly version of the Config."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class XmlAdaptedConfig {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Config %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private byte[] data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Constructs an XmlAdaptedConfig."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlAdaptedConfig() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Constructs an {@code XmlAdaptedConfig} with the given data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlAdaptedConfig(byte[] data) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Converts a given Config into this class for JAXB use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "    *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @param source future changes to this will not affect the created XmlAdaptedConfig"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlAdaptedConfig(Config source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "        data \u003d source.getConfigData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Converts this jaxb-friendly adapted config object into the model\u0027s Config object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "    *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated in the adapted config"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Config toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (data \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Username\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new Config(data);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //  @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //  public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //    if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //      return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //    if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //      return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //    XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //    return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //            \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //            \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //            \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //            \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etjk"
        },
        "content": "    //  }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCredential.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * JAXB-friendly version of the Credential."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlAdaptedCredential {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Credential\u0027s \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"%s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlAdaptedCredential() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlAdaptedCredential(String username, String password, String key) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCredential"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlAdaptedCredential(Credential source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d source.getUsername();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        password \u003d source.getPassword();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        key \u003d source.getKey();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Credential toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (username \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Username\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Password\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (key \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Key\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new Credential(username, password, key);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof XmlAdaptedCredential)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlAdaptedCredential otherCredential \u003d (XmlAdaptedCredential) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return Objects.equals(username, otherCredential.username)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 Objects.equals(password, otherCredential.password)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \u0026\u0026 Objects.equals(key, otherCredential.key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException, FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlConfigStoreStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": " * A class to access ConfigStore data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class XmlConfigStoreStorage implements ConfigStoreStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlConfigStoreStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlConfigStoreStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Path getConfigStoreStorageFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Optional\u003cConfigStore\u003e readConfigStore() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return readConfigStore(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Similar to {@link #readConfigStore()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Optional\u003cConfigStore\u003e readConfigStore(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "          FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.info(\"Config file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "        XmlSerializableConfigStore xmlConfigStore \u003d XmlFileStorage.loadConfigStoreDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return Optional.of(xmlConfigStore.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etjk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveConfigStore(ConfigStore configStore) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "etjk"
        },
        "content": "        saveConfigStore(configStore, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Similar to {@link #saveConfigStore(ConfigStore)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void saveConfigStore(ConfigStore configStore, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(configStore);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "etjk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "etjk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "etjk"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableConfigStore(configStore));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlCredentialStoreStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A class to access CredentialStore data stored as an xml file on the hard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 124020da086a70cd48dacd11050d497e5dc039f1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlCredentialStoreStorage implements CredentialStoreStorage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlCredentialStoreStorage.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlCredentialStoreStorage(Path filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Path getCredentialStoreFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore() throws DataConversionException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return readCredentialStore(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Similar to {@link #readCredentialStore()}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Optional\u003cReadOnlyCredentialStore\u003e readCredentialStore(Path filePath)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            logger.info(\"CredentialStore file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlSerializableCredentialStore xmlUserCredentials \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            XmlFileStorage.loadCredentialStoreDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return Optional.of(xmlUserCredentials.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore(ReadOnlyCredentialStore credentialStore) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        saveCredentialStore(credentialStore, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void saveCredentialStore(ReadOnlyCredentialStore credentialStore,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                    Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(credentialStore);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new XmlSerializableCredentialStore(credentialStore));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Stores data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given modulelist data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableModuleList moduleList)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, moduleList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Saves the given credential store data to the specified file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static void saveDataToFile(Path file,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                      XmlSerializableCredentialStore credentialStore)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            XmlUtil.saveDataToFile(file, credentialStore);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Saves the given credential store data to the specified file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableConfigStore configStore) throws FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "etjk"
        },
        "content": "            XmlUtil.saveDataToFile(file, configStore);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns module list in the file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableModuleList loadModuleListFromSaveFile(Path file) throws"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            DataConversionException,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableModuleList.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns CredentialStore in the file or an empty CredentialStore"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static XmlSerializableCredentialStore loadCredentialStoreDataFromSaveFile(Path file)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        throws DataConversionException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableCredentialStore.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Returns CredentialStore in the file or an empty usercredentials"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static XmlSerializableConfigStore loadConfigStoreDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "etjk"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "etjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "etjk"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableConfigStore.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "etjk"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 22,
      "-": 76,
      "etjk": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlModuleStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A class to access Modules data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlModuleStorage implements ModuleStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlModuleStorage(Path filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableConfigStore.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": " * An Immutable ConfigStore that is serializable to XML format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "@XmlRootElement(name \u003d \"configstore\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class XmlSerializableConfigStore {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private List\u003cXmlAdaptedConfig\u003e configDatas;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Creates an empty XmlSerializableConfigStore."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlSerializableConfigStore() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "        configDatas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Conversion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public XmlSerializableConfigStore(ConfigStore src) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "        XmlAdaptedConfig adaptedConfig \u003d new XmlAdaptedConfig(src.getConfigData());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": "        configDatas.add(adaptedConfig);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * Converts this configstore into the model\u0027s {@code ConfigStore} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "    *l"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": "    * {@code XmlAdaptedConfig}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "    */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public ConfigStore toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "        ConfigStore configStore \u003d new ConfigStore();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "        for (XmlAdaptedConfig adaptedConfig : configDatas) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "            Config config \u003d adaptedConfig.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": "            configStore.addConfigData(config);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return configStore;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableCredentialStore.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "@XmlRootElement(name \u003d \"credentialstore\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class XmlSerializableCredentialStore {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Credential Store \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        + \"contains duplicate user(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private List\u003cXmlAdaptedCredential\u003e credentials;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlSerializableCredentialStore() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public XmlSerializableCredentialStore(ReadOnlyCredentialStore src) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentials.addAll(src.getCredentials()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .map(XmlAdaptedCredential::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Converts this usercredentials into the model\u0027s {@code CredentialStore}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     *                               {@code XmlAdaptedUserCredentials}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStore toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore credentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (XmlAdaptedCredential a : credentials) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Credential credential \u003d a.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            if (credentialStore.hasCredential(credential)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStore.addCredential(credential);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        if (!(other instanceof XmlSerializableCredentialStore)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentials.equals(((XmlSerializableCredentialStore) other).credentials);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_MODULELIST_TESTING \u003d TestUtil.getFilePathInSandboxFolder"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            (\"sampleModuleListData.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveModuleListFileLocation \u003d SAVE_LOCATION_FOR_MODULELIST_TESTING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setModuleFilePath(saveModuleListFileLocation);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model copy \u003d new ModelManager((model.getModuleList()), (model.getAddressBook()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 5,
      "-": 123,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : modsUni\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 2,
      "-": 124,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAdminCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.AdminBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddAdminCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_newAdmin_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin validAdmin \u003d new AdminBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential validCredential \u003d new Credential(\"u\", \"p\", \"k\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getModuleList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getAddressBook(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel.addAdmin(validAdmin);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel.addCredential(validCredential);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(new AdminBuilder().build());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess(new AddAdminCommand(validAdmin, new Credential(\"u\", \"p\", \"k\")), model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                String.format(AddAdminCommand.MESSAGE_SUCCESS, validAdmin), expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAdminCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.AdminBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddAdminCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullCredential_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new AddAdminCommand(new Admin(\"test\", \"test\", Role.ADMIN, \" \","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            1000 , \"1/1/2018\"), null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullAdmin_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new AddAdminCommand(null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new Credential(\"username\", \"password\" , \"key\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_bothNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new AddAdminCommand(null, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void notAdmin_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddAdminCommand addAdminCommand \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new AddAdminCommand(new Admin(\"dummy\", \"fake\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                Role.STUDENT, \" \", 1000,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                \"1/1/2018\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new Credential(\"u\", \"p\", \"k\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expectMessage(AddAdminCommand.MESSAGE_NOT_ADMIN);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User fakeAdmin \u003d new Admin(\"dummer\", \"faker\", Role.STUDENT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            \"\", 1000, \"1/1/1970\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(fakeAdmin);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        addAdminCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin alice \u003d new AdminBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Admin bob \u003d new AdminBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential credential \u003d new Credential(\"u\", \"p\", \"k\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddAdminCommand addAliceCommand \u003d new AddAdminCommand(alice, credential);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddAdminCommand addBobCommand \u003d new AddAdminCommand(bob, credential);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddAdminCommand addAliceCommandCopy \u003d new AddAdminCommand(alice, credential);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getModuleList(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getAddressBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 12,
      "-": 48,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "etjk"
        },
        "content": "        public void saveConfigFile(Config c) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "etjk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "etjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 74,
      "-": 209,
      "etjk": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddOnCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ACC1002X;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AddOnCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new AddOnCommand(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddOnCommandTest.ModelStubAcceptingModuleAdded modelStub \u003d new AddOnCommandTest.ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module validModule \u003d ACC1002X;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CommandResult commandResult \u003d new AddOnCommand(validModule).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(String.format(AddOnCommand.MESSAGE_SUCCESS, validModule), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.student.getModules());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module validModule \u003d ACC1002X;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddOnCommand addOnCommand \u003d new AddOnCommand(validModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        AddOnCommandTest.ModelStub modelStub \u003d new AddOnCommandTest.ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expectMessage(AddOnCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        addOnCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void saveConfigFile(Config c) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStubWithModule extends AddOnCommandTest.ModelStub {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        private final ModuleList moduleList \u003d TypicalModules.getTypicalModuleList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return moduleList.getModuleInformation(module);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends AddOnCommandTest.ModelStub {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final ModuleList moduleList \u003d TypicalModules.getTypicalModuleList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return student.hasModule(module);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            student.addModule(module);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return moduleList.getModuleInformation(module);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 267
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ClearCommand(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ClearCommand(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 25,
      "-": 34,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalModuleList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalAddressBook(), new UserPrefs(), new CredentialStore(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new ConfigStore());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 8,
      "-": 177,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalModuleList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalAddressBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new UserPrefs(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new CredentialStore(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new ConfigStore());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 13,
      "-": 246,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model \u003d new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalModuleList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        getTypicalAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new CredentialStore(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new ConfigStore());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(), new"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 8,
      "-": 85,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GenerateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for GenerateCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class GenerateCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getModuleList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getAddressBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new GenerateCommand(), model, commandHistory, GenerateCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 14,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getModuleList(), model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                        new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 3,
      "-": 42,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 3,
      "-": 50,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.getTypicalCredentialStore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * RegisterCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommandIntegrationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ModuleList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new AddressBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalCredentialStore(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model.setCurrentUser(new StudentBuilder().build());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void executeNewCredentialSuccess() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential validCredential \u003d new Credential(\"u\", \"p\", \"k\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User dummyUser \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ModuleList(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new AddressBook(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalCredentialStore(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        expectedModel.addCredential(validCredential);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandSuccess(new RegisterCommand(validCredential, dummyUser), model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            String.format(RegisterCommand.MESSAGE_SUCCESS, validCredential), expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void executeDuplicateCredentialThrowsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertCommandFailure(new RegisterCommand(CREDENTIAL_STUDENT_MAX, model.getCurrentUser()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            commandHistory,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            RegisterCommand.MESSAGE_DUPLICATE_USERNAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalUsers.STUDENT_MAX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalUsers.STUDENT_SEB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.CredentialBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RegisterCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructorNullCredentialThrowsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new RegisterCommand(null, STUDENT_MAX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructorNullUserThrowsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new RegisterCommand(new CredentialBuilder().build(), null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential maxCredential \u003d CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Credential sebCredential \u003d CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User maxUser \u003d STUDENT_MAX;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        User sebUser \u003d STUDENT_SEB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RegisterCommand registerMaxCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new RegisterCommand(maxCredential, maxUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RegisterCommand registerSebCommand \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new RegisterCommand(sebCredential, sebUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(registerMaxCommand.equals(registerMaxCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RegisterCommand registerMaxCommandCopy \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new RegisterCommand(maxCredential, maxUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(registerMaxCommand.equals(registerMaxCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(registerMaxCommand.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(registerMaxCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(registerMaxCommand.equals(registerSebCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemoveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalModules.ACC1002;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class RemoveCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new RemoveCommand(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleAcceptedByModel_removeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module validModule \u003d ACC1002;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RemoveCommandTest.ModelStubForTest modelStub \u003d new RemoveCommandTest.ModelStubForTest(validModule);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CommandResult commandResult \u003d new RemoveCommand(validModule).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(String.format(RemoveCommand.MESSAGE_REMOVE_MODULE_SUCCESS, validModule),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertFalse(modelStub.student.hasModule(validModule));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleNotFound_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module validModule \u003d ACC1002;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RemoveCommand removeCommand \u003d new RemoveCommand(validModule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        RemoveCommandTest.ModelStub modelStub \u003d new RemoveCommandTest.ModelStubForTest();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expectMessage(RemoveCommand.MESSAGE_MODULE_NOT_EXISTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        removeCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void saveConfigFile(Config c) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A Model stub that always accept the person being removed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStubForTest extends RemoveCommandTest.ModelStub {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final ModuleList moduleList \u003d TypicalModules.getTypicalModuleList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ModelStubForTest(Module module) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            student.addModule(module);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ModelStubForTest() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return student.hasModule(module);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            student.removeModule(module);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return moduleList.getModuleInformation(module);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 251
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SaveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.testutil.ConfigBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class SaveCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "        new SaveCommand(null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Config config \u003d new ConfigBuilder().withData(\"Some data\".getBytes()).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": "        SaveCommand configSaveCommand \u003d new SaveCommand(config);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertTrue(configSaveCommand.equals(configSaveCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "        SaveCommand addConfigSaveCommandCopy \u003d new SaveCommand(config);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertTrue(addConfigSaveCommandCopy.equals(addConfigSaveCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertFalse(configSaveCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "etjk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertFalse(configSaveCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SaveIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.testutil.ConfigBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SaveCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class SaveIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        model \u003d new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalModuleList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            getTypicalAddressBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public void execute_saveConfig_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "etjk"
        },
        "content": "        Config validConfig \u003d new ConfigBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Model expectedModel \u003d new ModelManager("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getModuleList(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            model.getAddressBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new CredentialStore(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new ConfigStore());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "etjk"
        },
        "content": "        expectedModel.saveConfigFile(validConfig);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "etjk"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "etjk"
        },
        "content": "        assertCommandSuccess(new SaveCommand(validConfig), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "etjk"
        },
        "content": "                String.format(SaveCommand.MESSAGE_SUCCESS, validConfig), expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 14,
      "etjk": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.ReadOnlyCredentialStore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new SearchCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleSearched_successful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module validModule \u003d new Module(\"ACC\", \" \", \" \", \" \", 0, false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        SearchCommandTest.ModelStubForTest modelStub \u003d new SearchCommandTest.ModelStubForTest();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CommandResult commandResult \u003d new SearchCommand(validModule).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_MODULE_LISTED_OVERVIEW, 2), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public void execute_moduleNotFound() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Module validModule \u003d new Module(\"GEH\", \" \", \" \", \" \", 0, false,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        SearchCommandTest.ModelStubForTest modelStub \u003d new SearchCommandTest.ModelStubForTest();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CommandResult commandResult \u003d new SearchCommand(validModule).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_MODULE_LISTED_OVERVIEW, 0), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addAdmin(Admin admin) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean isAdmin() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void removeModule(Module module) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyModuleList getModuleList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void addCredential(Credential credential) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public boolean hasCredential(Credential credential) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public ReadOnlyCredentialStore getCredentialStore() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void setCurrentUser(User user) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public User getCurrentUser() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void saveConfigFile(Config c) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public Optional\u003cModule\u003e searchModuleInModuleList(Module module) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * A Model stub that always accept the person being removed."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private class ModelStubForTest extends SearchCommandTest.ModelStub {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        final ModuleList moduleList \u003d TypicalModules.getTypicalModuleList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        public List\u003cModule\u003e searchKeyWordInModuleList(Module keyword) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            return moduleList.searchKeyword(keyword);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 224
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 3,
      "-": 119,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalModuleList(), getTypicalAddressBook(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new UserPrefs(), new CredentialStore(), new ConfigStore());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 3,
      "-": 46,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 4,
      "-": 204
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Test scope: similar to {@code RemoveCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * @see RemoveCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_MAX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import static seedu.address.testutil.TypicalCredentials.CREDENTIAL_STUDENT_SEB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.testutil.CredentialStoreBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.ModuleListBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModuleList moduleList \u003d new ModuleListBuilder().withModule(CS1010).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "etjk"
        },
        "content": "        ConfigStore configStore \u003d new ConfigStore();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore credentialStore \u003d new CredentialStoreBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withCredentials(CREDENTIAL_STUDENT_MAX)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withCredentials(CREDENTIAL_STUDENT_SEB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore differentCredentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        modelManager \u003d new ModelManager(moduleList, addressBook, userPrefs,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStore, configStore);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(moduleList,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            addressBook, userPrefs, credentialStore, configStore);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(moduleList, differentAddressBook, userPrefs,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                                                        differentCredentialStore, configStore)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // ModelManager test \u003d new ModelManager(moduleList, addressBook, userPrefs,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // credentialStore, configStore);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        // assertFalse(modelManager.equals(new ModelManager(moduleList, addressBook, userPrefs,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        //                                                  credentialStore, configStore)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(moduleList,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            addressBook, differentUserPrefs, credentialStore, configStore)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 21,
      "-": 79,
      "etjk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.ModuleListChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModuleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyModuleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlModuleListStorage moduleListStorage \u003d new XmlModuleListStorage(getTempFilePath(\"modulelist\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlCredentialStoreStorage credentialStoreStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            new XmlCredentialStoreStorage(getTempFilePath(\"cd\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        XmlConfigStoreStorage configStoreStorage \u003d new XmlConfigStoreStorage(getTempFilePath(\"c\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            moduleListStorage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            addressBookStorage,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            userPrefsStorage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            credentialStoreStorage,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            configStoreStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlModuleListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlCredentialStoreStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlConfigStoreStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void moduleListReadSave() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlModuleListStorage} class."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlModuleListStorageTest}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ModuleList original \u003d getTypicalModuleList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveModuleList(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyModuleList retrieved \u003d storageManager.readModuleList().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new ModuleList(retrieved));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getModuleListFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getModuleFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleModuleListChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Storage storage \u003d new StorageManager("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlModuleListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlCredentialStoreStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "                new XmlConfigStoreStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleModuleListChangedEvent(new ModuleListChangedEvent(new ModuleList()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class for ModuleList to throw an exception when the save method is called"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlModuleListStorageExceptionThrowingStub extends XmlModuleListStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlModuleListStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveModuleList(ReadOnlyModuleList moduleList, Path filePath) throws"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 19,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AdminBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Builds a Admin user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class AdminBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"John Doe\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Role DEFAULT_ROLE \u003d Role.ADMIN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_PIC \u003d \" \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final int DEFAULT_SALARY \u003d 3000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_EMPLOYEDDATE \u003d \"1/1/2018\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String pic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private int salary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String employedDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        role \u003d DEFAULT_ROLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        pic \u003d DEFAULT_PIC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        salary \u003d DEFAULT_SALARY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        employedDate \u003d DEFAULT_EMPLOYEDDATE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Initializes the AdminBuilder with the data of {@code adminToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder(Admin adminToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d adminToCopy.getUsername();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        name \u003d adminToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        role \u003d adminToCopy.getRole();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        pic \u003d adminToCopy.getPathToProfilePic();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        salary \u003d adminToCopy.getSalary();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        employedDate \u003d adminToCopy.getEmploymentDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code name} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code Role} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withRole(Role role) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code pic} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withPic(String path) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.pic \u003d path;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code salary} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withSalary(int salary) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code employedDate} of the {@code Admin} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public AdminBuilder withEmployedDate(String date) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.employedDate \u003d date;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Admin build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new Admin(username, name, role, pic, salary, employedDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ConfigBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": " * A utility class to help with building Config objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class ConfigBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final String DEFAULT_DATA \u003d \"Some data\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private byte[] data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public ConfigBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.data \u003d DEFAULT_DATA.getBytes();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Initializes the ConfigBuilder with the data of {@code configToStore}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public ConfigBuilder(Config configToStore) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.data \u003d configToStore.getConfigData();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Sets the {@code data} of the {@code Config} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public ConfigBuilder withData(byte[] data) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "etjk"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public Config build() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new Config(data);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CredentialBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class to help with building Credential objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class CredentialBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"lewis\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"hamilton44\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_KEY \u003d \"randomKeyLewis44\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d DEFAULT_USERNAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        password \u003d DEFAULT_PASSWORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        key \u003d DEFAULT_KEY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Initializes the CredentialBuilder with the data of {@code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * credentialToCopy}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder(Credential credentialToCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d credentialToCopy.getUsername();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d credentialToCopy.getPassword();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d credentialToCopy.getKey();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code username} of the {@code Credential} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder withUsername(String withUsername) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d withUsername;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code password} of the {@code Credential} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder withPassword(String withPassword) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.password \u003d withPassword;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code key} of the {@code Credential} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialBuilder withKey(String withKey) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.key \u003d withKey;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Credential build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new Credential(this.username, this.password, this.key);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CredentialStoreBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class to help with building CredentialStore objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * {@code CredentialStore cs \u003d new CredentialStoreBuilder()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * .withCredential(newCredential).build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class CredentialStoreBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private CredentialStore credentialStore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStoreBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore \u003d new CredentialStore();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStoreBuilder(CredentialStore credentialStore) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.credentialStore \u003d credentialStore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Adds a new {@code Credential} to the {@code CredentialStore} that we are"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStoreBuilder withCredentials(Credential cred) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        credentialStore.addCredential(cred);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public CredentialStore build() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return credentialStore;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Max Verstappen\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"max33\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_PROFILE_PIC_FILEPATH \u003d \"redbull\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Role DEFAULT_ROLE \u003d Role.STUDENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final String DEFAULT_ENROLLMENT_DATE \u003d \"15/03/2015\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_MAJOR \u003d Arrays.asList(\"CS\", \"DA\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final List\u003cString\u003e DEFAULT_MINOR \u003d Arrays.asList(\"MA\", \"BA\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String profilePicFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private String enrollmentDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private List\u003cString\u003e major;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private List\u003cString\u003e minor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        username \u003d DEFAULT_USERNAME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        role \u003d DEFAULT_ROLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        profilePicFilePath \u003d DEFAULT_PROFILE_PIC_FILEPATH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        enrollmentDate \u003d DEFAULT_ENROLLMENT_DATE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        major \u003d DEFAULT_MAJOR;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        minor \u003d DEFAULT_MINOR;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code username} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code profilePicFilePath} of the {@code Student} that we are"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withProfilePicFilePath(String pathToPic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.profilePicFilePath \u003d pathToPic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code enrollmentDate} of the {@code Student} that we are"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withEnrollmentDate(String enrollmentDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.enrollmentDate \u003d enrollmentDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code majors} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withMajor(List\u003cString\u003e inputMajor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.major \u003d inputMajor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Sets the {@code minors} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public StudentBuilder withMinor(List\u003cString\u003e inputMinor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        this.minor \u003d inputMinor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Builds the actual Student with its respective attributes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new Student(username, name, role, profilePicFilePath,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            enrollmentDate, major, minor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAdmins.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Admin;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Role;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A list of typical admin."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class TypicalAdmins {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Admin ALICE \u003d new AdminBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withRole(Role.ADMIN).withPic(\"alice@example.com\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withSalary(3000)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withEmployedDate(\"1/1/2000\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Admin BRAD \u003d new AdminBuilder().withName(\"Brad Bread\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withRole(Role.ADMIN).withPic(\"brad@example.com\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withSalary(3500)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withEmployedDate(\"1/1/2006\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Admin MORGAN \u003d new AdminBuilder().withName(\"Morgan More\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withRole(Role.ADMIN).withPic(\"morgan@example.com\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withSalary(4000)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withEmployedDate(\"1/4/2010\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalConfig.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "etjk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.Config;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "etjk"
        },
        "content": "import seedu.address.model.ConfigStore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "etjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "etjk"
        },
        "content": " * A utility class containing a {@code Config} object to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "etjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "etjk"
        },
        "content": "public class TypicalConfig {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static final Config DATA \u003d new ConfigBuilder().withData(\"data1\".getBytes()).build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "etjk"
        },
        "content": "    private TypicalConfig() {} // prevents instantiation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "etjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "etjk"
        },
        "content": "     * Returns an {@code ConfigStore} with all the typical Config."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "etjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static ConfigStore getTypicalConfigStore() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return getTypicalConfigStore();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "etjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "etjk"
        },
        "content": "    public static Config getTypicalConfig() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "etjk"
        },
        "content": "        return new Config(DATA.getConfigData());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "etjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "etjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "etjk": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCredentials.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.Credential;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.credential.CredentialStore;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class containing a list of {@code Credential} objects to be used"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class TypicalCredentials {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Credential CREDENTIAL_STUDENT_MAX \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new CredentialBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withUsername(\"max\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withPassword(\"verstappen33\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withKey(\"randomKeyMax33\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Credential CREDENTIAL_STUDENT_SEB \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        new CredentialBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withUsername(\"seb\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withPassword(\"vettel5\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .withKey(\"randomKeySebestian5\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private TypicalCredentials() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns a {@code CredentialStore} with all the typical credentials."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static CredentialStore getTypicalCredentialStore() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        CredentialStore cs \u003d new CredentialStore();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        for (Credential credential : getTypicalCredentials()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            cs.addCredential(credential);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return cs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private static List\u003cCredential\u003e getTypicalCredentials() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CREDENTIAL_STUDENT_MAX, CREDENTIAL_STUDENT_SEB));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalUsers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * A utility class containing a list of {@code User} objects to be used in"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " * tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "public class TypicalUsers {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Student STUDENT_MAX \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public static final Student STUDENT_SEB \u003d new StudentBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withName(\"Sebestian Vettel\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withUsername(\"vettel5\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withProfilePicFilePath(\"ferrari\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withEnrollmentDate(\"17/06/2007\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withMajor(Arrays.asList(\"CS\", \"BA\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        .withMinor(Arrays.asList(\"IS\", \"MA\")).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    // private static final User ADMIN_TOTO \u003d new AdminBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    private TypicalUsers() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     * Returns a {@code List\u003cUser\u003e} with all the typical users."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    public List\u003cUser\u003e getTypicalUsers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(STUDENT_MAX, STUDENT_SEB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 5,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CrimsonJacket"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withTags().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CrimsonJacket": 1,
      "-": 71
    }
  }
]
