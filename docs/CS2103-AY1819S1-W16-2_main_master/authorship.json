[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003d SocialCare"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W16-2/main[image:https://travis-ci.org/CS2103-AY1819S1-W16-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "https://ci.appveyor.com/project/Kratious/main[image:https://ci.appveyor.com/api/projects/status/suon744fyw9kqi3x?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W16-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W16-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* This is a desktop social welfare event and volunteer management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* The target audience is social welfare organisations that want to better manage their volunteers \u0026 events, and gain further statistical insights from the data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "** Manage contacts and events faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "** Use tags to categorize events and volunteers"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "** Support more fields for volunteers, such as number of volunteer hours"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "** View volunteer and event statistics and derive insights from them"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "* This application is based on https://github.com/nus-cs2103-AY1819S1/addressbook-level4[Address Book - Level 4] developed by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "the https://se-edu.github.io/docs/Team.html[se-edu] team."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Kratious": 13,
      "-": 27
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Afiq Lattif"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::afiqlattif.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "{empty}[https://github.com/afiqlattif[github]] [\u003c\u003cafiqlattif#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Volunteer Management Feature"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Sem Jing Han"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::kratious.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/kratious[github]] [\u003c\u003csemjinghan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Event Management Feature"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Amabel Yeo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::imarbles.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "{empty}[https://github.com/iMarbles[github]] [\u003c\u003camabelyeo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Assignment of Volunteers Feature"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Thangavel Sharan"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "image::sharan8.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "{empty}[https://github.com/sharan8[github]] [\u003c\u003cthangavelsharan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Statistics Feature"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Ngoh Wen Jun"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image::yl_coder.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "{empty}[https://github.com/Scrubbius[github]] [\u003c\u003cngohwenjun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Responsibilities: Data Management Feature"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 19,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d SocialCare - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "By: `Team W16-2`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare morphs the given AB4 application into a volunteer management system that allows Social Welfare Organisations to better manage their volunteers \u0026 events, and gain further statistical insights from the data. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare is for organizations which *prefer to use a desktop app for managing their volunteers.* More importantly, SocialCare is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SocialCare can get your volunteer and event management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".  Download the latest `socialcare.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for SocialCare."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Items in square brackets are optional e.g `[n/NAME]`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/charity`, `t/charity t/help` etc."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Restores the system to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Undoable commands: those commands that modify the system\u0027s content (`add`, `edit`, and `delete`)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Clears all entries from the volunteers or events, depending on context. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Switching context : `switch`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Switches context to volunteers or events +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `switch`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* A context refers to the management screen that users will see."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Switch would switch the data view and allow the user to switch between two distinct entities: volunteers and events."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `switch -e` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Switches to the event context"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `switch -v` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Switches to the volunteers context"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Volunteer Management"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Register new volunteer: `add`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer to the system when in the volunteers context +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `add n/NAME b/BIRTHDAY g/GENDER a/ADDRESS e/EMAIL p/PHONE_NUMBER [t/TAG]...`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Birthday is in the \u0027DD-MM-YYYY format\u0027"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* A volunteer can have any number of tags (including 0)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add n/John Doe b/05-08-1995 g/M a/Yishun Block 62 p/87183749 e/John@gmail.com`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add n/Betty Sue b/31-12-1995 g/M a/Ang Mo Kio Block 62 p/81749272 e/Betty@gmail.com t/Longtime t/Helpful`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all volunteers : `list`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Lists all volunteers in the system when in the volunteers context. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Editing volunteers details : `edit`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Edit details of an existing volunteer in the system when in the volunteers context. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `edit INDEX [n/NAME] [b/BIRTHDAY] [g/GENDER] [a/ADDRESS] [e/EMAIL] [p/PHONE_NUMBER] [t/TAG]...`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Edits the volunteer at the specified `INDEX`. The index refers to the index number shown in the displayed volunteer list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* When editing tags, the existing tags of the volunteer will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* You can remove all the volunteer\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `edit 1 n/John Doe` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Edits the name of the volunteer at index 1"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting volunteer details : `delete`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes details of an existing volunteer in the system when in the volunteer context. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes the details of the volunteer specified at index 1"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Event Management"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Add new event: `add`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds an event to the system when in the event context +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `add n/NAME l/LOCATION sd/START_DATE ed/END_DATE d/DESCRIPTION [t/TAG]...`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Start date and end dates are in the \u0027DD-MM-YYYY format\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* An event can have any number of tags (including 0)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add n/Flag Day l/Yishun MRT S sd/31-10-2018 ed/31-10-2018 d/For the children\u0027s home`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add n/Fundraising l/Tampines S sd/31-09-2018 ed/31-09-2018 d/Raising funds  t/fundraiser t/charity`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all events : `list`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Lists all events in the system when in the events context. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Editing event details : `edit`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Edit details of an existing event in the system when in the event context. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `edit INDEX [n/NAME] [l/LOCATION] [sd/START_DATE] [ed/END_DATE] [d/DESCRIPTION] [t/TAG]...`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Edits the event at the specified `INDEX`. The index refers to the index number shown in the displayed event list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* When editing tags, the existing tags of the event will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* You can remove all the event\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `edit 1 n/Charity Fun Run t/` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Edits the name of event at index 1 and removes all tags"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting event details : `delete`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes details of an existing event in the system when in the event context. +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes the details of the event specified at index 1"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Record Management"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d View event\u0027s volunteer records: `manage`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Switches context to event and display volunteers at the side bar. Can only be executed in event context. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `manage EVENT_INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `manage 1` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "View the list of volunteers assigned to event at index 1"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Add volunteer to event: `add`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer to the event that is currently being managed. +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `add VOLUNTEER_INDEX [h/HOURS] [r/REMARKS]`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* This command is executed after the \u0027manage\u0027 command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* VOLUNTEER_INDEX comes from the global pool of volunteers."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add 1` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer at index 1 to the event with 0 hours"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add 1 r/Vegetarian` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer at index 1 to the event with 0 hours with remarks of \u0027Vegetarian\u0027"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `add 3 h/5` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Adds a volunteer at index 3 to the event with 5 hours"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Update volunteer hours: `edit`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Update number of hours for volunteer in the event that is currently being managed. +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `edit [-a] [VOLUNTEER_INDEX] h/HOURS [r/REMARKS]`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* This command is executed after the \u0027manage\u0027 command."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* VOLUNTEER_INDEX comes from the table view of existing volunteers."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* VOLUNTEER_INDEX is only optional when \u0027-a\u0027 is entered."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* Entering just `r/` would result in remarks being deleted."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `edit -a h/5` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Updates amount of hours volunteered for all existing volunteers in the event to 5 hours"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `edit 3 h/5 r/Emcee` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Updates amount of hours volunteered for volunteer at index 3 to 5 hours with remarks of \u0027Emcee\u0027"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Delete volunteer record from event: `delete`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes the volunteer record from the event that is currently being managed. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Format: `delete VOLUNTEER_INDEX`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* This command is executed after the \u0027manage\u0027 command."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* VOLUNTEER_INDEX comes from the table view of existing volunteers."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "Deletes the volunteer record of the volunteer at index 1."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous SocialCare folder."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Commands Summary"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Switching Context* : `switch` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `switch -e`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Volunteer Management"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Add* `add n/NAME b/BIRTHDAY g/GENDER a/ADDRESS e/EMAIL p/PHONE_NUMBER [t/TAG]...` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `add n/John Doe b/05-08-1995 g/M a/Yishun Block 62 p/87183749 e/John@gmail.com`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME][b/BIRTHDAY] [g/GENDER] [a/ADDRESS] [e/EMAIL] [p/PHONE_NUMBER] [t/TAG]...` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Event Management"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Add* `add n/NAME l/LOCATION sd/START_DATE ed/END_DATE d/DESCRIPTION [t/TAG]...` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `add n/Fundraising l/Tampines S sd/31-09-2018 ed/31-09-2018 d/Raising funds  t/fundraiser t/charity`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [l/LOCATION] [sd/START_DATE] [ed/END_DATE] [d/DESCRIPTION] [t/TAG]...` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `edit 2 n/Fundraiser`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d\u003d Record Management"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Manage* `manage EVENT_INDEX` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `manage 1`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Add* `add [h/HOURS] VOLUNTEER_INDEX...` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `add h/5 1 2 3`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Edit* `edit [-a] h/HOURS [VOLUNTEER_INDEX]...` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `edit h/5 1 2 3`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Delete* `delete VOLUNTEER_INDEX` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "e.g. `delete 1`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iMarbles": 232,
      "-": 137
    }
  },
  {
    "path": "docs/team/afiqlattif.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Afiq Lattif - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare morphs the given AddressBook - Level 4 application into a volunteer management system that allows Social Welfare Organisations to better manage their volunteers \u0026 events, and gain further statistical insights from the data. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 72
    }
  },
  {
    "path": "docs/team/amabelyeo.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Amabel Yeo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare morphs the given AddressBook - Level 4 application into a volunteer management system that allows Social Welfare Organisations to better manage their volunteers \u0026 events, and gain further statistical insights from the data. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 72
    }
  },
  {
    "path": "docs/team/ngohwenjun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Ngoh Wen Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare morphs the given AddressBook - Level 4 application into a volunteer management system that allows Social Welfare Organisations to better manage their volunteers \u0026 events, and gain further statistical insights from the data. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 72
    }
  },
  {
    "path": "docs/team/semjinghan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Sem Jing Han - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare morphs the given AddressBook - Level 4 application into a volunteer management system that allows Social Welfare Organisations to better manage their volunteers \u0026 events, and gain further statistical insights from the data. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 72
    }
  },
  {
    "path": "docs/team/thangavelsharan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d Thangavel Sharan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: SocialCare"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "SocialCare morphs the given AddressBook - Level 4 application into a volunteer management system that allows Social Welfare Organisations to better manage their volunteers \u0026 events, and gain further statistical insights from the data. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String appTitle \u003d \"SocialCare\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText, model.getContextId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches the context of the system \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + PREFIX_SWITCH + \"CONTEXT_ID\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            + PREFIX_SWITCH + Context.VOLUNTEER_CONTEXT_ID;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Context switched to %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final String contextId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public SwitchCommand(String contextToSwitch) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(contextToSwitch);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        contextId \u003d contextToSwitch;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        model.setCurrentContext(contextId);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, model.getContextName()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param contextId the current context"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Command parseCommand(String userInput, String contextId) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Shared Commands"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Executes commands for events"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(Context.EVENT_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            // Replace all these commands"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Executes commands for volunteers"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(Context.VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            // Replace all these commands"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Execute commands for records"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(Context.RECORD_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 46,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /* Switch Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Prefix PREFIX_SWITCH \u003d new Prefix(\"-\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /* Person Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /* Record Prefix definitions */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Prefix PREFIX_RECORD_HOUR \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Prefix PREFIX_RECORD_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses a {@code String commandName} into a {@code String}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the given {@code commandName} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static String parseCommandId(String commandId) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(commandId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!Context.isValidContextId(commandId)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(Context.MESSAGE_CONTEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return commandId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 16,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SwitchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * and returns an SwitchCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SWITCH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SWITCH)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String contextName \u003d ParserUtil.parseCommandId(argMultimap.getValue(PREFIX_SWITCH).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new SwitchCommand(contextName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson and .isSameRecord comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final UniqueRecordList records;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the contents of the record list with {@code records}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code records} must not contain duplicate records."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.records.setRecords(records);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        setRecords(newData.getRecordList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds an event to the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The event must not already exist in the address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void addEvent(Event e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// record-level operations"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the database."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return records.contains(record);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds a record to the address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record must not already exist in the database"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void addRecord(Record r) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records.add(r);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the given record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the database."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code key} must exist in the database."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void removeRecord(Record key) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records.remove(key);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons. \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                + events.asUnmodifiableObservableList().size() + \" events. \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                + records.asUnmodifiableObservableList() + \" records. \";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return records.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 events.equals(((AddressBook) other).events))"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 records.equals((((AddressBook) other).records));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Objects.hash(persons, events, records);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 30,
      "iMarbles": 87,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Context.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.hash;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Represents a Context in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContextId(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Context {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String EVENT_CONTEXT_ID \u003d \"e\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VOLUNTEER_CONTEXT_ID \u003d \"v\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String RECORD_CONTEXT_ID \u003d \"r\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String EVENT_CONTEXT_NAME \u003d \"events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VOLUNTEER_CONTEXT_NAME \u003d \"volunteers\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String RECORD_CONTEXT_NAME \u003d \"volunteer records\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_CONTEXT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            \"Context can only be \" + PREFIX_SWITCH + EVENT_CONTEXT_ID + \" or \" + PREFIX_SWITCH + VOLUNTEER_CONTEXT_ID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String contextId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String contextName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs an {@code Context}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param contextId A valid context string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Context(String contextId, String contextName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(contextId);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidContextId(contextId), MESSAGE_CONTEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextId \u003d contextId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextName \u003d contextName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets a context"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setContextValue(String contextId) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(contextId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidContextId(contextId), MESSAGE_CONTEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextId \u003d contextId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(EVENT_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            contextName \u003d EVENT_CONTEXT_NAME;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contextId.equals(VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            contextName \u003d VOLUNTEER_CONTEXT_NAME;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the context id"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getContextId() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return contextId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the context name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getContextName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return contextName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * External command to switch to manage context"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void switchToRecordContext() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextId \u003d RECORD_CONTEXT_ID;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.contextName \u003d RECORD_CONTEXT_NAME;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a given contextId is a valid contextId."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static boolean isValidContextId(String test) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (test.equals(EVENT_CONTEXT_ID) || test.equals(VOLUNTEER_CONTEXT_ID)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return \"Context Id: \" + contextId + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                + \"Context Name: \" + contextName;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof Context // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 contextId.equals(((Context) other).contextId)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 contextName.equals(((Context) other).contextName)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return hash(contextId, contextName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Context Switching Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the context"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void setCurrentContext(String contextId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the context Id"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    String getContextId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns context name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    String getContextName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Person Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Event Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event must exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Adds the given event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code event} must not already exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    void updateEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the filtered event list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Record Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the database."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    boolean hasRecord(Record record);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Deletes the given record."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record must exist in the database."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void deleteRecord(Record target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds the given record."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code record} must not already exist in the database."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void addRecord(Record record);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the given record {@code target} with {@code editedRecord}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code target} must exist in the database."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the database."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void updateRecord(Record target, Record editedRecord);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the filtered record list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Updates the filter of the filtered record list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Undo/Redo Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 34,
      "iMarbles": 80,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Context context;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final FilteredList\u003cRecord\u003e filteredRecords;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        context \u003d new Context(Context.EVENT_CONTEXT_ID, Context.EVENT_CONTEXT_NAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedAddressBook.getEventList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        filteredRecords \u003d new FilteredList\u003c\u003e(versionedAddressBook.getRecordList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Context Switching Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setCurrentContext(String contextId) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(contextId);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        context.setContextValue(contextId);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getContextId() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return context.getContextId();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String getContextName() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return context.getContextName();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Person List Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Event List Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return versionedAddressBook.hasEvent(event);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        versionedAddressBook.removeEvent(target);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        versionedAddressBook.addEvent(event);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        versionedAddressBook.updateEvent(target, editedEvent);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEvents);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Record List Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return versionedAddressBook.hasRecord(record);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        versionedAddressBook.removeRecord(target);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void addRecord(Record record) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        versionedAddressBook.addRecord(record);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        versionedAddressBook.updateRecord(target, editedRecord);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Record} backed by the internal list of"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredRecords);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        filteredRecords.setPredicate(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 33,
      "iMarbles": 83,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an unmodifiable view of the records list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This list will not contain any duplicate records."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 6,
      "iMarbles": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s date in the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Event dates can take in DD-MM-YYYY input, and should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * First character of DD must be 0-3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * First character of MM must be 0 or 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Regex not enough to check for valid dates. Need to use a SimpleDateFormat parser as well."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[0-3]\\\\d-[01]\\\\d-\\\\d{4}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param date A valid Date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        SimpleDateFormat df \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        df.setLenient(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            df.parse(test);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if current date falls on an earlier date or on the same date as the other date."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean isLessThanOrEqualTo(Date otherDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (otherDate \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String[] dateParts \u003d this.toString().split(\"-\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        //parseInt ignores leading zeros like 01 or 09 when converting from String to int"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int year \u003d Integer.parseInt(dateParts[2]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int month \u003d Integer.parseInt(dateParts[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int day \u003d Integer.parseInt(dateParts[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String[] otherDateParts \u003d otherDate.toString().split(\"-\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherYear \u003d Integer.parseInt(otherDateParts[2]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherMonth \u003d Integer.parseInt(otherDateParts[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherDay \u003d Integer.parseInt(otherDateParts[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (year \u003e otherYear) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //start year is more than end year"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (year \u003d\u003d otherYear \u0026\u0026 month \u003e otherMonth) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //same year but start month is more than end month"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (year \u003d\u003d otherYear \u0026\u0026 month \u003d\u003d otherMonth \u0026\u0026 day \u003e otherDay) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //same year, same month but start day is more than end day"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s description in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_START_END_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Start date should only be less than or equal to end date\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_START_END_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Start time should only be less than or equal to end time\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    //private final Id id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Date startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Time startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    //EventId to be added to constructor"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Event(Name name, Location location, Date startDate, Date endDate,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                 Time startTime, Time endTime, Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        //requireAllNonNull(id, name, location, startDate, endDate, description, tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(name, location, startDate, endDate, description, tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        //this.id \u003d id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidStartAndEndDate(startDate, endDate), MESSAGE_START_END_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidStartAndEndTime(startTime, endTime), MESSAGE_START_END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given start date is less than or equal to end date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidStartAndEndDate(Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return startDate.isLessThanOrEqualTo(endDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given start time is less than or equal to end time."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidStartAndEndTime(Time startTime, Time endTime) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return startTime.isLessThanOrEqualTo(endTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Time getStartTime() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if both Events of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 (otherEvent.getLocation().equals(getLocation()) || otherEvent.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    || otherEvent.getEndDate().equals(getEndDate()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * This defines a stronger notion of equality between two events."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return otherEvent.getName().equals(getName())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 otherEvent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Objects.hash(name, location, startDate, endDate, startTime, endTime, description, tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Location: \").append(getLocation())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Start Date: \").append(getStartDate())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" End Date: \").append(getEndDate())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Start Time.java: \").append(getStartTime())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" End Time.java: \").append(getEndTime())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Description: \").append(getDescription())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 175
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Location.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s location in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test.matches(LOCATION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Time.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Represents an Event\u0027s time in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            \"Event times can take in HH:mm input, and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * HH accepts 0-9, 1-9, 00-09, 10-19, 20-23"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * mm accepts 00-59"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"([01]?[0-9]|2[0-3]):[0-5][0-9]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code Time}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param time A valid Time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if current time occurs at an earlier period or at the same period as the other time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean isLessThanOrEqualTo(Time otherTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (otherTime \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String[] timeParts \u003d this.toString().split(\":\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        //parseInt ignores leading zeros like 01 or 09 when converting from String to int"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int minute \u003d Integer.parseInt(timeParts[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int hour \u003d Integer.parseInt(timeParts[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String[] otherTimeParts \u003d otherTime.toString().split(\":\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherMinute \u003d Integer.parseInt(otherTimeParts[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int otherHour \u003d Integer.parseInt(otherTimeParts[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (hour \u003e otherHour) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //start hour is more than end hour"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        } else if (hour \u003d\u003d otherHour \u0026\u0026 minute \u003e otherMinute) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            //same hour but start min is later than end min"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * unique in terms of identity in the UniqueEventList. However, the removal of a event uses Event#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * as to ensure that the event with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Adds an event to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Signals that the operation will result in duplicate Events (Events are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        super(\"Operation would result in duplicate event\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/EventId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * This is just a placeholder class for development purposes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Actual record EventId should come from the event package"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class EventId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_EVENTID_CONSTRAINTS \u003d \"EventId can take in numerals only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String EVENTID_VALIDATION_REGEX \u003d \"\\\\p{Digit}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param id A valid eventId."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public EventId(String id) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidEventId(id), MESSAGE_EVENTID_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.value \u003d id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a given string is a valid eventId."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static boolean isValidEventId(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return test.matches(EVENTID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof EventId // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 value.equals(((EventId) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Hour.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Represents an Hour in a record"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Guarantees: immutable; hour is valid as declared in {@link #isValidHour(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Hour {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_HOUR_CONSTRAINTS \u003d \"Hour can take in numerals only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String HOUR_VALIDATION_REGEX \u003d \"\\\\p{Digit}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param hour A valid hour."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Hour(String hour) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(hour);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidHour(hour), MESSAGE_HOUR_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.value \u003d hour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a given string is a valid hour."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static boolean isValidHour(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return test.matches(HOUR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof Hour // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 value.equals(((Hour) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Record.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Represents a volunteer\u0027s event record in application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final EventId eventId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final VolunteerId volunteerId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Hour hour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Record(EventId eventId, VolunteerId volunteerId, Hour hour, Remark remark) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(eventId, volunteerId, hour, remark);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public EventId getEventId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return eventId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public VolunteerId getVolunteerId() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return volunteerId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Hour getHour() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return hour;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if both records have the same eventId and volunteerId"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This defines a weaker notion of equality between two records."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean isSameRecord(Record otherRecord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (otherRecord \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return otherRecord !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getEventId().equals(getEventId())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getVolunteerId().equals(getVolunteerId());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if both records have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This defines a stronger notion of equality between two records."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return otherRecord.getEventId().equals(getEventId())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getVolunteerId().equals(getVolunteerId())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getHour().equals(getHour())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 otherRecord.getRemark().equals(getRemark());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Objects.hash(eventId, volunteerId, hour, remark);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        builder.append(\"Event Id: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(getEventId())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(\" Volunteer Id: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(getVolunteerId())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(\" Hour: \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(getHour())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .append(getRemark());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/Remark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Represents a Remark in a record"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Guarantees: immutable; remark is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d \"Remarks can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.value \u003d remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return test.matches(REMARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/UniqueRecordList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * A list of records that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * A record is considered unique by comparing using {@code Record#isSameRecord(Record)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * records uses Record#isSameRecord(Record) for equality so as to ensure that the record being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * unique in terms of identity in the UniqueRecordList. However, the removal of a record uses Record#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * as to ensure that the record with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * @see Record#isSameRecord(Record)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class UniqueRecordList implements Iterable\u003cRecord\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean contains(Record toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds a record to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void add(Record toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record identity of {@code editedRecord} must not be the same as another existing record in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!target.isSameRecord(editedRecord) \u0026\u0026 contains(editedRecord)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Removes the equivalent record from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * The record must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void remove(Record toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords(UniqueRecordList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Replaces the contents of this list with {@code records}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * {@code records} must not contain duplicate records."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireAllNonNull(records);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!recordsAreUnique(records)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new DuplicateRecordException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        internalList.setAll(records);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Iterator\u003cRecord\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof UniqueRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecordList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if {@code records} contains only unique persons."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private boolean recordsAreUnique(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (int i \u003d 0; i \u003c records.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            for (int j \u003d i + 1; j \u003c records.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                if (records.get(i).isSameRecord(records.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/VolunteerId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * This is just a placeholder class for development purposes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Actual record VolunteerId should come from the volunteer package"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class VolunteerId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_VOLUNTEERID_CONSTRAINTS \u003d \"VolunteerId can take in numerals only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VOLUNTEERID_VALIDATION_REGEX \u003d \"\\\\p{Digit}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs a {@code VolunteerId}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param id A valid hour."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public VolunteerId(String id) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        checkArgument(isValidVolunteerId(id), MESSAGE_VOLUNTEERID_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.value \u003d id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns true if a given string is a valid volunteerId."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static boolean isValidVolunteerId(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return test.matches(VOLUNTEERID_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                || (other instanceof VolunteerId // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 value.equals(((VolunteerId) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/DuplicateRecordException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Signals that the operation will result in duplicate Records (Records are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class DuplicateRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public DuplicateRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        super(\"Operation would result in duplicate records\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/record/exceptions/RecordNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Signals that the operation is unable to find the specified record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Blood Donation Drive 2018\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new Location(\"750E Chai Chee Road\"), new Date(\"02-10-2018\"), new Date(\"05-10-2018\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new Time(\"11:30\"), new Time(\"17:30\"), new Description(\"Donation drive for blood.\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                getTagSet(\"Public\", \"Donation\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            new Event(new seedu.address.model.event.Name(\"Youth Humanitarian Challenge\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new Location(\"29 Havelock Road\"), new Date(\"28-09-2018\"), new Date(\"28-09-2018\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new Time(\"10:00\"), new Time(\"14:00\"), new Description(\"To engage youths in humanitarianism.\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                getTagSet(\"Competition\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            sampleAb.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 26,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * JAXB-friendly version of the Event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class XmlAdaptedEvent {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public XmlAdaptedEvent() {}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given event details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public XmlAdaptedEvent(String name, String location, String startDate, String endDate,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                           String startTime, String endTime, String description, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Converts a given Event into this class for JAXB use."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedEvent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public XmlAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startDate \u003d source.getStartDate().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endDate \u003d source.getEndDate().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startTime \u003d source.getStartTime().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endTime \u003d source.getEndTime().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        description \u003d source.getDescription().description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final List\u003cTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            eventTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                            Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Date.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Date modelStartDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Date.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Date modelEndDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Time.isValidTime(startTime)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Time modelStartTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Time.isValidTime(endTime)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Time modelEndTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(eventTags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Event(modelName, modelLocation, modelStartDate, modelEndDate, modelStartTime, modelEndTime,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                            modelDescription, modelTags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        if (!(other instanceof XmlAdaptedEvent)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent otherPerson \u003d (XmlAdaptedEvent) other;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(location, otherPerson.location)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(startDate, otherPerson.startDate)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(endDate, otherPerson.endDate)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, otherPerson.startTime)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(endTime, otherPerson.endTime)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 Objects.equals(description, otherPerson.description)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.EventId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.VolunteerId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class XmlAdaptedRecord {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String eventId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String volunteerId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String hour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs an XmlAdaptedRecord."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public XmlAdaptedRecord() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Constructs an {@code XmlAdaptedRecord} with the given record details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public XmlAdaptedRecord(String eventId, String volunteerId, String hour, String remark) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.eventId \u003d eventId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteerId \u003d volunteerId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Converts a given Record into this class for JAXB use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedRecord"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public XmlAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        eventId \u003d source.getEventId().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        volunteerId \u003d source.getVolunteerId().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        hour \u003d source.getHour().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Converts this jaxb-friendly adapted record object into the model\u0027s Record object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted record"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (eventId \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, EventId.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!EventId.isValidEventId(eventId)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(EventId.MESSAGE_EVENTID_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final EventId modelEventId \u003d new EventId(eventId);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (volunteerId \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, VolunteerId.class"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                    .getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!VolunteerId.isValidVolunteerId(volunteerId)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(VolunteerId.MESSAGE_VOLUNTEERID_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final VolunteerId modelVolunteerId \u003d new VolunteerId(volunteerId);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (hour \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!Hour.isValidHour(hour)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(Hour.MESSAGE_HOUR_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final Hour modelHour \u003d new Hour(hour);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new Record(modelEventId, modelVolunteerId, modelHour, modelRemark);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        if (!(other instanceof XmlAdaptedRecord)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord otherRecord \u003d (XmlAdaptedRecord) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return Objects.equals(eventId, otherRecord.eventId)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 Objects.equals(volunteerId, otherRecord.volunteerId)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 Objects.equals(hour, otherRecord.hour)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 Objects.equals(remark, otherRecord.remark);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"Record list contains duplicate record(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private List\u003cXmlAdaptedEvent\u003e events;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private List\u003cXmlAdaptedRecord\u003e records;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        records.addAll(src.getRecordList().stream().map(XmlAdaptedRecord::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     *                               in the {@code XmlAdaptedPerson} or {@code XmlAdaptedRecord}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (XmlAdaptedEvent e : events) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            Event event \u003d e.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (XmlAdaptedRecord r : records) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            Record record \u003d r.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (addressBook.hasRecord(record)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            addressBook.addRecord(record);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 events.equals(((XmlSerializableAddressBook) other).events)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                \u0026\u0026 records.equals(((XmlSerializableAddressBook) other).records);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 12,
      "iMarbles": 20,
      "-": 68
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eBlood Donation Drive 2018\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e750E Chai Chee Road\u003c/location\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e02-10-2018\u003c/startDate\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e05-10-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e11:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e17:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eDonation drive for blood.\u003c/description\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eDonation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003ePublic\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c!-- Event with same identity as Blood Donation Drive 2018 --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eBlood Donation Drive 2018\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e750E Chai Chee Road\u003c/location\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e02-10-2018\u003c/startDate\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e05-10-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e11:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e17:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eDonation drive for blood.\u003c/description\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eDonation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003ePublic\u003c/tagged\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 27
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateRecordAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e1\u003c/hour\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eEmcee\u003c/remark\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c!-- Record with same identity as first record--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e2\u003c/hour\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eDelivery man\u003c/remark\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 16
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c!-- Event with invalid start date field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eBlood Donation Drive 2018\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e750E Chai Chee Road\u003c/location\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e1234\u003c/startDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e05-10-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e11:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e17:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eDonation drive for blood.\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eDonation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003ePublic\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 15
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidRecordAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c!-- Record with invalid hour field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003eabc\u003c/hour\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eEmcee\u003c/remark\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalEventsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Event values as in TypicalEvents#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eBlood Donation Drive 2018\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e750E, Chai Chee Road, #08-111\u003c/location\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e02-10-2018\u003c/startDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e05-10-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e11:30\u003c/startTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e17:30\u003c/endTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eDonation drive for blood.\u003c/description\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eDonation\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003ePublic\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cname\u003eYouth Humanitarian Challenge\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003clocation\u003e29 Havelock Road\u003c/location\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartDate\u003e28-09-2018\u003c/startDate\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendDate\u003e28-09-2018\u003c/endDate\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cstartTime\u003e10:00\u003c/startTime\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cendTime\u003e14:00\u003c/endTime\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003cdescription\u003eTo engage youths in humanitarianism.\u003c/description\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        \u003ctagged\u003eCompetition\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Kratious": 25
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalRecordsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Record values as in TypicalRecords#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e1\u003c/eventId\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e1\u003c/hour\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eEmcee\u003c/remark\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e2\u003c/eventId\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e2\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e2\u003c/hour\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eDelivery man\u003c/remark\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003crecords\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003ceventId\u003e2\u003c/eventId\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cvolunteerId\u003e1\u003c/volunteerId\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003chour\u003e2\u003c/hour\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        \u003cremark\u003eFood delivery\u003c/remark\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    \u003c/records\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : SocialCare\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Context Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void setCurrentContext(String contextId) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public String getContextId() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public String getContextName() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void addRecord(Record record) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void updateRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 23,
      "iMarbles": 58,
      "-": 209
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_COMMANDID_EVENT \u003d \"e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_EVENTID_E1 \u003d \"1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_EVENTID_E2 \u003d \"2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_VOLUNTEERID_V1 \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_VOLUNTEERID_V2 \u003d \"2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_HOUR_H1 \u003d \"1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_HOUR_H2 \u003d \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_REMARK_R1 \u003d \"Emcee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String VALID_REMARK_R2 \u003d \"Delivery man\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_NAME_YOUTH \u003d \"Youth Humanitarian Challenge\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_LOCATION_YOUTH \u003d \"29 Havelock Road\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_START_DATE_YOUTH \u003d \"28-09-2018\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_END_DATE_YOUTH \u003d \"28-09-2018\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_START_TIME_YOUTH \u003d \"10:00\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_END_TIME_YOUTH \u003d \"14:00\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_DESCRIPTION_YOUTH \u003d \"To engage youths in humanitarianism.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_TAG_PUBLIC \u003d \"Public\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_TAG_DONATION \u003d \"Donation\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String VALID_TAG_COMPETITION \u003d \"Competition\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String CONTEXT_VALID_DESC \u003d \" \" + PREFIX_SWITCH + VALID_COMMANDID_EVENT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String CONTEXT_INVALID_DESC \u003d \" \" + PREFIX_SWITCH + \"i\"; // Not recognised"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 13,
      "Kratious": 11,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SwitchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.model.Context.EVENT_CONTEXT_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.model.Context.EVENT_CONTEXT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void execute_switch_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(Context.EVENT_CONTEXT_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS, EVENT_CONTEXT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedModel.setCurrentContext(EVENT_CONTEXT_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertCommandSuccess(switchCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SWITCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parseCommand_switch() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // TODO: Fix the parse for switch"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String cmd \u003d SwitchCommand.COMMAND_WORD + \" \" + PREFIX_SWITCH + Context.EVENT_CONTEXT_ID;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(cmd,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof SwitchCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                PersonUtil.getAddCommand(person),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                        + PersonUtil.getEditPersonDescriptorDetails(descriptor),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ExitCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof HelpCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof HelpCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            parser.parseCommand(\"histories\", Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ListCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof ListCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof RedoCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof RedoCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof UndoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                Context.VOLUNTEER_CONTEXT_ID) instanceof UndoCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        parser.parseCommand(\"\", Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        parser.parseCommand(\"unknownCommand\", Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 55,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String INVALID_CONTEXTID \u003d \"3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String VALID_CONTEXTID \u003d \"e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parseCommandId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCommandId(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parseCommandId_invalidContext_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCommandId(INVALID_CONTEXTID));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parseCommandId_validContext_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(VALID_CONTEXTID, ParserUtil.parseCommandId(VALID_CONTEXTID));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 17,
      "-": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SwitchCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTEXT_INVALID_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTEXT_VALID_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.Context;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class SwitchCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private SwitchCommandParser parser \u003d new SwitchCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid contextId"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertParseFailure(parser, CONTEXT_INVALID_DESC, Context.MESSAGE_CONTEXT_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CONTEXT_VALID_DESC,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_YOUTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HOUR_H2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_R2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getRecordList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Person Tests"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, null, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    //// Event Tests"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void resetData_withDuplicateEvents_throwsDuplicateEventsException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // Two events with the same identity fields"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(BLOOD, editedEvent);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(null, newEvents, null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.hasEvent(null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(addressBook.hasEvent(BLOOD));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.addEvent(BLOOD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(addressBook.hasEvent(BLOOD));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.addEvent(BLOOD);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedEvent \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(addressBook.hasEvent(editedEvent));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void getEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.getEventList().remove(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Record Tests"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void resetData_withDuplicateRecords_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // Two records with the same identity fields"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e newRecords \u003d Arrays.asList(R1, editedRecord);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(null, null, newRecords);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.hasRecord(null);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(addressBook.hasRecord(R1));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.addRecord(R1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(addressBook.hasRecord(R1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.addRecord(R1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(addressBook.hasRecord(editedRecord));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void getRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.getRecordList().remove(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        private final ObservableList\u003cRecord\u003e records \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cEvent\u003e events, Collection\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (persons !\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                this.persons.setAll(persons);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (events !\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                this.events.setAll(events);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            if (records !\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                this.records.setAll(records);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            return records;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 50,
      "iMarbles": 68,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ContextTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class ContextTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Context(null, null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_invalidContextId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String invalidContextId \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Context(invalidContextId, invalidContextId));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isValidContext() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null contextId"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Context.isValidContextId(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid contextId"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Context.isValidContextId(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Context.isValidContextId(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // valid contextId"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Context.isValidContextId(Context.EVENT_CONTEXT_ID));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Context.isValidContextId(Context.VOLUNTEER_CONTEXT_ID)); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.YOUTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Test switch"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setCurrentContext_nullContextId_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.setCurrentContext(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setCurrentContext_validContextId_assertTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.setCurrentContext(Context.EVENT_CONTEXT_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(modelManager.getContextId(), Context.EVENT_CONTEXT_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(modelManager.getContextName(), Context.EVENT_CONTEXT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.setCurrentContext(Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(modelManager.getContextId(), Context.VOLUNTEER_CONTEXT_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(modelManager.getContextName(), Context.VOLUNTEER_CONTEXT_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Test person"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Test event"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        modelManager.hasEvent(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(modelManager.hasEvent(BLOOD));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void hasEvent_eventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        modelManager.addEvent(BLOOD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(modelManager.hasEvent(BLOOD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.getFilteredEventList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Test Record"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.hasRecord(null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(modelManager.hasRecord(R1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void hasRecord_recordInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.addRecord(R1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(modelManager.hasRecord(R1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void getFilteredRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        modelManager.getFilteredRecordList().remove(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withEvent(BLOOD).withEvent(YOUTH)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withRecord(R1).withRecord(R2).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 53,
      "Kratious": 19,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // blank Date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"-12-2018\")); // missing day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31--2018\")); // missing month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02-05-\")); // missing year"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"123-08-2008\")); // invalid day with 3 characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02-123-2008\")); // invalid month with 3 characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02-12-20081\")); // invalid year with 5 characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"42-08-2008\")); // invalid day with first character 4"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"39-08-2020\")); // invalid day with first character 3"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"05-13-2020\")); // invalid month more than 12"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02--05-2018\")); // double dash between day and month"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02-05--2018\")); // double dash between month and year"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"02/05/2018\")); // invalid delimiter"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"29-02-2018\")); // non-leap year 2018"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-04-2018\")); // invalid day for April"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-06-2018\")); // invalid day for June"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-09-2018\")); // invalid day for September"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-11-2018\")); // invalid day for September"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid Date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"05-08-2018\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"01-01-2018\")); // first day of January"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"15-06-2018\")); // middle of June"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-2018\")); // last day of December"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-02-2020\")); // leap year 2020"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-02-2024\")); // leap year 2024"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Description.isValidDescription(\"To engage youths in humanitarianism.\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Singapore’s blood needs are currently shouldered by 1.8% of \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        + \"Singapore’s residential population. #BloodDonationDrive2018\")); // long description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_YOUTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_YOUTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_YOUTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_YOUTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_YOUTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_YOUTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_YOUTH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPETITION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.YOUTH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        event.getTags().remove(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidStartAndEndDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // BLOOD startDate - 02-10-2018"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // BLOOD endDate - 05-10-2018"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startDate before endDate -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isValidStartAndEndDate(BLOOD.getStartDate(), BLOOD.getEndDate()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startDate same as endDate -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withStartDate(BLOOD.getEndDate().toString()).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(editedBlood.isValidStartAndEndDate(editedBlood.getStartDate(), editedBlood.getEndDate()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startDate more than endDate -\u003e returns IllegalArgumentException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventBuilder(BLOOD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                                                                        .withStartDate(\"06-10-2018\").build());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidStartAndEndTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // BLOOD startTime - 11:30"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // BLOOD endTime - 17:30"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startTime before endTime -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isValidStartAndEndTime(BLOOD.getStartTime(), BLOOD.getEndTime()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startTime same as endTime -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withStartTime(BLOOD.getEndTime().toString()).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(editedBlood.isValidStartAndEndTime(editedBlood.getStartTime(), editedBlood.getEndTime()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // startTime more than endTime -\u003e returns IllegalArgumentException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventBuilder(BLOOD)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withStartTime(\"18:30\").build());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isSameEvent(BLOOD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.isSameEvent(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different location, start date and end date -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withLocation(VALID_LOCATION_YOUTH)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withStartDate(VALID_START_DATE_YOUTH).withEndDate(VALID_END_DATE_YOUTH).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.isSameEvent(editedBlood));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withName(VALID_NAME_YOUTH).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.isSameEvent(editedBlood));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same name, same location, same start and end date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withStartTime(VALID_START_TIME_YOUTH).withEndTime(VALID_END_TIME_YOUTH)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isSameEvent(editedBlood));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withLocation(VALID_LOCATION_YOUTH)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_YOUTH).withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.isSameEvent(editedBlood));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event bloodCopy \u003d new EventBuilder(BLOOD).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.equals(bloodCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(BLOOD.equals(BLOOD));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(YOUTH));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withName(VALID_NAME_YOUTH).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withLocation(VALID_LOCATION_YOUTH).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different startDate -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withStartDate(VALID_START_DATE_YOUTH).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different startTime -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withStartTime(VALID_START_TIME_YOUTH).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different endTime -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withEndTime(VALID_END_TIME_YOUTH).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different endTime -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        editedBlood \u003d new EventBuilder(BLOOD).withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(BLOOD.equals(editedBlood));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/LocationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid locations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid locations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Location.isValidLocation(\"19 Tanglin Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Location.isValidLocation(\"5 Business Park IT BUILDING, 609914, Singapore\")); // long location"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Name.isValidName(\"charity*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Name.isValidName(\"charity.\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"donation\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"flag 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"Flag Day\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Name.isValidName(\"Blood Donation Drive 2018\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/TimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // null Time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // blank Time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\":59\")); // missing hour"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"1:\")); // missing minute"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"12:\")); // missing minute"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"25:00\")); // invalid hour over 24"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"13:60\")); // invalid minute over 59"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"1122\")); // no delimiter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"11-22\")); // wrong delimiter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(Time.isValidTime(\"13:6\")); // invalid one character for minute"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        // valid Time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Time.isValidTime(\"15:15\")); // 3:15 PM"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Time.isValidTime(\"9:00\")); // valid one character for hour"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Time.isValidTime(\"0:00\")); // 12:00 AM"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(Time.isValidTime(\"23:59\")); // 11:59 PM"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/UniqueEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_YOUTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPETITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.BLOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.YOUTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertFalse(uniqueEventList.contains(BLOOD));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(uniqueEventList.contains(BLOOD));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void contains_eventWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertTrue(uniqueEventList.contains(editedBlood));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void add_duplicateEvent_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_nullTargetEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(null, BLOOD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_nullEditedEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, BLOOD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_editedEventIsSameEvent_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, BLOOD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_editedEventHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Event editedBlood \u003d new EventBuilder(BLOOD).withDescription(VALID_DESCRIPTION_YOUTH)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                .withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, editedBlood);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(editedBlood);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_editedEventHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, YOUTH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(YOUTH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvent_editedEventHasNonUniqueIdentity_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(YOUTH);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvent(BLOOD, YOUTH);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void remove_eventDoesNotExist_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.remove(BLOOD);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void remove_existingEvent_removesEvent() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.remove(BLOOD);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_nullUniqueEventList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents((UniqueEventList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(YOUTH);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents(expectedUniqueEventList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents((List\u003cEvent\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.add(BLOOD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d Collections.singletonList(YOUTH);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents(eventList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        expectedUniqueEventList.add(YOUTH);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(BLOOD, BLOOD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.setEvents(listWithDuplicateEvents);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        uniqueEventList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/EventIdTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Note that EventId will be from Event. All tests should be done there."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class EventIdTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventId(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_invalidEventId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String invalidEventId \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventId(invalidEventId));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isValidEventId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null eventId"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventId.isValidEventId(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid eventId"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(EventId.isValidEventId(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(EventId.isValidEventId(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(EventId.isValidEventId(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(EventId.isValidEventId(\"0*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // valid eventId"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(EventId.isValidEventId(\"1\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/HourTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class HourTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Hour(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_invalidHour_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String invalidHour \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Hour(invalidHour));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isValidHour() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null hour"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Hour.isValidHour(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid hour"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Hour.isValidHour(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Hour.isValidHour(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Hour.isValidHour(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Hour.isValidHour(\"0*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // valid hour"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Hour.isValidHour(\"1\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/RecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENTID_E1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENTID_E2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HOUR_H2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_R2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VOLUNTEERID_V1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VOLUNTEERID_V2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isSameRecord() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.isSameRecord(R1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.isSameRecord(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different eventId and volunteerId -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withEventId(VALID_EVENTID_E2)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withVolunteerId(VALID_VOLUNTEERID_V2).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.isSameRecord(editedRecord));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same eventId, same volunteerId -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withEventId(VALID_EVENTID_E1)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withVolunteerId(VALID_VOLUNTEERID_V1).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.isSameRecord(editedRecord));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same eventId, same volunteerId, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withEventId(VALID_EVENTID_E1).withVolunteerId(VALID_VOLUNTEERID_V1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.isSameRecord(editedRecord));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record r1Copy \u003d new RecordBuilder(R1).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.equals(r1Copy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(R1.equals(R1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different Record -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(R2));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different eventId -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withEventId(VALID_EVENTID_E2).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(editedRecord));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different volunteerId -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withVolunteerId(VALID_VOLUNTEERID_V2).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(editedRecord));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different hour -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(editedRecord));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        editedRecord \u003d new RecordBuilder(R1).withRemark(VALID_REMARK_R2).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(R1.equals(editedRecord));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/RemarkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_invalidRemark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String invalidRemark \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isValidRemark() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null Remark"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid Remark"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Remark.isValidRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(Remark.isValidRemark(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // valid Remark"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Emcee\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"To be the emcee for event\")); // long remark"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/UniqueRecordListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HOUR_H2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_R2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.DuplicateRecordException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class UniqueRecordListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private final UniqueRecordList uniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void contains_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void contains_recordNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(uniqueRecordList.contains(R1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void contains_recordInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(uniqueRecordList.contains(R1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void contains_recordWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(uniqueRecordList.contains(editedRecord));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void add_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void add_duplicateRecord_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_nullTargetRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(null, R1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_nullEditedRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_targetRecordNotInList_throwsRecordNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(RecordNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, R1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_editedRecordIsSameRecord_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, R1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_editedRecordHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(R1).withHour(VALID_HOUR_H2).withRemark(VALID_REMARK_R2)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, editedRecord);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(editedRecord);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_editedRecordHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, R2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(R2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecord_editedRecordHasNonUniqueIdentity_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecord(R1, R2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void remove_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void remove_recordDoesNotExist_throwsRecordNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(RecordNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.remove(R1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void remove_existingRecord_removesRecord() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.remove(R1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_nullUniqueRecordList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords((UniqueRecordList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_uniqueRecordList_replacesOwnListWithProvidedUniqueRecordList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(R2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords(expectedUniqueRecordList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords((List\u003cRecord\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.add(R1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e recordList \u003d Collections.singletonList(R2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords(recordList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        expectedUniqueRecordList.add(R2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void setRecords_listWithDuplicateRecords_throwsDuplicateRecordException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        List\u003cRecord\u003e listWithDuplicateRecords \u003d Arrays.asList(R1, R1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(DuplicateRecordException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.setRecords(listWithDuplicateRecords);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        uniqueRecordList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/record/VolunteerIdTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * Note that VolunteerId will be from Volunteers. All tests should be done there."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class VolunteerIdTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new VolunteerId(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void constructor_invalidEventId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String invalidVolunterId \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new VolunteerId(invalidVolunterId));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void isValidVolunteerId() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // null eventId"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e VolunteerId.isValidVolunteerId(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // invalid eventId"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(VolunteerId.isValidVolunteerId(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(VolunteerId.isValidVolunteerId(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(VolunteerId.isValidVolunteerId(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertFalse(VolunteerId.isValidVolunteerId(\"0*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        // valid eventId"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertTrue(VolunteerId.isValidVolunteerId(\"1\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.storage.XmlAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.YOUTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class XmlAdaptedEventTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_NAME \u003d \" Bl@@d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_START_DATE \u003d \"123\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_END_DATE \u003d \"456\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"789\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_END_TIME \u003d \"555\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_NAME \u003d YOUTH.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_LOCATION \u003d YOUTH.getLocation().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_START_DATE \u003d YOUTH.getStartDate().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_END_DATE \u003d YOUTH.getEndDate().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_START_TIME \u003d YOUTH.getStartTime().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_END_TIME \u003d YOUTH.getEndTime().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d YOUTH.getDescription().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d YOUTH.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_validEventDetails_returnsEvent() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(YOUTH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(YOUTH, event.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(INVALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(null, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_NAME, INVALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_LOCATION_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, null, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, INVALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, null, VALID_END_DATE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, INVALID_END_DATE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        INVALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                null, VALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, INVALID_END_TIME, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Time.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, null, VALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, INVALID_DESCRIPTION, VALID_TAGS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_DESCRIPTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                new XmlAdaptedEvent(VALID_NAME, VALID_LOCATION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                        VALID_START_TIME, VALID_END_TIME, VALID_DESCRIPTION, invalidTags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedRecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.storage.XmlAdaptedRecord.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import static seedu.address.testutil.TypicalRecords.R2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.EventId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.VolunteerId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class XmlAdaptedRecordTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String INVALID_EVENTID \u003d \"1@\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String INVALID_VOLUNTEERID \u003d \"1@\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String INVALID_HOUR \u003d \"1abc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String INVALID_REMARK \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String VALID_EVENTID \u003d R2.getEventId().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String VALID_VOLUNTEERID \u003d R2.getVolunteerId().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String VALID_HOUR \u003d R2.getHour().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final String VALID_REMARK \u003d R2.getRemark().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_validRecordDetails_returnsRecord() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d new XmlAdaptedRecord(R1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(R1, record.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidEventId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new XmlAdaptedRecord(INVALID_EVENTID, VALID_VOLUNTEERID, VALID_HOUR, VALID_REMARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d EventId.MESSAGE_EVENTID_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_nullEventId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d new XmlAdaptedRecord(null, VALID_VOLUNTEERID, VALID_HOUR, VALID_REMARK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventId.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidVolunteerId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new XmlAdaptedRecord(VALID_EVENTID, INVALID_VOLUNTEERID, VALID_HOUR, VALID_REMARK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d VolunteerId.MESSAGE_VOLUNTEERID_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_nullVolunteerId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d new XmlAdaptedRecord(VALID_EVENTID, null, VALID_HOUR, VALID_REMARK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, VolunteerId.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new XmlAdaptedRecord(VALID_EVENTID, VALID_VOLUNTEERID, INVALID_HOUR, VALID_REMARK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d Hour.MESSAGE_HOUR_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_nullHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d new XmlAdaptedRecord(VALID_EVENTID, VALID_VOLUNTEERID, null, VALID_REMARK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                new XmlAdaptedRecord(VALID_EVENTID, VALID_VOLUNTEERID, VALID_HOUR, INVALID_REMARK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d Remark.MESSAGE_REMARK_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlAdaptedRecord record \u003d new XmlAdaptedRecord(VALID_EVENTID, VALID_VOLUNTEERID, VALID_HOUR, null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.testutil.TypicalEvents;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.testutil.TypicalRecords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsAddressBook.xml\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventAddressBook.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventAddressBook.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final Path TYPICAL_RECORDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecordsAddressBook.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final Path INVALID_RECORD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecordAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private static final Path DUPLICATE_RECORD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecordAddressBook.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Person"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Events"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_typicalEventsFile_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_EVENTS_FILE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        AddressBook typicalEventsAddressBook \u003d TypicalEvents.getTypicalAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        assertEquals(addressBookFromFile, typicalEventsAddressBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_FILE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_EVENT_FILE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    //// Records"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_typicalRecordsFile_success() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_RECORDS_FILE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBook typicalRecordsAddressBook \u003d TypicalRecords.getTypicalAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        assertEquals(addressBookFromFile, typicalRecordsAddressBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_invalidRecordFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_RECORD_FILE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public void toModelType_duplicateRecords_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_RECORD_FILE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 28,
      "iMarbles": 39,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Adds a new {@code Event} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public AddressBookBuilder withEvent(Event event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Adds a new {@code Record} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public AddressBookBuilder withRecord(Record record) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        addressBook.addRecord(record);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 9,
      "iMarbles": 10,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * A utility class to help with building Event objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Blood Donation Drive 2018\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"750E, Chai Chee Road, #08-111\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"02-10-2018\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"05-10-2018\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"11:30\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"17:30\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Donation drive for blood.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startDate \u003d new Date(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endDate \u003d new Date(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startTime \u003d new Time(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endTime \u003d new Time(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        name \u003d eventToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        location \u003d eventToCopy.getLocation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startDate \u003d eventToCopy.getStartDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endDate \u003d eventToCopy.getEndDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        startTime \u003d eventToCopy.getStartTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        endTime \u003d eventToCopy.getEndTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        description \u003d eventToCopy.getDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the {@code Name} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the {@code Location} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the start {@code Date} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the end {@code Date} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the start {@code Time} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.startTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the end {@code Time} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.endTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Sets the {@code Description} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public EventBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new Event(name, location, startDate, endDate, startTime, endTime, description, tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecordBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.EventId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Hour;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Remark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.VolunteerId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class RecordBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String DEFAULT_EVENTID \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String DEFAULT_VOLUNTEERID \u003d \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String DEFAULT_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Emcee for event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private EventId eventId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private VolunteerId volunteerId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Hour hour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        eventId \u003d new EventId(DEFAULT_EVENTID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        volunteerId \u003d new VolunteerId(DEFAULT_VOLUNTEERID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        hour \u003d new Hour(DEFAULT_HOUR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Initializes the RecordBuilder with the data of {@code recordoCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder(Record recordToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        eventId \u003d recordToCopy.getEventId();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        volunteerId \u003d recordToCopy.getVolunteerId();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        hour \u003d recordToCopy.getHour();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        remark \u003d recordToCopy.getRemark();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the {@code EventId} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder withEventId(String eventId) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.eventId \u003d new EventId(eventId);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the {@code VolunteerId} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder withVolunteerId(String volunteerId) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.volunteerId \u003d new VolunteerId(volunteerId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the {@code Hour} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder withHour(String hour) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.hour \u003d new Hour(hour);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Sets the {@code Remark} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public RecordBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * @return record"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public Record build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new Record(eventId, volunteerId, hour, remark);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kratious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_YOUTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_YOUTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_YOUTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_YOUTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_YOUTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_YOUTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_YOUTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMPETITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kratious"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kratious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kratious"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kratious"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kratious"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Event BLOOD \u003d new EventBuilder().withName(\"Blood Donation Drive 2018\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withLocation(\"750E, Chai Chee Road, #08-111\").withStartDate(\"02-10-2018\").withEndDate(\"05-10-2018\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withStartTime(\"11:30\").withEndTime(\"17:30\").withDescription(\"Donation drive for blood.\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withTags(\"Public\", \"Donation\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static final Event YOUTH \u003d new EventBuilder().withName(VALID_NAME_YOUTH)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withLocation(VALID_LOCATION_YOUTH).withStartDate(VALID_START_DATE_YOUTH).withEndDate(VALID_END_DATE_YOUTH)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withStartTime(VALID_START_TIME_YOUTH).withEndTime(VALID_END_TIME_YOUTH)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_YOUTH).withTags(VALID_TAG_COMPETITION).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical events."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kratious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kratious"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kratious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kratious"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BLOOD, YOUTH));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kratious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kratious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kratious": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecords.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "import seedu.address.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " * A utility class containing a list of {@code Records} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iMarbles"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "public class TypicalRecords {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Record R1 \u003d new RecordBuilder().withEventId(\"1\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withVolunteerId(\"1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withHour(\"1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withRemark(\"Emcee\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Record R2 \u003d new RecordBuilder().withEventId(\"2\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withVolunteerId(\"2\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withHour(\"2\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withRemark(\"Delivery man\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static final Record R3 \u003d new RecordBuilder().withEventId(\"2\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withVolunteerId(\"1\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withHour(\"2\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            .withRemark(\"Food delivery\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    private TypicalRecords() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical records."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        for (Record record : getTypicalRecords()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "            ab.addRecord(record);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iMarbles"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    public static List\u003cRecord\u003e getTypicalRecords() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(R1, R2, R3));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iMarbles"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iMarbles": 47
    }
  }
]
