[
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    implementation group: \u0027at.favre.lib\u0027, name: \u0027bcrypt\u0027, version: \u00270.5.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027ClinicIO\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W14-1/main\u0027"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 1,
      "-": 246
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ClinicIO was developed by the https://github.com/CS2103-AY1819S1-W14-1/main[W14-1] team based on the previous work of the https://se-edu.github.io/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Joseph Lee Zhuo Xun"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::jjlee050.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/jjlee050[github]] [\u003c\u003cjjlee050#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Arsalan Cheema"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "image::arsalanc-v2.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/arsalanc-v2[github]] [\u003c\u003carsalanc-v2#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jack Wong"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::iamjackslayer.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/iamjackslayer[github]] [\u003c\u003ciamjackslayer#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Queue management"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gingivitiss"
        },
        "content": "\u003d\u003d\u003d Sophia Simangan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gingivitiss"
        },
        "content": "image::gingivitiss.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gingivitiss"
        },
        "content": "{empty}[https://github.com/gingivitiss[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gingivitiss"
        },
        "content": "Responsibilities: Appointment Feature"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Aaron Seah"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::aaronseahyh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/aaronseahyh[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Medicine Management"
      }
    ],
    "authorContributionMap": {
      "gingivitiss": 4,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/HashUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import at.favre.lib.crypto.bcrypt.BCrypt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import at.favre.lib.crypto.bcrypt.BCrypt.Hasher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import at.favre.lib.crypto.bcrypt.BCrypt.Result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import at.favre.lib.crypto.bcrypt.BCrypt.Verifyer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import at.favre.lib.crypto.bcrypt.BCrypt.Version;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Helper functions to maintain hashing password."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class HashUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private static final int COST \u003d 8;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Return the Bcrypt hashing version."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private static Hasher getVersion() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return BCrypt.with(Version.VERSION_2B);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Return a hashed password string from a valid password."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * @param password A valid password"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static String hashToString(String password) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return getVersion().hashToString(COST, password.toCharArray());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Return true if the password matches the hashed password."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * @param password A valid password"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * @param passwordHashString The hashed password"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static boolean verifyPassword(String password, String passwordHashString) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(password, passwordHashString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Verifyer verifyer \u003d BCrypt.verifyer();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Result result \u003d verifyer.verify(password.toCharArray(), passwordHashString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return result.verified;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 35,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.UniqueDoctorList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson and .isSameDoctor comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final UniqueDoctorList doctors;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        doctors \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Replaces the contents of the doctor list with {@code doctors}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code doctors} must not contain duplicate doctors."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctors(List\u003cDoctor\u003e doctors) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.doctors.setDoctors(doctors);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        setDoctors(newData.getDoctorList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns true if a doctor with the same identity as {@code doctor} exists in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean hasDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(doctor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return doctors.contains(doctor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //author jjlee050"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Adds a doctor to the ClinicIO."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The doctor must not already exist in the ClinicIO."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void addDoctor(Doctor d) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        doctors.add(d);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Replaces the given doctor {@code target} in the list with {@code editedDoctor}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The doctor identity of {@code editedDoctor} must not be the same as another existing doctor in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void updateDoctor(Doctor target, Doctor editedDoctor) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(editedDoctor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        doctors.setDoctor(target, editedDoctor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void removeDoctor(Doctor key) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        doctors.remove(key);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons \u0026 \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                + doctors.asUnmodifiableObservableList().size() + \" doctors\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ObservableList\u003cDoctor\u003e getDoctorList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return doctors.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 doctors.equals(((AddressBook) other).doctors));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return Objects.hash(persons.hashCode(), doctors.hashCode());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 164,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final FilteredList\u003cDoctor\u003e filteredDoctors;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        filteredDoctors \u003d new FilteredList\u003c\u003e(versionedAddressBook.getDoctorList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean hasDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(doctor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return versionedAddressBook.hasDoctor(doctor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void deleteDoctor(Doctor target) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.removeDoctor(target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void addDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.addDoctor(doctor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void updateDoctor(Doctor target, Doctor editedDoctor) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireAllNonNull(target, editedDoctor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.updateDoctor(target, editedDoctor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Doctor List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Doctor} backed by the internal list of"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredDoctors);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void updateFilteredDoctorList(Predicate\u003cDoctor\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        filteredDoctors.setPredicate(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 filteredDoctors.equals(other.filteredDoctors);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 180,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/Doctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Represents a Doctor in the ClinicIO."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class Doctor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final Id id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //private final Shift shift;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Doctor(Id id, Name name, Password password) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireAllNonNull(id, name, password);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //this.shift \u003d shift;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /*public Shift getShift() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return shift;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns true if both doctors of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * This defines a weaker notion of equality between two doctor."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean isSameDoctor(Doctor otherDoctor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (otherDoctor \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return otherDoctor !\u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 otherDoctor.getId().equals(getId())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 otherDoctor.getName().equals(getName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 otherDoctor.getPassword().equals(getPassword());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns true if both doctors have the same identity and data fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * This defines a stronger notion of equality between two doctors."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!(other instanceof Doctor)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Doctor otherDoctor \u003d (Doctor) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return otherDoctor.getId().equals(getId())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 otherDoctor.getName().equals(getName())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 otherDoctor.getPassword().equals(getPassword());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return Objects.hash(id, name, password);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        builder.append(getId())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .append(\" DoctorName: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .append(\" Password: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .append(getPassword());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 95,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/Id.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Represents a Doctor\u0027s id in the ClinicIO."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidId(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final String MESSAGE_ID_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            \"Id should only contain numbers, and it should more than 0\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public final int id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Constructs a {@code Id}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * @param doctorId A valid doctor id."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Id(int doctorId) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        checkArgument(isValidId(doctorId), MESSAGE_ID_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        id \u003d doctorId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns true if a given integer is a valid doctor id."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static boolean isValidId(int test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return String.valueOf(id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                || (other instanceof Id // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 id \u003d\u003d (((Id) other).id)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 46,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.HashUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Represents a Doctor\u0027s password in the ClinicIO."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            \"Password should only contain alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The first character of the password must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final String PASSWORD_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]{6,12}\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public final String password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Constructs a {@code Password}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * @param password A valid password."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns true if a given string is a valid password."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return test.matches(PASSWORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050-reused"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from https://github.com/patrickfav/bcrypt with minor modifications"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the given hashed password match the user hash password."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isSameAsHashPassword(String password, String passwordHashString) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return HashUtil.verifyPassword(password, passwordHashString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Password // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 password.equals(((Password) other).password)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return password.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 37,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/UniqueDoctorList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.exceptions.DoctorNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.exceptions.DuplicateDoctorException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * A list of doctors that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * A person is considered unique by comparing using {@code Doctor#isSameDoctor(Doctor)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * doctors uses Doctor#isSameDoctor(Doctor) for equality so as to ensure that the doctor being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * unique in terms of identity in the UniqueDoctorList. However, the removal of a doctor uses Doctor#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * as to ensure that the doctor with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * @see Doctor#isSameDoctor(Doctor)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class UniqueDoctorList implements Iterable\u003cDoctor\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final ObservableList\u003cDoctor\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns true if the list contains an equivalent doctor as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean contains(Doctor toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDoctor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Adds a doctor to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The doctor must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void add(Doctor toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new DuplicateDoctorException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Replaces the doctor {@code target} in the list with {@code editedDoctor}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The doctor identity of {@code editedDoctor} must not be the same as another existing doctor in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctor(Doctor target, Doctor editedDoctor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireAllNonNull(target, editedDoctor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new DoctorNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!target.isSameDoctor(editedDoctor) \u0026\u0026 contains(editedDoctor)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new DuplicateDoctorException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        internalList.set(index, editedDoctor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Removes the equivalent doctor from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * The doctor must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void remove(Doctor toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new DoctorNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctors(UniqueDoctorList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Replaces the contents of this list with {@code doctors}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * {@code doctors} must not contain duplicate doctors."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctors(List\u003cDoctor\u003e doctors) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        requireAllNonNull(doctors);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!doctorsAreUnique(doctors)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new DuplicateDoctorException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        internalList.setAll(doctors);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ObservableList\u003cDoctor\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Iterator\u003cDoctor\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                || (other instanceof UniqueDoctorList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueDoctorList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns true if {@code doctors} contains only unique doctors."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private boolean doctorsAreUnique(List\u003cDoctor\u003e doctors) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        for (int i \u003d 0; i \u003c doctors.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            for (int j \u003d i + 1; j \u003c doctors.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                if (doctors.get(i).isSameDoctor(doctors.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 124,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/exceptions/DoctorNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Signals that the operation is unable to find the specified doctor."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class DoctorNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 5,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/exceptions/DuplicateDoctorException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * Signals that the operation will result in duplicate Doctors (Doctors are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class DuplicateDoctorException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public DuplicateDoctorException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        super(\"Operation would result in duplicate doctors\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 10,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static List\u003cDoctor\u003e getSampleDoctors() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(new Doctor(new Id(1), new Name(\"Adam Bell\"), new Password(\"doctor1\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                new Doctor(new Id(2), new Name(\"Chip Dale\"), new Password(\"doctor2\"))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        for (Doctor sampleDoctor: getSampleDoctors()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            sampleAb.addDoctor(sampleDoctor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 28,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedDoctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * JAXB-friendly version of the Doctor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class XmlAdaptedDoctor {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Doctor\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Constructs an XmlAdaptedDoctor. This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public XmlAdaptedDoctor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Constructs an {@code XmlAdaptedDoctor} with the given doctor details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public XmlAdaptedDoctor(int id, String name, String password) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Converts a given Doctor into this class for JAXB use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedDoctor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public XmlAdaptedDoctor(Doctor source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        id \u003d source.getId().id;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        password \u003d source.getPassword().password;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Converts this jaxb-friendly adapted doctor object into the model\u0027s Doctor object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted doctor"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Doctor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (id \u003c 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!Id.isValidId(id)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_ID_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        final Id modelId \u003d new Id(id);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Password.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!Password.isValidPassword(password)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new IllegalValueException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        final Password modelPassword \u003d new Password(password);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return new Doctor(modelId, modelName, modelPassword);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!(other instanceof XmlAdaptedDoctor)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        XmlAdaptedDoctor otherPerson \u003d (XmlAdaptedDoctor) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 Objects.equals(id, otherPerson.id)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 Objects.equals(password, otherPerson.password);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 94,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"Doctors list contains duplicate doctor(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedDoctor\u003e doctors;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        doctors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        doctors.addAll(src.getDoctorList().stream().map(XmlAdaptedDoctor::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson} \u0026 {@code XmlAdaptedDoctor}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        for (XmlAdaptedDoctor d : doctors) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            Doctor doctor \u003d d.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            if (addressBook.hasDoctor(doctor)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DOCTOR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            addressBook.addDoctor(doctor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                \u0026\u0026 doctors.equals(((XmlSerializableAddressBook) other).doctors);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 24,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //Set full screen in exclusive mode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        primaryStage.setFullScreen(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        primaryStage.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 72,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/HashUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HashUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        //Null password"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e HashUtil.hashToString(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(HashUtil.hashToString(\"123\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void verifyPassword() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        //Null password and/or hashed password"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e HashUtil.verifyPassword(null, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e HashUtil.verifyPassword(null, \"1231\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e HashUtil.verifyPassword(\"131\", null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 1,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void addDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public boolean hasDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void deleteDoctor(Doctor target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void updateDoctor(Doctor target, Doctor editedDoctor) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void updateFilteredDoctorList(Predicate\u003cDoctor\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 146,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ADAM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.exceptions.DuplicateDoctorException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getDoctorList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void resetData_withDuplicateDoctors_throwsDuplicateDoctorException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // Two doctors with the same identity fields"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Doctor editedAdam \u003d new DoctorBuilder(ADAM).withName(\"Adam Bell\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        List\u003cDoctor\u003e newDoctors \u003d Arrays.asList(ADAM, editedAdam);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(new ArrayList\u003c\u003e(), newDoctors);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(DuplicateDoctorException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasDoctor_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.hasDoctor(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasDoctor_doctorNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(addressBook.hasDoctor(ADAM));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasDoctor_doctorInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.addDoctor(ADAM);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(addressBook.hasDoctor(ADAM));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasDoctor_doctorWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.addDoctor(ADAM);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Doctor editedAdam \u003d new DoctorBuilder(ADAM).withPassword(\"doctor1\").build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(addressBook.hasDoctor(editedAdam));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void getDoctorList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        addressBook.getDoctorList().remove(0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list and doctors list can violate interface constraints."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        private final ObservableList\u003cDoctor\u003e doctors \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cDoctor\u003e doctors) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            //@@author jjlee050"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            this.doctors.setAll(doctors);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        public ObservableList\u003cDoctor\u003e getDoctorList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            return doctors;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 137,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DOCTORS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ADAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasDoctor_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager.hasDoctor(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasDoctor_doctorNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(modelManager.hasDoctor(ADAM));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void hasDoctor_doctorInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager.addDoctor(ADAM);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(modelManager.hasDoctor(ADAM));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    //@@author jjlee050"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void getFilteredDoctorList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager.getFilteredDoctorList().remove(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .withDoctor(ADAM).withDoctor(BEN).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //@@author jjlee050"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        modelManager.updateFilteredDoctorList(PREDICATE_SHOW_ALL_DOCTORS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 85,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ADAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            .withDoctor(ADAM).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            .withDoctor(BEN).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                addressBookWithBob);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                addressBookWithCarl);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState}, states"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * before {@code versionedAddressBook#currentStatePointer} is equal to {@code"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * expectedStatesBeforePointer}, and states after {@code versionedAddressBook#currentStatePointer} is"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * and the {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 14,
      "-": 291
    }
  },
  {
    "path": "src/test/java/seedu/address/model/doctor/IdTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class IdTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void constructor_invalidId_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        int invalidId \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Id(invalidId));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void isValidId() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //Invalid id (less than or equal to 0)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Id.isValidId(0)); //Zero"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Id.isValidId(-1)); //Negative"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Id.isValidId(-9478));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Id.isValidId(-120 * 102));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Id.isValidId((int) Math.pow(2, 32) + 1)); //More than 2 ^ 32"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //valid id"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Id.isValidId(1)); // One"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Id.isValidId(20));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Id.isValidId(015)); //Leading zeros."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Id.isValidId(002040));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Id.isValidId(350274));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Id.isValidId((int) Math.pow(2, 16)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Id.isValidId((int) Math.pow(2, 32))); //Very large number"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 29,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/doctor/PasswordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.HashUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class PasswordTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Password(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void constructor_invalidPassword_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Password(invalidName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void isValidPassword() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isValidPassword(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isValidPassword(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isValidPassword(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isValidPassword(\"pete\")); // less than 6 characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isValidPassword(\"Capital Tan\")); // with spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isValidPassword(\"David Roger Jackson Ray Jr 2nd\")); // more than 12 characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Password.isValidPassword(\"joseph\")); // 6 alphabets only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Password.isValidPassword(\"peterjack\")); // lower-case alphabets only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Password.isValidPassword(\"81920543\")); // numbers only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Password.isValidPassword(\"123456789012\")); // 12 numbers only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Password.isValidPassword(\"CapitalTan\")); // mix of upper and lower case alphabets"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Password.isValidPassword(\"Capital123\")); // alphanuemic characters only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void isSameAsHashPassword() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        String password \u003d \"peter12\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //null password"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isSameAsHashPassword(password, null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //empty string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Password.isSameAsHashPassword(password, \"\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //invalid password"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isSameAsHashPassword(\"peter13\", HashUtil.hashToString(password)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isSameAsHashPassword(\"peter13\", HashUtil.hashToString(password)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isSameAsHashPassword(\"peter12\", \" \")); //Only spaces password hash string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(Password.isSameAsHashPassword(\"\", \" \")); //Empty string and only spaces password hash string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        //valid password"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(Password.isSameAsHashPassword(password, HashUtil.hashToString(password)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 59,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/doctor/UniqueDoctorListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ADAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.exceptions.DoctorNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.exceptions.DuplicateDoctorException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class UniqueDoctorListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private final UniqueDoctorList uniqueDoctorList \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void contains_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void contains_doctorNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertFalse(uniqueDoctorList.contains(ADAM));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void contains_doctorInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(uniqueDoctorList.contains(ADAM));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void contains_doctorWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Doctor editedAdam \u003d new DoctorBuilder(ADAM).withPassword(\"doctor1\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertTrue(uniqueDoctorList.contains(editedAdam));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void add_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void add_duplicateDoctor_throwsDuplicateDoctorException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(DuplicateDoctorException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctor_nullTargetDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctor(null, ADAM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctor_nullEditedDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctor(ADAM, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctor_targetDoctorNotInList_throwsDoctorNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(DoctorNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctor(ADAM, ADAM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctor_editedDoctorIsSameDoctor_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctor(ADAM, ADAM);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        UniqueDoctorList expectedUniqueDoctorList \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        expectedUniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertEquals(expectedUniqueDoctorList, uniqueDoctorList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctor_editedDoctorHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        Doctor editedAdam \u003d new DoctorBuilder(ADAM).withPassword(\"doctor1\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctor(ADAM, editedAdam);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        UniqueDoctorList expectedUniqueDoctorList \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        expectedUniqueDoctorList.add(editedAdam);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertEquals(expectedUniqueDoctorList, uniqueDoctorList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctor_editedDoctorHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctor(ADAM, BEN);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        UniqueDoctorList expectedUniqueDoctorList \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        expectedUniqueDoctorList.add(BEN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertEquals(expectedUniqueDoctorList, uniqueDoctorList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctor_editedDoctorHasNonUniqueIdentity_throwsDuplicateDoctorException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(BEN);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(DuplicateDoctorException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctor(ADAM, BEN);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void remove_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void remove_doctorDoesNotExist_throwsDoctorNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(DoctorNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.remove(ADAM);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void remove_existingDoctor_removesDoctor() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.remove(ADAM);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        UniqueDoctorList expectedUniqueDoctorList \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertEquals(expectedUniqueDoctorList, uniqueDoctorList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctors_nullUniqueDoctorList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctors((UniqueDoctorList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctors_uniqueDictirList_replacesOwnListWithProvidedUniqueDoctorList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        UniqueDoctorList expectedUniqueDoctorList \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        expectedUniqueDoctorList.add(BEN);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctors(expectedUniqueDoctorList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertEquals(expectedUniqueDoctorList, uniqueDoctorList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctors_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctors((List\u003cDoctor\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctors_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.add(ADAM);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        List\u003cDoctor\u003e personList \u003d Collections.singletonList(BEN);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctors(personList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        UniqueDoctorList expectedUniqueDoctorList \u003d new UniqueDoctorList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        expectedUniqueDoctorList.add(BEN);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        assertEquals(expectedUniqueDoctorList, uniqueDoctorList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void setDoctors_listWithDuplicateDoctors_throwsDuplicateDoctorException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        List\u003cDoctor\u003e listWithDuplicatePersons \u003d Arrays.asList(ADAM, ADAM);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(DuplicateDoctorException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.setDoctors(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        uniqueDoctorList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 164,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DoctorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "//@@author jjlee050"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " * A utility class to help with building Doctor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jjlee050"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "public class DoctorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final int DEFAULT_ID \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"alicepaul\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private Id id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public DoctorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        id \u003d new Id(DEFAULT_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        password \u003d new Password(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Initializes the DoctorBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public DoctorBuilder(Doctor doctorToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        id \u003d doctorToCopy.getId();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        name \u003d doctorToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        password \u003d doctorToCopy.getPassword();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Sets the {@code Id} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public DoctorBuilder withId(int id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.id \u003d new Id(id);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Sets the {@code Name} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public DoctorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     * Sets the {@code Password} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public DoctorBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        this.password \u003d new Password(password);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public Doctor build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "        return new Doctor(id, name, password);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jjlee050"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 58,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final Doctor ADAM \u003d new DoctorBuilder().withId(1).withName(\"Adam Bell\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            .withPassword(\"doctor1\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    public static final Doctor BEN \u003d new DoctorBuilder().withId(2).withName(\"Ben Hill\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "            .withPassword(\"doctor2\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jjlee050"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Doctor doctor : getTypicalDoctors()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addDoctor(doctor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cDoctor\u003e getTypicalDoctors() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ADAM, BEN));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jjlee050": 8,
      "-": 83
    }
  }
]
