[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "\u003d One Life"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W16-3/main[image:https://travis-ci.org/CS2103-AY1819S1-W16-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://ci.appveyor.com/project/nelvintan/main[image:https://ci.appveyor.com/api/projects/status/c2o87jmgyqvj8n9i/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W16-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W16-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://www.codacy.com/app/nelvintan/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-W16-3/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/88391920892a433291884a2801c90028[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* It is an application intended for medical professionals to accelerate their working processes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* Features include:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Quick and User-Friendly Patient Management"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Add/Edit/Delete Patient details"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Instantly locate Patients in the Database"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** High Resistance to User Error"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Undo/Redo Actions for all data modification commands"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "*** Display chronological history of user actions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/UserGuide.adoc[User Guide]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/AboutUs.adoc[About Us]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/ContactUs.adoc[Contact Us]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* Based off the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 21,
      "-": 20
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "AddressBook - Level 4 was developed by the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "https://github.com/CS2103-AY1819S1-W16-3/main/blob/master/docs/team/johndoe.adoc[W16-3] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Joanne Ong"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::joanneong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/joanneong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Role: Supervisor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Tan Thong Cai Nelvin"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::nelvintan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/nelvintan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Deliverables \u0026 deadlines, Scheduling \u0026 tracking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Triston Pang Erh Syen"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::tristonpang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/tristonpang[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Ng Kang Tze"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::ngkangtze.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/ngkangtze[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Code Quality, JavaFX expert"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Gary Goh Yi Peng"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::garygohyp.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/garygohyp[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Kenneth Goh Jun Teck"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "image::guestuser0123.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "{empty}[https://github.com/guestuser0123[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 8,
      "-": 35,
      "nelvintan": 23
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W16-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Nelvin: `nelvintan [at] u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Triston: `triston.pang [at] u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Kang Tze: `e0175352 [at] u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Gary: `e0148664 [at] u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "** Kenneth: `e0202061 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 7,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "By: `Team W16-3`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `appointment`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `appointment` field for each contact, rather than relying on tags alone. After designing the specification for the `appointment` command, you are convinced that this feature is worth implementing. Your job is to implement the `appointment` command."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Edits the appointment for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Format: `appointment INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `appointment 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Edits the appointment for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `appointment 1 r/` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Removes the appointment for the first person."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027appointment\u0027 which does nothing"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `appointment` command. We will add the logic of `appointment` later."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"appointment\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027appointment\u0027 arguments"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `appointment` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for appointment in `PersonCard`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a appointment for each person later."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the appointment label."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "We have to properly encapsulate the appointment in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a appointment)."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cappointment\u003e` element."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Our appointment label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `appointment` field."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s appointment."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning appointment label."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `appointment` command."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of patients"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI applications"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "* works in the hospital"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to retrieve patient information promptly"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "Value proposition: manage contacts faster than a typical mouse/GUI driven application"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |be able to create a patient profile |"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add to look up existing patient profiles |"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |update existing patient profiles |"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |careless user |delete an existing patient profile|remove a profile that was accidentally created"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |be able to refer to a helplist of commands |quickly learn how to use the software"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |expert user |be able to use shortcuts to access data |speed up my processes"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |be able to accurately obtain data of a specific patient when the dataset is large (people of the same name) |prevent any accidental misdiagnosis"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |be able to look up a patient based on one or more attributes |"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |be able to pin command(s) at the top of my screen |easily refer to those that I am interested in"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |be able to hide patient details |protect the personal details of certain patients"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |careless user |be able to undo recent changes or deletion |recover patients\u0027 profiles in the event of a mistake"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |be able to tag patients with VIP status |keep track of high profile patients and allocate necessary resources"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |be able to check if a drug will cause an allergic reaction |prescribe medication to a patient safely"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |check if a drug will cause an allergic reaction |"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "|`*` |user |add a appointment for a patient |record down anything that doesn\u0027t fall in given categories"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |check the countries a patient has been to in the last few weeks |check for any diseases contracted from overseas"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |group patients by a particular attribute |"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |expert user |be able to use shortcuts for commands (e.g. \"d\" instead of \"delete\") |save time typing long commands"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |less IT-savvy user |be able to use more user friendly/natural language commands |can understand the data entry and retrieval process intuitively"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |less IT-savvy user |see the CLI as a chat |typing in commands will feel more intuitive"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Display and Schedule data and time of medical appointments"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to view all medical appointments or appointments on a specific day"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of all appointments"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "3.  User requests to appointment a patient at a specific date and time"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook updates appointment details in database"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "5.  AddressBook shows the appointments details to the user"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. Patient is not in database"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook warns user that patient is not in database"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "* 4a. Appointment clashes with another appointment"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** 4a1. AddressBook warns user of appointment clash"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Intuitive Command Prompting"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User enters in command that takes in in arguments without any specified arguments (e.g. add, delete)"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows instructions to guide user"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User responds to instructions with respective answers/inputs"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook performs command for user and echoes changes made to user"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User enters unrecognised command"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. AddressBook shows error message and shows list of available commands"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. User accidentally enters wrong data when prompted by instruction"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. User follows instruction to return to previous instruction/undo (e.g. type /bk)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 3"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Viewing and updating medical history"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to view medical history of a particular patient at a specific date"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook displays medical history of the patient"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to update medical history"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook updates patient medical history in database using current date"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "5.  AddressBook displays success message"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. Patient is not in database"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. AddressBook warns user that patient is not in database"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. No specified date"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "** 1b1. AddressBook displays most recent medical history"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 3"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add and display doctors\u0027 profile"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User adds new doctor to the database"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Addressbook shows success message"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to display all doctors"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "4.  Addressbook displays all doctors’ information and indicates their current availability."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User does not specify the doctor’s medical speciality"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. Addressbook prompts user of insufficient information."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. Similar name already exists in the same medical department"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "** 1b1. Addressbook prompts user that similar name already exists."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at Step 1."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Use case: Displays a specific doctor’s appointment"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "1.  User requests to view the appointment of a particular doctor."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "2.  Addressbook displays appointment of the specified doctor (in ascending chronological order)"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User inputs wrong/invalid doctor’s name or medical department"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. Addressbook informs user that there is no doctor with the name and/or medical department specified by the user."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. User does not specify doctor’s name"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "** 1b1. Addressbook informs use that no doctor was specified."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "* 1c. User enters a doctor whose name appears in more than 1 medical department"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "** 1c1. Addressbook displays to user that there are more than 1 Dr [name] detected."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "** 1c2. Addressbook requests user to re-enter input and indicate the doctor’s medical department as well."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from Step 1"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Find patients by any keywords"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to find patients by tag"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Addressbook lists all users with that tag"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. There are no users with that tag."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. Addressbook returns an empty list of patients."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 1"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "-": 1099,
      "nelvintan": 28
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d OneLife - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "By: `Team W16-3`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "One Life (OL) is for service providers in the healthcare industry who *prefer to use a desktop application for managing patient and doctor information*. More importantly, One Life is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you prefer typing, One Life can get your medical information management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for One Life."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`r/patient n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 ic/S9601234A` : adds a patient named `John Doe` to the database."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Opens user guide. +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a patient or doctor to the database. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "*Adding a patient* +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add r/patient n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... ic/NRIC`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "*Adding a doctor* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add r/doctor n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... md/MEDICAL_DEPARTMENT`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "A patient can have any number of tags (including 0)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* `add r/patient n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 ic/S1234567A`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* `add r/doctor n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal md/dentistry`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "When adding a Patient, you are required to specify his/her NRIC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "whilst adding a Doctor requires you to specify the Medical Department."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all relevent personnels : `list`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all patients in the database. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a patient : `edit`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing patient in the database. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the patient\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating patient by any attribute: `find`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Finds patients with the keyword specified by the user. Specified keyword can belong to any part of any attribute of the patient (i.e. name, phone number, address, tags etc)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g. `nelvin` will match `Nelvin`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is a global search. e.g. `Kang` will return patients whose name includes `Kang` and patients with street address `Choa Chu Kang`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched. e.g. `Tris` will not return `Tristan`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Patients with at least one keyword will be returned. e.g. `Goh` will return `Gary Goh Yipeng` and `Kenneth Goh Jun Teck`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Goh` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `Gary Goh Yipeng` and `Kenneth Goh Jun Teck`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Ng Tan` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any patient having names `Ng Kang Tze` and `Tan Thong Cai, Nelvin`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a patient : `delete`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified patient from the database. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd patient in the database."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a patient : `select`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the patient identified by the index number used in the displayed patient list. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the patient and loads the Google search page the patient at the specified `INDEX`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed patient list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd patient in the database."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st patient in the results of the `find` command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the database to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the database\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the database. +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a doctor : `adddoc`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Create and add a new doctor into the database. +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `adddoc n/NAME p/PHONE_NUMBER e/EMAIL md/MEDICAL_DEPARTMENT [t/TAG]`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* `adddoc n/Chew Tiong Seng p/91234567 e/chew@gmail.com md/oncology t/HOD` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Creates a new doctor in the database."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing doctors : `listdoc`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Lists all doctors in the database and their current availability based on their appointment. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listdoc`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Displaying medical appointments : `appts`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Displays a list of medical appointments that are currently scheduled. All appointments will be listed if date is not entered. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `appts[d/DATE]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "\u003d\u003d\u003d Scheduling medical appointments : `schedule`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Schedules a patient for a medical appointment at a specific date and time."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Format: `schedule s/DATE,START_TIME,END_TIME,DOCTOR_NAME,DOCTOR_DEPARTMENT,PATIENT_NAME,PATIENT_NRIC`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* Date is DD/MM/YYYY and dot separated e.g.  `7.11.1996` is the 7th of November 1996"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* Time is 24 hour clock e.g. `1300` is 1pm"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Doctor name is doctor\u0027s full name e.g. `John Doe`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Doctor department is doctor\u0027s medical department e.g. `Heart`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Patient name is patient\u0027s full name e.g. `Kim Tan`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* Patient nric is patient\u0027s nric e.g. `S1234567A`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* `schedule 1 s/22.11.2018,1300,1400,Jack,Heart,Jill,S1234567I` +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "Schedules `Jill` for an appointment with doctor `Jack` of the `Heart` department on the 22nd of November 2018 from 1pm to 2pm."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing medical records of patients : `records`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Displays the most updated medical records of a given patient if no date is specified. Else, displays the most recent medical record before the specified date. +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `records n/name [d/DATE]`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "* Date is DD/MM/YYYY and is dot separated. e.g.  `7.11.1996` is the 7th of November 1996"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* `records n/Jack d/22.11.2018` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Displays the most recent medical record of `Jack` before 22nd November 2018."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* `records n/Jack` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Displays the most recent medical records of `Jack`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating medical records of patients : `update`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a new medical record for the patient as the most updated record using the current date as date of record. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `update n/NAME mr/NEW_MEDICAL_RECORDS`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* `update n/Jack mr/Patient diagnosed with flu. Tamiflu prescribed.` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Updates `Jack` medical records with the given sentences."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "One Life data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Intuitive Command Prompting"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Intuitive prompting for the user when a command that takes in parameters is entered without any parameters specified. This feature aids new users and makes it easier and more natural for them to use the system. The nature of this feature allows users to enter data without adding prefix tags, and also supports cases where certain data fields are intentionally left blank. The original command input format is still supported to allow quick command entry for seasoned users."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Use `/bk` to re-enter previous field. +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Use `//` if the field is to be blank."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "add"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "You entered: add"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Is this a patient or a doctor? (Please enter patient or doctor)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "patient"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "You entered: patient"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Please enter person\u0027s name"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous OneLife folder."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add Patient* : `add r/patient n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]... ic/NRIC` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add r/patient n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague ic/S1234567A`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add Doctor* : `add r/doctor n/Bobby Tan p/91234567 e/BBTan@example.com a/123, Clementi Rd, 123456 md/Dentistry`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* *List Patients* : `list`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add Doctor* : `adddoc n/NAME p/PHONE_NUMBER e/EMAIL md/MEDICAL_DEPARTMENT [t/TAG]` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `adddoc n/Chew Tiong Seng p/91234567 e/chew@gmail.com md/oncology t/HOD`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* *List Doctors* : `listdoc`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* *Display Medical Appointments* : `appts`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "* *Schedule Medical Appointments* : `schedule s/DATE,START_TIME,END_TIME,DOCTOR_NAME,DOCTOR_DEPARTMENT,PATIENT_NAME,PATIENT_NRIC` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "e.g. `schedule 1 s/22.11.2018,1300,1400,Jack,Heart,Jill,S1234567I`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* *View Medical Records* : `records n/NAME [d/DATE]`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* *Update Medical Records* : `update n/NAME mr/NEW_MEDICAL_RECORDS` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `update n/Jack mr/Patient diagnosed with flu. Tamiflu prescribed.`"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "-": 355,
      "nelvintan": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.department.MedicalDepartment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_ROLE_CONFLICT \u003d \"Attempting to edit invalid fields for: \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (hasRoleConflict(personToEdit, editPersonDescriptor)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_ROLE_CONFLICT + personToEdit.getClass().getSimpleName().toUpperCase());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment updatedAppointment \u003d personToEdit.getAppointment(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personToEdit instanceof Patient) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            //edit command does not allow editing medical records"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            MedicalRecord updatedMedicalRecord \u003d ((Patient) personToEdit).getMedicalRecord();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(((Patient) personToEdit).getNric());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Patient(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    updatedAppointment, updatedNric, updatedMedicalRecord);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assert personToEdit instanceof Doctor; // Person must be either Patient or Doctor."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            MedicalDepartment updateMedicalDepartment \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    editPersonDescriptor.getMedicalDepartment().orElse(((Doctor) personToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Doctor(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    updatedAppointment, updateMedicalDepartment);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the given person has valid arguments. If the person is a patient, checks if the Medical"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Department field is present. Else if the person is a doctor, checks if the NRIC field is present."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personToEdit the person to edit."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean hasRoleConflict(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personToEdit instanceof Patient) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return editPersonDescriptor.getMedicalDepartment().isPresent();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assert personToEdit instanceof Doctor;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return editPersonDescriptor.getNric().isPresent();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        private Nric nric;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        private MedicalDepartment medicalDepartment;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            setMedicalDepartment(toCopy.medicalDepartment);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            setNric(toCopy.nric);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, nric, medicalDepartment);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setNric(Nric nric) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            this.nric \u003d nric;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cNric\u003e getNric() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(nric);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setMedicalDepartment(MedicalDepartment medicalDepartment) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            this.medicalDepartment \u003d medicalDepartment;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cMedicalDepartment\u003e getMedicalDepartment() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(medicalDepartment);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 289,
      "nelvintan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    private final PersonContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public FindCommand(PersonContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 3,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Updates the schedule of a person in the addressbook."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedules appointment for the person identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_SCHEDULE + \"[DATE,START_TIME,END_TIME,DOCTOR_NAME,DOCTOR_DEPARTMENT,PATIENT_NAME,PATIENT_NRIC]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SCHEDULE + \"[DATE, START_TIME, END_TIME, DOCTOR_NAME, DOCTOR_DEPARTMENT, PATIENT_NAME, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"PATIENT_NRIC]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + PREFIX_SCHEDULE + \"23.11.2018,1300,1400,Jack,Heart,Jill,S1234567I\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS \u003d \"Scheduled appointment to Person: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PARTS_NUMBER \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            \"Failed to schedule appointment to Person.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Number of parts of the appointment is wrong.\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_DOCTOR \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            \"Failed to schedule appointment to Person.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Doctor entered is wrong.\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PATIENT \u003d \"Failed to schedule \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"appointment to Person.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Patient entered is wrong.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Removed appointment from Person: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH \u003d \"There is a clash of appointments. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"Please choose another slot.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_NRIC \u003d \"NRIC format is wrong. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            + \"NRIC should contain only alphanumeric characters and should not be left blank.\\n\";;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_SCHEDULE_APPOINTMENT_MISMATCH \u003d \"Please check input name matches person chosen\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final Appointment appointment;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param index of the person in the filtered person list to edit the appointment"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment of the person to be updated to"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public ScheduleCommand(Index index, Appointment appointment) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(index, appointment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!appointment.isOfCorrectNumberOfParts()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PARTS_NUMBER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!appointment.hasValidNric()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_NRIC);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit instanceof Doctor \u0026\u0026 !appointment.hasValidDoctor(personToEdit)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_DOCTOR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit instanceof Patient \u0026\u0026 !appointment.hasValidPatient(personToEdit)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_INCORRECT_PATIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (personToEdit.hasClash(appointment)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new CommandException(MESSAGE_SCHEDULE_APPOINTMENT_FAILURE_CLASH);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personToEdit instanceof Doctor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            editedPerson \u003d new Doctor(personToEdit.getName(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    personToEdit.getAddress(), personToEdit.getTags(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    appointment, ((Doctor) personToEdit).getMedicalDepartment());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assert personToEdit instanceof Patient;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            editedPerson \u003d new Patient(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    personToEdit.getAddress(), personToEdit.getTags(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    appointment, ((Patient) personToEdit).getNric(), ((Patient) personToEdit).getMedicalRecord());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Generates a command execution success message based on whether the appointment is added to or removed from"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !appointment.value.isEmpty() ? MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                : MESSAGE_DELETE_APPOINTMENT_SUCCESS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!(other instanceof ScheduleCommand)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand e \u003d (ScheduleCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \u0026\u0026 appointment.equals(e.appointment);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 116,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.IntuitiveEntryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Keeps track of whether the system is currently executing an Intuitive Prompt Command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //detect if in intuitive mode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isIntuitiveMode) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new IntuitiveEntryCommand(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            //detect if user wants to activate intuitive mode/command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                isIntuitiveMode \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                return new IntuitiveEntryCommand(userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitIntuitiveMode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        isIntuitiveMode \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "nelvintan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final Prefix PREFIX_SCHEDULE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_RECORD \u003d new Prefix(\"mr/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MEDICAL_DEPARTMENT \u003d new Prefix(\"md/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "nelvintan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " * Parses input arguments and creates a new {@code ScheduleCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ScheduleCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * and returns a {@code ScheduleCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SCHEDULE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String appointment \u003d argMultimap"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .getValue(PREFIX_SCHEDULE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .orElse(\"22.11.2018,1300,1400,Alice,Heart,Betty,S1234567A\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return new ScheduleCommand(index, new Appointment(appointment));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/department/MedicalDepartment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.department;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Doctor\u0027s Medical Department in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class MedicalDepartment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DEPTNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Medical Department should only contain alphabetic characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEPTNAME_VALIDATION_REGEX \u003d \"[a-zA-Z]+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String deptName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code MedicalDepartment}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deptName A valid medical department."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public MedicalDepartment(String deptName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(deptName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidMedDept(deptName), MESSAGE_DEPTNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deptName \u003d deptName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the string is a valid medical department name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param medDept Medical Department name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if it is a valid name as a medical department."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidMedDept(String medDept) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return medDept.matches(DEPTNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj instanceof MedicalDepartment) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            MedicalDepartment department \u003d (MedicalDepartment) obj;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return (department.deptName.equals(this.deptName));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return deptName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/Doctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.department.MedicalDepartment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedDoctor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Doctor in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Doctor extends Person {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MedicalDepartment dept;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Doctor object based on given details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Doctor(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, MedicalDepartment dept) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(dept);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dept \u003d dept;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Doctor object based on given details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Doctor(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Appointment appointment,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                  MedicalDepartment modelMedicalDept) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(modelMedicalDept);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dept \u003d modelMedicalDept;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns Medical Department of this doctor."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public MedicalDepartment getMedicalDepartment () {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.dept;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj instanceof Doctor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Doctor otherDoctor \u003d (Doctor) obj;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return (otherDoctor.name.equals(this.name) \u0026\u0026 (otherDoctor.dept.equals(this.dept)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.toString() + (\" Department: \" + this.dept) + (\" Appointments: \" + this.getAppointment());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a Xml Adapted version of this doctor object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites the method in the super class, {@code Person}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that this person is an instance of a Doctor."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assert source instanceof Doctor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return XmlAdaptedDoctor.adaptToXml((Doctor) source);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "nelvintan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Nric.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Patient\u0027s NRIC in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Nric {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NRIC_CONSTRAINTS \u003d \"NRIC should contain only alphanumeric \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"characters and should not be left blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NRIC_VALIDATION_REGEX \u003d \"(?i)^[STFG]\\\\d{7}[A-Z]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code NRIC}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param code A NRIC with valid format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Nric(String code) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // checkArgument(isValidNric(code), MESSAGE_NRIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string has a valid NRIC format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidNric(String code) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return code.matches(NRIC_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (obj instanceof Nric // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 code.equals(((Nric) obj).code)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "nelvintan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPatient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Patient in the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Patient extends Person {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Nric nric;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MedicalRecord medicalRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Patient object based on given details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * An empty {@code MedicalRecord} will be created by default for the patient."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Patient(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Nric nric) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(nric);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.medicalRecord \u003d new MedicalRecord(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new Patient object based on given details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * All field must be present and non-null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Patient(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Appointment appointment,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   Nric nric, MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(name, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.medicalRecord \u003d medicalRecord;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Nric getNric() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public MedicalRecord getMedicalRecord() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.medicalRecord;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMedicalRecord(MedicalRecord medicalRecord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.medicalRecord \u003d requireNonNull(medicalRecord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check if the patient is the same as other patient."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param otherPatient The other patient to compare to."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True if the two patient are the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Patient otherPatient) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPatient \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return otherPatient !\u003d null \u0026\u0026 otherPatient.getNric().equals(getNric());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj instanceof Patient) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            Patient otherPatient \u003d (Patient) obj;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return (otherPatient.nric.code.toUpperCase().equals(this.nric.code.toUpperCase()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, nric, phone, email, address, medicalRecord, tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" NRIC: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getNric())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Medical Records: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getMedicalRecord())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Appointments: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAppointment())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a Xml Adapted version of this patient object."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites the method in the super class, {@code Person}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that this person is an instance of a Patient."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assert source instanceof Patient;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return XmlAdaptedPatient.adaptToXml((Patient) source);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 123,
      "nelvintan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.department.MedicalDepartment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s Appointment in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class Appointment {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Number of parts of an appointment */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static int numberOfParts \u003d 7;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** String value of whole appointment **/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Date of appointment */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Starting time of appointment */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Ending time of appointment */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Name of doctor */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Name doctorName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Medical department of doctorName */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private MedicalDepartment medicalDepartment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** Name of patient */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Name patientName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /** nric of patient */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Nric patientNric;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment(String appointment) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        value \u003d appointment;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d value.split(\",\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (parts.length \u003d\u003d numberOfParts) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            date \u003d parts[0].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            startTime \u003d parts[1].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            endTime \u003d parts[2].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            doctorName \u003d new Name(parts[3].trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            medicalDepartment \u003d new MedicalDepartment(parts[4].trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            patientName \u003d new Name(parts[5].trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            patientNric \u003d new Nric(parts[6].trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment(String date, String startTime, String endTime,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                       String doctorName, String department, String patientName, String nric) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        value \u003d date + \",\" + startTime + \",\" + endTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + \",\" + doctorName + \",\" + department + \",\" + patientName + \",\" + nric;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.doctorName \u003d new Name(doctorName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.medicalDepartment \u003d new MedicalDepartment(department);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.patientName \u003d new Name(patientName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.patientNric \u003d new Nric(nric);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if there are any clashes between another appointment"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * compared to this appointment."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherAppointment another appointment"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return Boolean if there is any clash."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isClash(Appointment otherAppointment) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: 1/10/2018 : Change this quick fix."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.value.equals(\"\") || otherAppointment.value.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different or doctor means definitely no clash"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (!date.equals(otherAppointment.date) || !doctorName.equals(otherAppointment.doctorName)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentStartTime \u003d Integer.parseInt(startTime.trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int currentEndTime \u003d Integer.parseInt(endTime.trim());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherStartTime \u003d Integer.parseInt(otherAppointment.startTime.trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        int otherEndTime \u003d Integer.parseInt(otherAppointment.endTime.trim());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // 3 Cases where other appointment clashes with current appointment"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (otherStartTime \u003c\u003d currentStartTime \u0026\u0026 otherEndTime \u003e\u003d currentEndTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 1: other appointment\u0027s start time is before current appointment\u0027s start time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and other appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (otherStartTime \u003e\u003d currentStartTime \u0026\u0026 otherStartTime \u003c\u003d currentEndTime) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 2: other appointment\u0027s start time is after current appointment\u0027s start time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and before current appointment\u0027s end time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else if (otherEndTime \u003c\u003d currentEndTime \u0026\u0026 otherEndTime \u003e\u003d currentStartTime) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // Case 3: Other appointment\u0027s end time is before current appointment\u0027s end time"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            // and after current appointment\u0027s start time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if instance is a valid Appointment object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean isOfCorrectNumberOfParts() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d value.split(\",\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (value \u003d\u003d \"\" || parts.length \u003d\u003d Appointment.numberOfParts) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param person to be tested"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean on whether the person is a valid doctor."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidDoctor(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Doctor doctor \u003d (Doctor) person;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Name name \u003d doctor.getName();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        MedicalDepartment medicalDepartment \u003d doctor.getMedicalDepartment();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (doctorName.equals(name) \u0026\u0026 this.medicalDepartment.equals(medicalDepartment)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param person to be tested"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return boolean on whether the person is a valid patient."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidPatient(Person person) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient patient \u003d (Patient) person;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Name name \u003d patient.getName();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Nric nric \u003d patient.getNric();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (patientName.equals(name) \u0026\u0026 patientNric.equals(nric)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasValidNric() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return patientNric.isValidNric(patientNric.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (obj instanceof Appointment) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            Appointment appointment \u003d (Appointment) obj;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return appointment.value.toUpperCase().equals(this.value.toUpperCase());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 152,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AppointmentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages {@code Appointment} objects to check for clashes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class AppointmentManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Checks if there are any clashes between another appointment"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * compared to all the appoinments in the appointment list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param otherAppointment  another appointment"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return Boolean if there is any clash between other appointment and the list of appointments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static boolean isClash(ArrayList\u003cAppointment\u003e appointmentList, Appointment otherAppointment) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        for (Appointment currentAppointment : appointmentList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            if (currentAppointment.isClash(otherAppointment)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if there are any clashes between another appointment."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param appointment current appointment"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param otherAppointment  another appointment"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Boolean if there is any clash between other appointment and current appointment"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isClash(Appointment appointment, Appointment otherAppointment) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (appointment.isClash(otherAppointment)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static void displaySchedule(ArrayList\u003cAppointment\u003e appointmentList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return; // connect to UI somehow?!?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Adds an appointment to a list of appointments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment  another appointment"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return appointment list with the new appointment added."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e add(ArrayList\u003cAppointment\u003e appointmentList, Appointment appointment) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(appointment);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Deletes an appointment from a list of appointments if it"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * matches any appointment in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointmentList list of appointments"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @param appointment  another appointment"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * @return appointment list without the matched appointment if it is found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static ArrayList\u003cAppointment\u003e delete(ArrayList\u003cAppointment\u003e appointmentList, Appointment appointment) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.remove(appointment);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 52,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Common Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Appointment appointment \u003d new Appointment(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * An empty {@code Appointment} will be created by default."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Appointment appointment) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList.add(appointment);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public Appointment getAppointment() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointment;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    // Error because there is nothing in appointmentList i.e. it is not used at all hence null so will throw error."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public boolean hasClash(Appointment newAppointment) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return AppointmentManager.isClash(appointment, newAppointment);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an Xml version of this Person instance."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method is to be overwritten by {@code Patient} and {@code Doctor} class."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson toXmlVersion(Person source) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return XmlAdaptedPerson.adaptToXml(source);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAppointment().equals(getAppointment())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "nelvintan": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": " * Tests that a {@code Person}\u0027s attributes matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "public class PersonContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public PersonContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        builder.append(person.getName()).append(\" \")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getPhone()).append(\" \")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getEmail()).append(\" \")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getAddress()).append(\" \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getAppointment()).append(\" \")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .append(person.getClass().getSimpleName()).append(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .map(x -\u003e x.toString().replaceAll(\"[\\\\[\\\\]]\", \"\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .map(x -\u003e x + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .forEach(builder::append);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            builder.append(((Doctor) person).getMedicalDepartment()).append(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        } else if (person instanceof Patient) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "            builder.append(((Patient) person).getNric()).append(\" \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                    .append(((Patient) person).getMedicalRecord()).append(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                    return StringUtil.containsWordIgnoreCase(builder.toString()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                            .replaceAll(\",\", \" \"), keyword);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                || (other instanceof PersonContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                \u0026\u0026 keywords.equals(((PersonContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.department.MedicalDepartment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Nric;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // NOTE: Error when whitespace inserted Appointment"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Appointment SAMPLE_APPOINTMENT \u003d new Appointment(\"22.11.2018,1300,1400,Alice,Heart,Betty\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \",S1234567A\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), getTagSet(\"friends\"), SAMPLE_APPOINTMENT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Nric(\"S1234567A\"), new MedicalRecord(\"\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Doctor(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), getTagSet(\"colleagues\", \"friends\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    SAMPLE_APPOINTMENT, new MedicalDepartment(\"Neurology\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), getTagSet(\"neighbours\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    SAMPLE_APPOINTMENT, new Nric(\"S2222222B\"), new MedicalRecord(\"Diagnosed with cough. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Dextromethorphan prescribed.\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"), new Address("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Blk 436 Serangoon Gardens Street 26, #16-43\"), getTagSet(\"family\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                    SAMPLE_APPOINTMENT, new Nric(\"S9991114A\"), new MedicalRecord(\"Diagnosed with stage 3 testicular\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" cancer. Orchiectomy for both testicles.\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Doctor(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), getTagSet(\"classmates\"), SAMPLE_APPOINTMENT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new MedicalDepartment(\"Obstetrics\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new Doctor(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), getTagSet(\"colleagues\"), SAMPLE_APPOINTMENT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    new MedicalDepartment(\"Cardiology\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "nelvintan": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String role;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String nric;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String medicalRecord;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String medicalDepartment;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String appointment;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged, String appointment) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GaryGohYP"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appointment \u003d appointment;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        role \u003d source.getClass().getSimpleName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d source.getAppointment().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts given person into this class for JAXB use."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method is to be overwritten by {@code XmlAdaptedPatient} and {@code XmlAdaptedDoctor} class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlAdaptedPerson adaptToXml(Person source) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAdaptedPerson(source);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Role.isValidRole(role)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Role modelRole \u003d Role.valueOf(role.toUpperCase());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        if (appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    Appointment.class.getSimpleName()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        final Appointment modelAppointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (modelRole.equals(Role.DOCTOR)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlAdaptedDoctor.convertToDoctorModelType(new Person(modelName, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    modelAddress, modelTags, modelAppointment), medicalDepartment);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assert modelRole.equals(Role.PATIENT); // person must be a patient if he/she is not a doctor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlAdaptedPatient.convertToPatientModelType(new Person(modelName, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    modelAddress, modelTags, modelAppointment), nric, medicalRecord);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GaryGohYP": 1,
      "-": 179,
      "nelvintan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label medicalRecord;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Label appointment;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label uniqueField;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            uniqueField.setText(((Doctor) person).getMedicalDepartment().deptName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (person instanceof Patient) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            uniqueField.setText(((Patient) person).getMedicalRecord().value);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        role.setText(person.getClass().getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        appointment.setText(person.getAppointment().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "nelvintan": 2
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"uniqueField\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$uniqueField\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "      \u003cLabel fx:id\u003d\"appointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "nelvintan": 1
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eSome remarks\u003c/appointment\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eSome remarks\u003c/appointment\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "nelvintan": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003es1234567a\u003c/nric\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003es1234567a\u003c/nric\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "nelvintan": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003eS7412345C\u003c/nric\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003eS8234567A\u003c/nric\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003eS9898989B\u003c/nric\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652599\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003es8234599a\u003c/nric\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord\u003e\u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalDepartment\u003eOncology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalDepartment\u003eCardiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalDepartment\u003eNeurology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment\u003e23.11.2018,1300,1400,Priscilia,Elaine\u003c/appointment\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "nelvintan": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003eS9234567A\u003c/nric\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003eS9874567B\u003c/nric\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003eS7234567C\u003c/nric\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003eS9634567D\u003c/nric\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eLikes to eat\u003c/appointment\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003ePatient\u003c/role\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cnric\u003eS8834567A\u003c/nric\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalRecord isPrivate\u003d\"false\"\u003e \u003c/medicalRecord\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalDepartment\u003eNeurology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalDepartment\u003eObstetrics\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalDepartment\u003ePhysiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003eSmart friend\u003c/appointment\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crole\u003eDoctor\u003c/role\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmedicalDepartment\u003eCardiology\u003c/medicalDepartment\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        \u003cappointment isPrivate\u003d\"false\"\u003e\u003c/appointment\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "nelvintan": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String UNIQUE_FIELD_RECORD_ID \u003d \"#uniqueField\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private static final String APPOINTMENT_FIELD_ID \u003d \"#appointment\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final Label appointmentLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label uniqueField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueField \u003d getChildNode(UNIQUE_FIELD_RECORD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentLabel \u003d getChildNode(APPOINTMENT_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUniqueFieldRecordId() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return uniqueField.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public String getAppointment() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return appointmentLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "nelvintan": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MEDICAL_RECORD_AMY \u003d \"Diagnosed with flu. Tamiflu prescribed.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MEDICAL_RECORD_BOB \u003d \"Diagnosed with cough. Dextromethorphan prescribed.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String VALID_SCHEDULE_AMY \u003d \"22.11.2018,1300,1400,Alice,Heart,Amy,S1234567A\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public static final String VALID_SCHEDULE_BOB \u003d \"22.11.2018,1300,1400,Jack,Heart,Bob,S1234567B\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROLE_DOCTOR \u003d \"doctor\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROLE_PATIENT \u003d \"patient\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MEDICAL_DEPARTMENT \u003d \"Cardiology\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NRIC_AMY \u003d \"S1234567A\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NRIC_BOB \u003d \"S9876543B\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MEDICAL_RECORD_DESC_AMY \u003d \" \" + PREFIX_MEDICAL_RECORD + VALID_MEDICAL_RECORD_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MEDICAL_RECORD_DESC_BOB \u003d \" \" + PREFIX_MEDICAL_RECORD + VALID_MEDICAL_RECORD_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MEDICAL_DEPARTMENT_DESC \u003d \" \" + PREFIX_MEDICAL_DEPARTMENT + VALID_MEDICAL_DEPARTMENT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROLE_DOCTOR_DESC \u003d \" \" + PREFIX_ROLE + VALID_ROLE_DOCTOR;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROLE_PATIENT_DESC \u003d \" \" + PREFIX_ROLE + VALID_ROLE_PATIENT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"JB123456A\"; // cannot start with 2 letters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"teacher\"; // not a valid role"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_MEDICAL_DEPARTMENT_DESC \u003d \" \" + PREFIX_MEDICAL_DEPARTMENT + \"HE12RT\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    // numbers not allowed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        model.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "-": 161,
      "nelvintan": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "     * Parses {@code userInput} into a {@code PersonContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "    private PersonContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        return new PersonContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 10,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHEDULE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ScheduleCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SCHEDULE_STUB \u003d \"23.11.2018,1300,1400,Priscilia,Heart,Alice Pauline,S7412345C\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(firstPerson).withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Appointment(editedPerson.getAppointment().value));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_deleteRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder(firstPerson)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .withAppointment(\"22.11.2018,1300,1400,Alice,Heart,\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + firstPerson.getName().toString()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + \",\" + firstPerson.getNric().toString()).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(editedPerson.getAppointment().toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient firstPerson \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient editedPerson \u003d new PatientBuilder((Patient) model.getFilteredPersonList()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new Appointment(editedPerson.getAppointment().value));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SCHEDULE_APPOINTMENT_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, new Appointment(VALID_SCHEDULE_BOB));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, new Appointment(VALID_SCHEDULE_BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient personToModify \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient modifiedPerson \u003d new PatientBuilder(personToModify).withAppointment(SCHEDULE_STUB).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String[] parts \u003d SCHEDULE_STUB.split(\",\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, new Appointment(parts[0],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                parts[1], parts[2], parts[3], parts[4],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                personToModify.getName().toString(), personToModify.getNric().toString()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        //ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, new Appointment(SCHEDULE_STUB));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(personToModify, modifiedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // remark -\u003e first person remark changed"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        scheduleCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // redo -\u003e same first person modified again"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(\"22.11.2018,1300,1400,Alice,Heart,Benson Meier,S8234567A\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 1. Modifies {@code Person#remark} from a filtered list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 2. Undo the modification."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                new Appointment(\"22.11.2018,1300,1400,Alice,Heart,\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + \"Benson Meier\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + \",\" + \"S8234567A\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient personToModify \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Patient modifiedPerson \u003d new PatientBuilder(personToModify)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .withAppointment(\"22.11.2018,1300,1400,Alice,Heart,\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + personToModify.getName().toString() + \",\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                        + personToModify.getNric().toString())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.updatePerson(personToModify, modifiedPerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // remark -\u003e modifies second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        scheduleCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // redo -\u003e modifies same second person in unfiltered person list"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        final ScheduleCommand standardCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ScheduleCommand commandWithSameValues \u003d new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ScheduleCommand(INDEX_SECOND_PERSON,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                new Appointment(VALID_SCHEDULE_AMY))));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ScheduleCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                new Appointment(VALID_SCHEDULE_BOB))));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 196,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.MedicalRecord;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.DoctorUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PatientUtil;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(patient), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d (AddCommand) parser.parseCommand(DoctorUtil.getAddCommand(doctor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(doctor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(patient).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parseCommand_schedule() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        final Appointment appointment \u003d new Appointment(\"22.11.2018,1300,1400,Alice,Heart,Betty,S1234567A\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand command \u003d (ScheduleCommand) parser.parseCommand(ScheduleCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_SCHEDULE + appointment.value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertEquals(new ScheduleCommand(INDEX_FIRST_PERSON, appointment), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + PREFIX_ROLE + \"DOCTOR\") instanceof ListCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" \" + PREFIX_ROLE + \"PATIENT\") instanceof ListCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_updateCommandWord_returnsUpdateCommand() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final String medicalRecord \u003d \"Some medical record.\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_MEDICAL_RECORD + \" \" + medicalRecord);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_PERSON, new MedicalRecord(medicalRecord)), command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "-": 163,
      "nelvintan": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    private final String nonEmptyAppointment \u003d \"22.11.2018,1300,1400,Alice,Heart,Betty,S1234567A\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_SCHEDULE + nonEmptyAppointment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, new Appointment(nonEmptyAppointment));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_SCHEDULE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        expectedCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, new Appointment(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseFailure(parser, ScheduleCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertParseFailure(parser, ScheduleCommand.COMMAND_WORD + \" \" + nonEmptyAppointment, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        modelManager.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 2,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appointment \u003d new Appointment(\"22.11.2018,1300,1400,Jill,Heart,Jack,S1234567A\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointment.equals(appointment));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment remarkCopy \u003d new Appointment(appointment.value);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointment.equals(remarkCopy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment differentRemark \u003d new Appointment(\"22.11.2018,1300,1400,Alice,Heart,Bob,S1234567B\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(appointment.equals(differentRemark));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void addAndDeleteTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Alice\", \"Heart\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jill\", \"Heart\", \"Jack\", \"S1234567B\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jill\", \"Heart\", \"Jack\", \"S1234567B\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.delete(appointmentList, appt3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e secondAppointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        secondAppointmentList \u003d AppointmentManager.add(appointmentList, appt1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(appointmentList.equals(secondAppointmentList));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void noClashTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 4 and 5 have different Doctors"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Alice\", \"Heart\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt5 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jill\", \"Heart\", \"Jack\", \"S1234567B\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 6 and 7 have different dates"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt6 \u003d new Appointment(\"23.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Priscilia\", \"Heart\", \"Elaine\", \"S1234567A\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt7 \u003d new Appointment(\"24.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Priscilia\", \"Heart\", \"Elaine\", \"S1234567A\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // appointment 8 and 9 have different timings that do not clash"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt8 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Priscilia\", \"Heart\", \"Elaine\", \"S1234567A\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt9 \u003d new Appointment(\"22.11.2018\", \"1500\", \"1600\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Priscilia\", \"Heart\", \"Elaine\", \"S1234567A\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt4);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt6);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt8);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isClash(appointmentList, appt5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isClash(appointmentList, appt7));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertFalse(AppointmentManager.isClash(appointmentList, appt9));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void clashTest() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt8 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jeff\", \"Heart\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 1: new appointment\u0027s start time is before current appointment\u0027s start time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // and new appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt9 \u003d new Appointment(\"22.11.2018\", \"1200\", \"1500\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jeff\", \"Heart\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 2: new appointment\u0027s start time is after current appointment\u0027s start time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt10 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jeff\", \"Heart\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 3: new appointment\u0027s end time is after current appointment\u0027s end time"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Appointment appt11 \u003d new Appointment(\"22.11.2018\", \"1200\", \"1330\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jeff\", \"Heart\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 4: new appointment\u0027s start time is current appointment\u0027s end time"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt12 \u003d new Appointment(\"22.11.2018\", \"1359\", \"1401\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jeff\", \"Heart\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        // Case 5: new appointment\u0027s start and end time are exactly the same as current"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt13 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Jeff\", \"Heart\", \"Seid\", \"S1234567A\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointmentList \u003d AppointmentManager.add(appointmentList, appt8);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt9));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt10));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt11));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt12));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointmentList, appt13));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public void clashTestForAppointmentList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt1 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1400\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Alice\", \"Heart\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt2 \u003d new Appointment(\"22.11.2018\", \"1401\", \"1405\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Alice\", \"Heart\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt3 \u003d new Appointment(\"22.11.2018\", \"1300\", \"1330\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Alice\", \"Heart\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        Appointment appt4 \u003d new Appointment(\"22.11.2018\", \"1330\", \"1400\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "                \"Alice\", \"Heart\", \"Bob\", \"S1234567A\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointments.add(appt3);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertTrue(AppointmentManager.isClash(appointments, appt4));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nelvintan": 128,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "public class PersonContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        // Search by phone, email and address, but not name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 16,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "import seedu.address.model.person.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_APPOINTMENT \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Appointment appointment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d new Appointment(DEFAULT_APPOINTMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        appointment \u003d personToCopy.getAppointment();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     * Sets the {@code Appointment} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    public PersonBuilder withAppointment(String appointment) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        this.appointment \u003d new Appointment(appointment);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nelvintan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags, appointment);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "nelvintan": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Set all Persons will empty appointments instead of actual Appointments"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            .withPhone(\"94351253\").withMedicalRecord(\"\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAppointment(\"\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            .withNric(\"S7412345C\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withNric(\"S8234567A\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withMedicalRecord(\"\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAppointment(\"\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            .withMedicalRecord(\"\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAppointment(\"\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withNric(\"S9898989B\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            .withMedicalRecord(\"\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAppointment(\"\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withNric(\"s8234599a\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Doctor ELLE \u003d new DoctorBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMedicalDepartment(\"Oncology\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Doctor FIONA \u003d new DoctorBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMedicalDepartment(\"Cardiology\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Doctor GEORGE \u003d new DoctorBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMedicalDepartment(\"Neurology\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAppointment(\"23.11.2018,1300,1400,Priscilia,Elaine\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .withNric(\"S9873342F\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Doctor IDA \u003d new DoctorBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withMedicalDepartment(\"Physiology\").withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withNric(VALID_NRIC_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withNric(VALID_NRIC_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "nelvintan": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nelvintan"
        },
        "content": "        assertEquals(expectedPerson.getAppointment().value, actualCard.getAppointment());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "nelvintan": 1
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        /* Case: find address of person in address book -\u003e 3 persons found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL, GEORGE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        /* Case: find email of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 3 persons found */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngkangtze"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, DANIEL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngkangtze": 10,
      "-": 191
    }
  }
]
