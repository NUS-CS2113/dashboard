[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d Hallper: All The Hallp You Will Ever Need"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d About Hallper"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Hallper is a professional desktop application that provides administrative convenience for JCRC members within the Halls of NUS. Duties such as consolidating resident contacts, mass blasting notifications to residents and keeping track of hall events are now ridiculously simplified with Hallper. Without a need for mouse control, every command input through the keyboard will suffice to carry out these duties. With our simple user interface, any JCRC member can easily master the utilities in Hallper to bring hall administrative duties to greater heights."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d Key Features"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Hallper provides the following features to improve the experience of JCRC members in carrying out hall duties:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Convenient clearing and importing of multiple contacts"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Tagging contacts by categories (CCA, block, etc)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Filtering through contacts quickly"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Profile view of contacts"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Budget allocation and management"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Mass emailing to multiple contacts"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Calendar to update monthly events"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Original source of the code AddressBook-Level4 project was created by https://github.com/se-edu/[SE-EDU] initiative"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 15,
      "-": 30
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Hallper was developed by https://cs2103-ay1819s1-w16-1.github.io/main/[TEAM W16-1].  +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "+"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "We are a TEAM W16-1 based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d ERIC YANG JIA WEI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "image::ericyjw.jpeg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/ericyjw[github]] [\u003c\u003cericjyw#, portfolio\u003e\u003e] +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To add in portfolio#}_ +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: [To be filled up]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d JAVEN SEOW YU BIN"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "image::javenseow.jpeg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/javenseow[github]] [\u003c\u003cjavenseow#, portfolio\u003e\u003e] +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To add in portfolio#}_"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: [#To be filled up#]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d KOK YUAN"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "image::eatorbeeaten.jpeg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/eatorbeeaten[github]] [\u003c\u003ceatorbeeaten#, portfolio\u003e\u003e] +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To add in portfolio#}_"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: [#To be filled up#]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d SHANNA LIM KENG WOON"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "image::kengwoon.jpeg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/kengwoon[github]] [\u003c\u003ckengwoon#, portfolio\u003e\u003e] +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To add in portfolio#}_"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: [#To be filled up#]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d TRAVIS CHING JIA YEA"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "image::gilgameshtc.jpeg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/gilgameshtc[github]] [\u003c\u003cgilgameshtc#, portfolio\u003e\u003e] +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To add in portfolio#}_"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer  +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: [#To be filled up#]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Examples of responsibilities: UI, Data, Dev Ops, Threading, UI}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 32,
      "-": 32
    }
  },
  {
    "path": "docs/team/eatorbeeaten.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d KOK YUAN - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/ericyjw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d ERIC YANG JIA WEI- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/gilgameshtc.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d TRAVIS CHING JIA YEA - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/kengwoon.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d SHANNA LIM KENG WOON - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/team.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d TEAM W16-1 Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/CalendarCreatedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.CalendarModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/** Indicates a calendar has been created*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CalendarCreatedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final CalendarModel data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CalendarCreatedEvent(CalendarModel data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return \"number of calendars \" + data.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateCalendarCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Creates a Calendar with a specified month, year and writes it to hard disk."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CreateCalendarCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create_calendar\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a calendar. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"MMM \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"YYYY\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"OCT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"2018 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calendar created: %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_EXISTING_CALENDAR \u003d \"This calendar already exists in Hallper\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CreateCalendarCommand(Month month, Year year) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (model.isExistingCalendar(year, month)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_CALENDAR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        model.createCalendar(year, month);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, month + \"-\" + year + \".ics\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof CreateCalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((CreateCalendarCommand) other).month)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((CreateCalendarCommand) other).year));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "GilgameshTC": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CreateCalendarCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CreateCalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Parses input arguments and creates a new CreateCalendarCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CreateCalendarCommandParser implements Parser\u003cCreateCalendarCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCalendarCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * and returns an CreateCalendarCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CreateCalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MONTH, PREFIX_YEAR)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CreateCalendarCommand(month, year);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "GilgameshTC": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String month} into a {@code Month}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Transform month to upper case"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        trimmedMonth \u003d trimmedMonth.toUpperCase();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Month.isValidMonthRegex(trimmedMonth) || !Month.isValidMonth(trimmedMonth)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Month.MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Month(trimmedMonth);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 126,
      "GilgameshTC": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.component.VEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.CalScale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.ProdId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.util.FixedUidGenerator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.util.UidGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Wraps Calendar Data"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CalendarModel {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private CalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CalendarModel(CalendarStorage calendarStorage, Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.existingCalendar \u003d existingCalendar;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Checks if calendar to be created already exists. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Set\u003cMonth\u003e yearExists \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (yearExists !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            for (Month existingMonths : yearExists) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                if (month.equals(existingMonths)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Creates the calendar file. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Year year, Month month) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Initialize the calendar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String calendarName \u003d month + \"-\" + year;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(new ProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(Version.VERSION_2_0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(CalScale.GREGORIAN);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Dummy Event"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar cal \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        cal.set(java.util.Calendar.MONTH, java.util.Calendar.DECEMBER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        cal.set(java.util.Calendar.DAY_OF_MONTH, 25);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Initialise as an all day event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        VEvent christmas \u003d new VEvent(new net.fortuna.ical4j.model.Date(cal.getTime()), \"Christmas Day\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Generate a UID for the event"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        UidGenerator ug \u003d new FixedUidGenerator(\"1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        christmas.getProperties().add(ug.generateUid());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getComponents().add(christmas);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Create the calendar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(calendar, calendarName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Update existing calendar map"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Set\u003cMonth\u003e yearOfCal \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (yearOfCal \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            Set\u003cMonth\u003e newYearOfCal \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            newYearOfCal.add(month);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            existingCalendar.put(year, newYearOfCal);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            yearOfCal.add(month);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Returns the updated Map: existingCalendar. */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Map\u003cYear, Set\u003cMonth\u003e\u003e updateExistingCalendar() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return existingCalendar;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Returns the number of calendar in hard disk. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (Year year : existingCalendar.keySet()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            Set\u003cMonth\u003e monthsOfYear \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            if (monthsOfYear !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                size +\u003d monthsOfYear.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!(other instanceof CalendarModel)) { //this handles null as well."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        CalendarModel o \u003d (CalendarModel) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarStorage.equals(o.calendarStorage)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 existingCalendar.equals(o.existingCalendar);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Objects.hash(calendarStorage, existingCalendar);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "GilgameshTC": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.CalendarCreatedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.IcsCalendarStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CalendarModel calendarModel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs and calendarStorage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs, CalendarStorage calendarStorage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, calendarStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" , user prefs \" + userPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" and calendar: \" + calendarStorage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarModel \u003d new CalendarModel(calendarStorage, userPrefs.getExistingCalendar());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, userPrefs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarStorage calendarStorage \u003d new IcsCalendarStorage(userPrefs.getCalendarPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarModel \u003d new CalendarModel(calendarStorage, userPrefs.getExistingCalendar());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Raises an event to indicate the calendar model has changed */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private void indicateCalendarModelChanged() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        raise(new CalendarCreatedEvent(calendarModel));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireAllNonNull(year, month);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarModel.isExistingCalendar(year, month);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            calendarModel.createCalendar(year, month);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            updateExistingCalendar();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            indicateCalendarModelChanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            logger.warning(\"Failed to save calendar(ics) file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void updateExistingCalendar() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        userPrefs.setExistingCalendar(calendarModel.updateExistingCalendar());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 calendarModel.equals(other.calendarModel);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 183,
      "GilgameshTC": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path calendarPath \u003d Paths.get(\"calendar\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        setExistingCalendar(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarPath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void setCalendarPath(Path calendarPath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarPath \u003d calendarPath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Map\u003cYear, Set\u003cMonth\u003e\u003e getExistingCalendar() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return existingCalendar;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void setExistingCalendar(Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.existingCalendar \u003d existingCalendar;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(calendarPath, o.calendarPath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, calendarPath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCalendar directory location : \" + calendarPath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "GilgameshTC": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Month.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a month in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMonthRegex(String)};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * is valid as declared in {@link #isValidMonth(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class Month {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_MONTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Months should only be three characters long, and a valid month in the calendar. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"It should also not be blank.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MONTH_VALIDATION_REGEX \u003d \"^[a-zA-Z]{3}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    // List of strings that represent valid months"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String[] VALID_MONTHS \u003d {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JAN\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"FEB\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"MAR\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"APR\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"MAY\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JUN\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JUL\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"AUG\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"SEP\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"OCT\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"NOV\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"DEC\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String month;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Constructs a {@code Month}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param month A valid month."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Month(String month) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidMonthRegex(month), MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        month \u003d month.toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidMonth(month), MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Month() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // default create a JAN month obj"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // For Json parsing, have to have a default constructor"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this(\"JAN\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string follows the correct month regex."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidMonthRegex(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return test.matches(MONTH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string is a valid month."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidMonth(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        boolean isValid \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (String monthName : VALID_MONTHS) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            if (test.compareTo(monthName) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                isValid \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns a string listing all the valid months."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static String listValidMonths() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (String month : VALID_MONTHS) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            sb.append(\"\\n\" + month);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof Month // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((Month) other).month)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return month.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Year.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a year in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidYear(String)};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Year should be a 4 digit integer, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String YEAR_VALIDATION_REGEX \u003d \"^\\\\d{4}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Constructs a {@code Year}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Year() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // default create a 2018 year obj"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // For Json parsing, have to have a default constructor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this(\"2018\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidYear(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return test.matches(YEAR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((Year) other).year)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return year.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CalendarStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a storage for Calendar."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public interface CalendarStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns the file path of the Calendar directory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    Path getCalendarPath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Creates the given Calendar to the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param calendar cannot be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param calendarName the name of the calendar to be created."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void createCalendar(Calendar calendar, String calendarName) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "GilgameshTC": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IcsCalendarStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.data.CalendarOutputter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * A class to access Calendars stored in the hard disk as a ics file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class IcsCalendarStorage implements CalendarStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Path dirPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public IcsCalendarStorage(Path dirPath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.dirPath \u003d dirPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Calendar calendar, String calendarName) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String fileName \u003d calendarName + \".ics\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Path pathToSave \u003d Paths.get(dirPath.toString(), fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        FileUtil.createIfMissing(pathToSave);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        FileOutputStream fout \u003d new FileOutputStream(pathToSave.toFile());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        CalendarOutputter outputter \u003d new CalendarOutputter();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        outputter.output(calendar, fout);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Objects.hash(dirPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!(other instanceof IcsCalendarStorage)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath.equals(((IcsCalendarStorage) other).dirPath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "GilgameshTC": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, CalendarStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    Path getCalendarPath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void createCalendar(Calendar calendar, String calendarName) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "GilgameshTC": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                          CalendarStorage calendarStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarStorage.getCalendarPath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Calendar calendar, String calendarName) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(calendar, calendarName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 94,
      "GilgameshTC": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void createCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void updateExistingCalendar() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 204,
      "GilgameshTC": 17
    }
  }
]
