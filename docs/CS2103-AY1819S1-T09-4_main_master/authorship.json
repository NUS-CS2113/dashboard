[
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        logic.getFilteredCarparkList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 118,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 40,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "//        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "//        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "//        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "//        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "//        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "//        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getFilteredCarparkList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void undoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void redoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void commitAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * A Model stub that contains a single carpark."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        private final Person person;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            this.person \u003d person;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * A Model stub that always accept the carpark being added."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            personsAdded.add(person);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void commitAddressBook() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            return new AddressBook();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 157,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 29,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final EditCommand.EditCarparkDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static final EditCommand.EditCarparkDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "//    static {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "//        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "//                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "//                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "//        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * - the address book and the filtered carpark list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cCarpark\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCarparkList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        } catch (CommandException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedFilteredList, actualModel.getFilteredCarparkList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show only the carpark at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "//     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "//        Person person \u003d model.getFilteredCarparkList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "//        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "//        model.updateFilteredCarparkList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "//        assertEquals(1, model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "//     * Deletes the first carpark in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "//    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredCarparkList().get(0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "//        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "//        model.commitAddressBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 63,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // delete -\u003e first carpark deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // undo -\u003e reverts addressbook back to previous state and filtered carpark list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // redo -\u003e same first carpark deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted carpark in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the carpark object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // delete -\u003e deletes second carpark in unfiltered carpark list / first carpark in filtered carpark list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // undo -\u003e reverts addressbook back to previous state and filtered carpark list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertNotEquals(personToDelete, model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // redo -\u003e deletes same second carpark in unfiltered carpark list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        model.updateFilteredCarparkList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(model.getFilteredCarparkList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 169,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditCarparkDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.updateCarpark(model.getFilteredCarparkList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person lastPerson \u003d model.getFilteredCarparkList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand.EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.updateCarpark(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCarparkDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedPerson \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personInFilteredList \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.updateCarpark(model.getFilteredCarparkList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // edit carpark in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand.EditCarparkDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personToEdit \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.updateCarpark(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // edit -\u003e first carpark edited"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // undo -\u003e reverts addressbook back to previous state and filtered carpark list to show all persons"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // redo -\u003e same first carpark edited again"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand.EditCarparkDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * 2. Undo the edit."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited carpark in the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * 4. Redo the edit. This ensures {@code RedoCommand} edits the carpark object regardless of indexing."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand.EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personToEdit \u003d model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.updateCarpark(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // edit -\u003e edits second carpark in unfiltered carpark list / first carpark in filtered carpark list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // undo -\u003e reverts addressbook back to previous state and filtered carpark list to show all persons"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertNotEquals(model.getFilteredCarparkList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // redo -\u003e edits same second carpark in unfiltered carpark list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor copyDescriptor \u003d new EditCarparkDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 241,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new CarparkContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new CarparkContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredCarparkList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredCarparkList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Parses {@code userInput} into a {@code CarparkContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CarparkContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return new CarparkContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 77,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 43,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 39,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 136,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditCarparkDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(new FindCommand(new CarparkContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 138,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 20,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditCarparkDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand.EditCarparkDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // phone"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // email"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // address"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // tags"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withEmail(VALID_EMAIL_BOB).withAddress("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand.EditCarparkDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCarparkDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 206,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 203,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 20,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            return persons;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 103,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        modelManager.getFilteredCarparkList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        modelManager.updateFilteredCarparkList(new CarparkContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        modelManager.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 80,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.emptyList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                addressBookWithBob,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.emptyList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.emptyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                addressBookWithAmy,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.emptyList(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                addressBookWithBob,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.emptyList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                addressBookWithAmy,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook differentAddressBookList \u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * and states after {@code versionedAddressBook#currentStatePointer}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 279,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isValidAddress() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null address"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid addresses"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 36,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/CarparkContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Ignore;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CarparkContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate firstPredicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//              firstPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate secondPredicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//              secondPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate firstPredicateCopy \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//              firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // One keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate predicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//              Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Multiple keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Only one matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Zero keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkContainsKeywordsPredicate predicate \u003d new CarparkContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 78,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isValidEmail() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // blank email"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // missing parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid email"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 59,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 35,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        person.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 94,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 36,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.UniqueCarparkList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.exceptions.DuplicateCarparkException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.exceptions.CarparkNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private final UniqueCarparkList uniqueCarparkList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 181,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 95,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedCarparkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.storage.XmlAdaptedCarpark.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedCarparkTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 104,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        original.addPerson(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        original.addPerson(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 120,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 46,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 23,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditCarparkDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditCarparkDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private EditCarparkDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor \u003d new EditCommand.EditCarparkDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditPersonDescriptorBuilder(EditCarparkDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        this.descriptor \u003d new EditCommand.EditCarparkDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns an {@code EditCarparkDescriptor} with fields containing {@code carpark}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor \u003d new EditCommand.EditCarparkDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Sets the {@code Name} of the {@code EditCarparkDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Sets the {@code Phone} of the {@code EditCarparkDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Sets the {@code Email} of the {@code EditCarparkDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Sets the {@code Address} of the {@code EditCarparkDescriptor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCarparkDescriptor}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public EditCarparkDescriptor build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return descriptor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 76,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 82,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditCarparkDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns an add command string for adding the {@code carpark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns the part of command string for the given {@code carpark}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns the part of command string for the given {@code EditCarparkDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static String getEditPersonDescriptorDetails(EditCarparkDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 53,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.events.ui.CarparkPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "//public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CarparkPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        selectionChangedEventStub \u003d new CarparkPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void display() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // default web page"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // associated web page of a carpark"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "//        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "// .fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 42,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CarparkCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "//public class CarparkCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CarparkCardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkCard carparkCard \u003d new CarparkCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uiPartRule.setUiPart(carparkCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCardDisplay(carparkCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // with tags"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        carparkCard \u003d new CarparkCard(personWithTags, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uiPartRule.setUiPart(carparkCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCardDisplay(carparkCard, personWithTags, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkCard carparkCard \u003d new CarparkCard(person, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same carpark, same index -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkCard copy \u003d new CarparkCard(person, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(carparkCard.equals(copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(carparkCard.equals(carparkCard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(carparkCard.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(carparkCard.equals(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // different carpark, same index -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(carparkCard.equals(new CarparkCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // same carpark, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(carparkCard.equals(new CarparkCard(person, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Asserts that {@code carparkCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void assertCardDisplay(CarparkCard carparkCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        PersonCardHandle personCardHandle \u003d new PersonCardHandle(carparkCard.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // verify carpark details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 67,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CarparkListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalCarparks.getTypicalCarparks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCarpark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import guitests.guihandles.CarparkCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import guitests.guihandles.CarparkListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "//public class CarparkListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CarparkListPanelTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final ObservableList\u003cCarpark\u003e TYPICAL_CARPARKS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// \u003d FXCollections.observableList(getTypicalCarparks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// \u003d new JumpToListRequestEvent(INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private CarparkListPanelHandle carparkListPanelHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void display() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        initUi(TYPICAL_CARPARKS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        for (int i \u003d 0; i \u003c TYPICAL_CARPARKS.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            carparkListPanelHandle.navigateToCard(TYPICAL_CARPARKS.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            Carpark expectedCarpark \u003d TYPICAL_CARPARKS.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            CarparkCardHandle actualCard \u003d carparkListPanelHandle.getCarparkCardHandle(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertCardDisplaysCarpark(expectedCarpark, actualCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        initUi(TYPICAL_CARPARKS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkCardHandle expectedCarpark \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// carparkListPanelHandle.getCarparkCardHandle(INDEX_SECOND_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkCardHandle selectedCarpark \u003d carparkListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertCardEquals(expectedCarpark, selectedCarpark);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Verifies that creating and deleting large number of carparks in {@code CarparkListPanel} requires lesser than"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        ObservableList\u003cCarpark\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            initUi(backingList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }, \"Creation and deletion of carpark cards exceeded time limit\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns a list of carparks containing {@code carparkCount} carparks that is used to populate the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * {@code CarparkListPanel}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private ObservableList\u003cCarpark\u003e createBackingList(int carparkCount) throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Path xmlFile \u003d createXmlFileWithCarparks(carparkCount);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getCarparkList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns a .xml file containing {@code carparkCount}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "// carparks. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private Path createXmlFileWithCarparks(int carparkCount) throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        for (int i \u003d 0; i \u003c carparkCount; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            builder.append(\"\u003ccarparks\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            builder.append(\"\u003c/carparks\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Path manyCarparksFile \u003d TEST_DATA_FOLDER.resolve(\"manyCarparks.xml\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        FileUtil.createFile(manyCarparksFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        FileUtil.writeToFile(manyCarparksFile, builder.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        manyCarparksFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return manyCarparksFile;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Initializes {@code carparkListPanelHandle} with a {@code CarparkListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Also shows the {@code Stage} that displays only {@code CarparkListPanel}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private void initUi(ObservableList\u003cCarpark\u003e backingList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        CarparkListPanel carparkListPanel \u003d new CarparkListPanel(backingList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        uiPartRule.setUiPart(carparkListPanel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        carparkListPanelHandle \u003d new CarparkListPanelHandle(getChildNode(carparkListPanel.getRoot(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                CarparkListPanelHandle.CARPARK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 123,
      "-": 5
    }
  }
]
