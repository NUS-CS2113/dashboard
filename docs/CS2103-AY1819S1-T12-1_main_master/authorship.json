[
  {
    "path": "src/main/java/seedu/address/commons/events/model/UserLoggedInEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/** Indicates the a user has logged in */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class UserLoggedInEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public UserLoggedInEvent(Username username) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return \"Logged in to user: \" + username.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 14,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowStatsRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class ShowStatsRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 12,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SwapLeftPanelEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Indicates that a panel swap is required."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class SwapLeftPanelEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Stores the two types of panels to swap to."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public enum PanelType {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        LIST, STATISTIC"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private PanelType panelType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public SwapLeftPanelEvent(PanelType type) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        panelType \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public PanelType getPanelType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return panelType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 29,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, NoUserSelectedException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            UserAlreadyExistsException, NonExistentUserException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //@@author jonathantjm"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public LinkedHashMap\u003cString, Double\u003e getExpenseStats() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        ObservableList\u003cPerson\u003e expenseList \u003d model.getExpenseStats();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        LinkedHashMap\u003cString, Double\u003e stats \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        for (Person e : expenseList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            if (stats.containsKey(e.getDate().toString())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                stats.put("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                    e.getDate().toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                    stats.get(e.getDate().toString()) + Double.parseDouble(e.getCost().value)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                stats.put(e.getDate().toString(), Double.parseDouble(e.getCost().value));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 18,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Logs in a user in the model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"li\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \": Logs in to the user with the given USERNAME.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Parameters: USERNAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" examplename\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_LOGIN_SUCCESS \u003d \"Logged in as %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public LoginCommand(Username username) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NonExistentUserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.loadUserData(this.username);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_LOGIN_SUCCESS, this.username.toString()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 username.equals(((LoginCommand) other).username)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 36,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SignUpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Adds a user to the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SignUpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"signup\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"su\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \": Creates a user with the given USERNAME.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Parameters: USERNAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"USERNAME cannot contain any of these characters: \\\" \u003e \u003c : \\\\ / | ? *\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" examplename\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_SIGN_UP_SUCCESS \u003d \"User \\\"%1$s\\\" has successfully been created.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public SignUpCommand(Username username) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws UserAlreadyExistsException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.addUser(this.username);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SIGN_UP_SUCCESS, this.username.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || (other instanceof SignUpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 username.equals(((SignUpCommand) other).username)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 37,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowStatsRequestEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"st\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opened the stats window\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model.updateExpenseStats(isPastSevenDays());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        EventsCenter.getInstance().post(new ShowStatsRequestEvent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private Predicate\u003cPerson\u003e isPastSevenDays() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        now.add(Calendar.DAY_OF_MONTH, -7);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return e -\u003e e.getDate().fullDate.after(now);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 26,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Parses input arguments and creates a new LoginCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public LoginCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Username username \u003d new Username(userInput.trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new LoginCommand(username);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 22,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SignUpCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Parses input arguments and creates a new SignUpCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SignUpCommandParser implements Parser\u003cSignUpCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public SignUpCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Username username \u003d new Username(userInput.trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new SignUpCommand(username);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 22,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Username username;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CategoryList categoryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Budget maximumBudget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty AddressBook with the given username."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param username the username of the AddressBook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(Username username) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.categoryList \u003d new CategoryList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.maximumBudget \u003d new Budget(\"28.00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this(toBeCopied.getUsername());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //// budget operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifies the maximum budget for the current expense tracker"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param budget a valid double"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void modifyMaximumBudget(double budget) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.maximumBudget.modifyBudget(budget);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifies the maximum budget for the current expense tracker"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param budget a valid Budget"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void modifyMaximumBudget(Budget budget) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.maximumBudget \u003d budget;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operaticons"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.forEach(person -\u003e this.maximumBudget.addExpense(person.getCost().getCostValue()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.maximumBudget \u003d newData.getMaximumBudget();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.persons.contains(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person into the address book"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if expense is successfully added withouot exceeding budget, else false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean addPerson(Person p) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.add(p);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.maximumBudget.addExpense(p.getCost().getCostValue());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Add an expense to the expense tracker."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the category of the expense doesn\u0027t exist, the category will be created."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addExpense(Expense e) { //TODO: Refine this once other attributes are ready"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Category category \u003d e.getCategory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!this.categoryList.hasCategory(category)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            this.categoryList.addCategory(category);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.categoryList.addExpense(category, e);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public CategoryList getCategoryList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.categoryList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        this.maximumBudget.alterSpending(target, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        this.maximumBudget.removeExpense(key);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Budget(this.maximumBudget.getBudgetCap(), this.maximumBudget.getCurrentExpenses());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUsername(Username newUsername) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d newUsername;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.maximumBudget.equals(((AddressBook) other).maximumBudget);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 175,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.UserLoggedInEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.expense.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Predicate\u003cPerson\u003e expenseStatPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cUsername, ReadOnlyAddressBook\u003e addressBooks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBooks and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(Map\u003cUsername, ReadOnlyAddressBook\u003e addressBooks, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBooks, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBooks \u003d addressBooks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBooks + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.versionedAddressBook \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filteredPersons \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cUsername, ReadOnlyAddressBook\u003e addressBooks \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBooks + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBooks \u003d addressBooks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBooks.put(addressBook.getUsername(), addressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d addressBook.getUsername();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.versionedAddressBook \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filteredPersons \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            loadUserData(addressBook.getUsername());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NonExistentUserException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalStateException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new HashMap\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBooks.replace(this.username, this.versionedAddressBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.versionedAddressBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateAddressBookChanged() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean addPerson(Person person) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean budgetNotExceeded \u003d versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return budgetNotExceeded;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (filteredPersons \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (filteredPersons \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    //@author winsonhys"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Budget \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void modifyMaximumBudget(Budget budget) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        this.versionedAddressBook.modifyMaximumBudget(budget);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.versionedAddressBook.getMaximumBudget();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //@@author jonathantjm"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Stats \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public ObservableList\u003cPerson\u003e getExpenseStats() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (filteredPersons \u003d\u003d null) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        FilteredList\u003cPerson\u003e temp \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        temp.setPredicate(expenseStatPredicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return FXCollections.unmodifiableObservableList(temp);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void updateExpenseStats(Predicate\u003cPerson\u003e predicate) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (filteredPersons \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        expenseStatPredicate \u003d predicate;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadUserData(Username username) throws NonExistentUserException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isUserExists(username)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NonExistentUserException(username, addressBooks.size());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        this.versionedAddressBook \u003d new VersionedAddressBook(addressBooks.get(username));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBooks.replace(this.username, this.versionedAddressBook);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            indicateUserLoggedIn();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            indicateAddressBookChanged();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoUserSelectedException nuse) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalStateException(nuse.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void unloadUserData() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        this.versionedAddressBook \u003d null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filteredPersons \u003d null;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        this.username \u003d null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUserExists(Username toCheck) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBooks.containsKey(toCheck);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the user has logged in and has been processed by the model*/"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateUserLoggedIn() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.username \u003d\u003d null) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new UserLoggedInEvent(this.username));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model copy(UserPrefs userPrefs) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager copy \u003d new ModelManager(addressBooks, userPrefs);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        copy.versionedAddressBook \u003d new VersionedAddressBook(this.getAddressBook());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        copy.filteredPersons \u003d new FilteredList\u003c\u003e(copy.versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        copy.username \u003d this.username;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addUser(Username newUsername) throws UserAlreadyExistsException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBooks.putIfAbsent(newUsername, new AddressBook(newUsername)) !\u003d null) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new UserAlreadyExistsException(newUsername);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasSelectedUser() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook !\u003d null \u0026\u0026 filteredPersons !\u003d null \u0026\u0026 username !\u003d null;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 25,
      "-": 278
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Budget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//@@author winsonhys"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Represents maximum budget of an expense tracker"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, mutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String MESSAGE_BUDGET_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \"Cost should only take values in the following format: {int}.{digit}{digit}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String BUDGET_VALIDATION_REGEX \u003d \"(\\\\d+).(\\\\d)(\\\\d)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private double budgetCap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private double currentExpenses;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Constructs a {@code Budget}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget a valid double"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget(String budget) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        checkArgument(isValidBudget(budget), BUDGET_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budgetCap \u003d Double.parseDouble(budget);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses \u003d 0.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Constructs a {@code Budget} with modified current expenses"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param currentExpenses"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget(double budget, double currentExpenses) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budgetCap \u003d budget;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses \u003d currentExpenses;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Returns true if a given string is a valid budget."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static boolean isValidBudget(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return test.matches(BUDGET_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Modifies the current (@code Budget) to have a new value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget a valid double"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void modifyBudget(double budget) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budgetCap \u003d budget;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Returns the most recent timestamp in which the budget is modified/created"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return a Calendar object that consists of the most recent timestamp."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Attemps to add expense"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param expense a valid expense of type double"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return true if expense is successfully added, false if adding expense will result in budget exceeding."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public boolean addExpense(double expense) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses +\u003d expense;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.currentExpenses \u003c\u003d this.budgetCap;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void removeExpense(Person expense) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses -\u003d expense.getCost().getCostValue();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Resets the total expense to 0"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void clearSpending() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Alters the current total expense"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param target valid expense in spending to be removed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param editedExpense new expense to be added"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void alterSpending(Person target, Person editedExpense) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses -\u003d target.getCost().getCostValue();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses +\u003d editedExpense.getCost().getCostValue();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public double getBudgetCap() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.budgetCap;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public double getCurrentExpenses() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.currentExpenses;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public boolean equals(Object budget) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Budget anotherBudget \u003d (Budget) budget;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.currentExpenses \u003d\u003d anotherBudget.currentExpenses"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            \u0026\u0026 this.budgetCap \u003d\u003d anotherBudget.budgetCap;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return String.format(\"$%f\", this.budgetCap);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 121,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/NoUserSelectedException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents an error where no user is logged in is encountered by the model."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class NoUserSelectedException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public NoUserSelectedException(String desc) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public NoUserSelectedException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super(\"Not logged into any user.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 13,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/NonExistentUserException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents an error where a user with the given username does not exist in the model is encountered."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class NonExistentUserException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public NonExistentUserException(Username username, int numUsers) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super(\"The user \\\"\" + username + \"\\\" does not exist. Num of users: \" + numUsers);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 9,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/UserAlreadyExistsException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents an error where a user with the given username already exists in the model is encountered."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class UserAlreadyExistsException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public UserAlreadyExistsException(Username username) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super(\"The user \\\"\" + username + \"\\\" already exists exist.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 9,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Represents the date the Expense was added into the Expense tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String DATE_FORMAT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            \"Date should be valid. Format dd-MM-yyyy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"(\\\\d{1,2})(\\\\-)(\\\\d{1,2})(\\\\-)(\\\\d{4})\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public final Calendar fullDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        checkArgument(isValidDate(date), DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        String [] parsedDate \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        fullDate.set(Integer.parseInt(parsedDate[2]),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                Integer.parseInt(parsedDate[1]) - 1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                Integer.parseInt(parsedDate[0]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Constructs a {@code Date} with current date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public Date() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * return true is the given date is in the valid format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            Calendar date \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            String [] parsedDate \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            date.setLenient(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            date.set(Integer.parseInt(parsedDate[2]),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                    Integer.parseInt(parsedDate[1]) - 1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                    Integer.parseInt(parsedDate[0]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                date.getTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return dateFormat.format(fullDate.getTime());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns true if both Dates represent the same calendar date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (!(other instanceof Date)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date otherDate \u003d (Date) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return fullDate.get(Calendar.DAY_OF_YEAR) \u003d\u003d otherDate.fullDate.get(Calendar.DAY_OF_YEAR)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                \u0026\u0026 fullDate.get(Calendar.MONTH) \u003d\u003d otherDate.fullDate.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                \u0026\u0026 fullDate.get(Calendar.YEAR) \u003d\u003d otherDate.fullDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 79,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Username.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents the Username of a user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class Username implements Comparable\u003cUsername\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            \"Names cannot contain any of these characters: \\\" \u003e \u003c : \\\\ / | ? *\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final String USERNAME_VALIDATION_REGEX \u003d \".*[/\\\\\\\\:*?\\\"\u003c\u003e|].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Username(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return !test.isEmpty() \u0026\u0026 !test.matches(USERNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 name.equalsIgnoreCase(((Username) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return name.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public int compareTo(Username o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return String.CASE_INSENSITIVE_ORDER.compare(this.name, o.name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 58,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedUsername.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * JAXB-friendly adapted version of the Username."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class XmlAdaptedUsername {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs an XmlAdapterUsername."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedUsername() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs a {@code XmlAdaptedUsername} with the given {@code userName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedUsername(String userName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Converts a given Username into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedUsername(Username source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        userName \u003d source.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Username toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!Username.isValidName(userName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new Username(userName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!(other instanceof XmlAdaptedUsername)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return userName.equalsIgnoreCase(((XmlAdaptedUsername) other).userName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 56,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Panel containing the budget information."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class BudgetPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"BudgetPanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public BudgetPanel () {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 11,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CategoriesPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Panel containing the budget information."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class CategoriesPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"CategoriesPanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public CategoriesPanel() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 11,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotificationPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Panel containing the notifications."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class NotificationPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"NotificationPanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public NotificationPanel() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 12,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Panel containing the statistic information."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class StatisticPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"StatisticPanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public StatisticPanel () {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 11,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Controller for a stats page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class StatsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatsWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private static final String FXML \u003d \"StatsWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private Pane chartArea;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Creates a new StatsWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @param statsData to use to populate the stats of the StatsWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public StatsWindow(LinkedHashMap\u003cString, Double\u003e statsData) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        super(FXML, new Stage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        setData(statsData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void setData(LinkedHashMap\u003cString, Double\u003e statsData) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        chartArea.getChildren().clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        xAxis.setLabel(\"Date\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        yAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        BarChart stats \u003d new BarChart(xAxis, yAxis);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        stats.setTitle(\"Daily Expenditure\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        XYChart.Series series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        series.setName(\"Day Amounts\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Set\u003cString\u003e keySet \u003d statsData.keySet();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        for (String s : keySet) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(s, statsData.get(s)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        stats.getData().add(series);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        chartArea.getChildren().add(stats);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Shows the stats window."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        logger.fine(\"Showing stats page.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Closes the stats window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        getRoot().close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns true if the stats window is currently being shown."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Focuses on the stats window."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public Pane getChartArea() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return chartArea;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 94,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * The Title. Provides the basic application layout containing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * the application header and title."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class Title extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"Title.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public Title() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 13,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UsernameTest;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullUsername_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new LoginCommand(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_userAcceptedByModel_loginSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(TypicalPersons.SAMPLE_USERNAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_LOGIN_SUCCESS, TypicalPersons.SAMPLE_USERNAME.toString()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(model.hasSelectedUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_nonExistantUser_loginFailed() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertFalse(model.isUserExists(new Username(UsernameTest.VALID_USERNAME_STRING)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NonExistentUserException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new LoginCommand(new Username(UsernameTest.VALID_USERNAME_STRING)).execute(model, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 33,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SignUpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.user.UsernameTest.VALID_USERNAME_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SignUpCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullUsername_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new SignUpCommand(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_userAcceptedByModel_signUpSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        CommandResult commandResult \u003d new SignUpCommand(new Username(VALID_USERNAME_STRING))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(String.format(SignUpCommand.MESSAGE_SIGN_UP_SUCCESS, VALID_USERNAME_STRING),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(model.isUserExists(new Username(VALID_USERNAME_STRING)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_duplicateRejectedByModel_signUpFailed() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(model.isUserExists(TypicalPersons.SAMPLE_USERNAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(UserAlreadyExistsException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new SignUpCommand(TypicalPersons.SAMPLE_USERNAME).execute(model, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 33,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UsernameTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class LoginCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private LoginCommandParser parser \u003d new LoginCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_validUsername() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, UsernameTest.VALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new LoginCommand(new Username(UsernameTest.VALID_USERNAME_STRING)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidUsername() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, UsernameTest.INVALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 16,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SignUpCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UsernameTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SignUpCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private SignUpCommandParser parser \u003d new SignUpCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_validUsername() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, UsernameTest.VALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new SignUpCommand(new Username(UsernameTest.VALID_USERNAME_STRING)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidUsername() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, UsernameTest.INVALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 16,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void constructor_validDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date test \u003d new Date();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        test.fullDate.set(2018, 1, 15);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date testDate \u003d new Date(\"15-02-2018\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(testDate.equals(test));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        testDate \u003d new Date();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(now.get(Calendar.DATE) \u003d\u003d testDate.fullDate.get(Calendar.DATE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(now.get(Calendar.MONTH) \u003d\u003d testDate.fullDate.get(Calendar.MONTH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(now.get(Calendar.YEAR) \u003d\u003d testDate.fullDate.get(Calendar.YEAR));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"09-2018\")); // missing day"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-2018\")); // missing month"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"15-09\")); // missing year"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"49-02-2018\")); // invalid day"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"15-13-2018\")); // invalid month"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"15-09-20192\")); // invalid year"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-02-2018\")); // invalid date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-04-2018\")); // invalid date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"13/02/2018\")); // invalid separator"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // valid Date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"15-02-2018\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"15-02-2017\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-2017\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"1-12-2017\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-1-2017\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void validToString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date test \u003d new Date(\"15-02-2018\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(\"15-02-2018\".equals(\"\" + test));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date testDate \u003d new Date(\"02-10-2018\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(testDate.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(testDate.equals(\" \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(testDate.equals(testDate));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(testDate.equals(new Date(\"02-10-2018\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 75,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/UsernameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class UsernameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String INVALID_USERNAME_STRING \u003d \"*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String VALID_USERNAME_STRING \u003d \"AAA\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Username(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_invalidUsername_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Username(INVALID_USERNAME_STRING));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void isValidUsername() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        // null user name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Username.isValidName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new Username(VALID_USERNAME_STRING), new Username(VALID_USERNAME_STRING));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new Username(VALID_USERNAME_STRING.toUpperCase()), new Username(VALID_USERNAME_STRING.toLowerCase()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new Username(VALID_USERNAME_STRING), new Username(VALID_USERNAME_STRING + VALID_USERNAME_STRING));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 30,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedUsernameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.UsernameTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class XmlAdaptedUsernameTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlAdaptedUsername validXmlAdaptedUsername \u003d new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING.toLowerCase()),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING.toUpperCase()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(validXmlAdaptedUsername,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING + UsernameTest.VALID_USERNAME_STRING));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(validXmlAdaptedUsername, validXmlAdaptedUsername);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING), new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testToModelType() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new XmlAdaptedUsername(UsernameTest.INVALID_USERNAME_STRING).toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 23,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Helper methods related to models."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class ModelUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Username TEST_USERNAME \u003d new Username(\"AAA\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Creates a model with a test user that is already logged in with username TEST_USERNAME. The address book is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * empty. Budget cap is $28 with $0 current expenses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @return a model logged in with a test user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static Model modelWithTestUser() throws NonExistentUserException, UserAlreadyExistsException,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        NoUserSelectedException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.addUser(TEST_USERNAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.loadUserData(TEST_USERNAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.modifyMaximumBudget(new Budget(28.00, 0.00));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 21,
      "-": 10
    }
  }
]
